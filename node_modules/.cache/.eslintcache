[{"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\index.js":"1","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\App.js":"2","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\reportWebVitals.js":"3","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\signin.js":"4","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\subpage.js":"5","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\instances.js":"6","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\register.js":"7","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\user.js":"8","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\instance.js":"9","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\HowItWorks.js":"10","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\ChainLink.js":"11","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Dapp.js":"12","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\TermsOfService.js":"13","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Faqs.js":"14","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\ThreeSat.js":"15","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Development.js":"16","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Navbar\\index.js":"17","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\index.js":"18","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SideBar\\index.js":"19","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\SubpagesElements.js":"20","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Navbar\\NavbarElements.js":"21","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\interact.js":"22","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\Data.js":"23","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\index.js":"24","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Signin\\index.js":"25","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Register\\index.js":"26","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instance\\index.js":"27","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instances\\index.js":"28","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SideBar\\SidebarElements.js":"29","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\index.js":"30","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Footer\\index.js":"31","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\HeroSection\\index.js":"32","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\supportFunctions.js":"33","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\FormElements.js":"34","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\UserElements.js":"35","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Signin\\SinginElements.js":"36","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instance\\InstanceElements.js":"37","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Register\\RegisterElements.js":"38","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instances\\InstancesElements.js":"39","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\InfoElements.js":"40","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Footer\\FooterElements.js":"41","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\HeroSection\\HeroElements.js":"42","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\secureSession.js":"43","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\helper.js":"44","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ButtonElements.js":"45","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\RowHeaderTable\\index.js":"46","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\index.js":"47","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\helperFunctions.js":"48","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\tableElements.js":"49","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\RowHeaderTable\\tableElements.js":"50","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\index.js":"51","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\reportWebVitals.js":"52","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\App.js":"53","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\user.js":"54","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\register.js":"55","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\signin.js":"56","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\instances.js":"57","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\subpage.js":"58","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\instance.js":"59","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Navbar\\index.js":"60","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\HowItWorks.js":"61","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\ChainLink.js":"62","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Dapp.js":"63","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\ThreeSat.js":"64","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\TermsOfService.js":"65","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Faqs.js":"66","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Development.js":"67","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\index.js":"68","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SideBar\\index.js":"69","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Navbar\\NavbarElements.js":"70","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\interact.js":"71","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\SubpagesElements.js":"72","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\Data.js":"73","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Register\\index.js":"74","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Signin\\index.js":"75","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\index.js":"76","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SideBar\\SidebarElements.js":"77","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instances\\index.js":"78","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instance\\index.js":"79","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\index.js":"80","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Footer\\index.js":"81","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\HeroSection\\index.js":"82","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\FormElements.js":"83","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Register\\RegisterElements.js":"84","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Signin\\SinginElements.js":"85","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\supportFunctions.js":"86","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\UserElements.js":"87","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instances\\InstancesElements.js":"88","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instance\\InstanceElements.js":"89","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\InfoElements.js":"90","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Footer\\FooterElements.js":"91","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\HeroSection\\HeroElements.js":"92","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\secureSession.js":"93","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\helper.js":"94","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ButtonElements.js":"95","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\RowHeaderTable\\index.js":"96","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\index.js":"97","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\RowHeaderTable\\tableElements.js":"98","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\helperFunctions.js":"99","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\tableElements.js":"100"},{"size":500,"mtime":499162500000,"results":"101","hashOfConfig":"102"},{"size":2549,"mtime":1650316264682,"results":"103","hashOfConfig":"102"},{"size":362,"mtime":499162500000,"results":"104","hashOfConfig":"102"},{"size":132,"mtime":1648030762000,"results":"105","hashOfConfig":"102"},{"size":252,"mtime":1650233737753,"results":"106","hashOfConfig":"102"},{"size":139,"mtime":1648030745000,"results":"107","hashOfConfig":"102"},{"size":141,"mtime":1648030756000,"results":"108","hashOfConfig":"102"},{"size":155,"mtime":1648030774000,"results":"109","hashOfConfig":"102"},{"size":134,"mtime":1648030739000,"results":"110","hashOfConfig":"102"},{"size":8438,"mtime":1651570193957,"results":"111","hashOfConfig":"102"},{"size":7351,"mtime":1648648195000,"results":"112","hashOfConfig":"102"},{"size":7964,"mtime":1648647737000,"results":"113","hashOfConfig":"102"},{"size":15643,"mtime":1648628960000,"results":"114","hashOfConfig":"102"},{"size":1604,"mtime":1648028414000,"results":"115","hashOfConfig":"102"},{"size":2981,"mtime":1648648277000,"results":"116","hashOfConfig":"102"},{"size":11993,"mtime":1648647543000,"results":"117","hashOfConfig":"102"},{"size":6235,"mtime":1648030517000,"results":"118","hashOfConfig":"102"},{"size":587,"mtime":1648030733000,"results":"119","hashOfConfig":"102"},{"size":3361,"mtime":1648031405000,"results":"120","hashOfConfig":"102"},{"size":1766,"mtime":1651569679408,"results":"121","hashOfConfig":"102"},{"size":2461,"mtime":1648629272000,"results":"122","hashOfConfig":"102"},{"size":2069,"mtime":1634316146000,"results":"123","hashOfConfig":"102"},{"size":2657,"mtime":1647983840000,"results":"124","hashOfConfig":"102"},{"size":11614,"mtime":1650316209364,"results":"125","hashOfConfig":"102"},{"size":2761,"mtime":1648579066000,"results":"126","hashOfConfig":"102"},{"size":3873,"mtime":1650292801666,"results":"127","hashOfConfig":"102"},{"size":3515,"mtime":1650232842297,"results":"128","hashOfConfig":"102"},{"size":734,"mtime":1647982160000,"results":"129","hashOfConfig":"102"},{"size":2109,"mtime":1648032943000,"results":"130","hashOfConfig":"102"},{"size":1549,"mtime":1648646806000,"results":"131","hashOfConfig":"102"},{"size":2077,"mtime":1648629033000,"results":"132","hashOfConfig":"102"},{"size":1589,"mtime":1647982060000,"results":"133","hashOfConfig":"102"},{"size":2171,"mtime":1650298331813,"results":"134","hashOfConfig":"102"},{"size":1257,"mtime":1648709574000,"results":"135","hashOfConfig":"102"},{"size":2685,"mtime":1648770915000,"results":"136","hashOfConfig":"102"},{"size":838,"mtime":1649198874000,"results":"137","hashOfConfig":"102"},{"size":2005,"mtime":1647805521000,"results":"138","hashOfConfig":"102"},{"size":1275,"mtime":1649198845000,"results":"139","hashOfConfig":"102"},{"size":327,"mtime":1646906282000,"results":"140","hashOfConfig":"102"},{"size":3028,"mtime":1648646982000,"results":"141","hashOfConfig":"102"},{"size":2158,"mtime":1648626930000,"results":"142","hashOfConfig":"102"},{"size":3012,"mtime":1646984200000,"results":"143","hashOfConfig":"102"},{"size":593,"mtime":1650272151951,"results":"144","hashOfConfig":"102"},{"size":1489,"mtime":1650272151951,"results":"145","hashOfConfig":"102"},{"size":738,"mtime":1633476710000,"results":"146","hashOfConfig":"102"},{"size":5429,"mtime":1649530304881,"results":"147","hashOfConfig":"102"},{"size":1856,"mtime":1649527740771,"results":"148","hashOfConfig":"102"},{"size":962,"mtime":1649063618000,"results":"149","hashOfConfig":"102"},{"size":713,"mtime":1649063191000,"results":"150","hashOfConfig":"102"},{"size":251,"mtime":1649530302225,"results":"151","hashOfConfig":"102"},{"size":500,"mtime":1652796176000,"results":"152","hashOfConfig":"153"},{"size":362,"mtime":1652796176000,"results":"154","hashOfConfig":"153"},{"size":2549,"mtime":1654245186702,"results":"155","hashOfConfig":"153"},{"size":149,"mtime":1652796176000,"results":"156","hashOfConfig":"153"},{"size":134,"mtime":1652796176000,"results":"157","hashOfConfig":"153"},{"size":125,"mtime":1652796176000,"results":"158","hashOfConfig":"153"},{"size":139,"mtime":1652796176000,"results":"159","hashOfConfig":"153"},{"size":252,"mtime":1652796176000,"results":"160","hashOfConfig":"153"},{"size":134,"mtime":1652796176000,"results":"161","hashOfConfig":"153"},{"size":6053,"mtime":1654204214478,"results":"162","hashOfConfig":"153"},{"size":8438,"mtime":1652796176000,"results":"163","hashOfConfig":"153"},{"size":7351,"mtime":1652796176000,"results":"164","hashOfConfig":"153"},{"size":7964,"mtime":1652796176000,"results":"165","hashOfConfig":"153"},{"size":538,"mtime":1654203934842,"results":"166","hashOfConfig":"153"},{"size":15643,"mtime":1652796176000,"results":"167","hashOfConfig":"153"},{"size":3550,"mtime":1654104602766,"results":"168","hashOfConfig":"153"},{"size":11993,"mtime":1652796176000,"results":"169","hashOfConfig":"153"},{"size":568,"mtime":1652796176000,"results":"170","hashOfConfig":"153"},{"size":3255,"mtime":1654204124264,"results":"171","hashOfConfig":"153"},{"size":2347,"mtime":1652874888006,"results":"172","hashOfConfig":"153"},{"size":1991,"mtime":1652796176000,"results":"173","hashOfConfig":"153"},{"size":1633,"mtime":1652874888006,"results":"174","hashOfConfig":"153"},{"size":2498,"mtime":1654204026844,"results":"175","hashOfConfig":"153"},{"size":3749,"mtime":1652796176000,"results":"176","hashOfConfig":"153"},{"size":2669,"mtime":1652796176000,"results":"177","hashOfConfig":"153"},{"size":12303,"mtime":1655202366582,"results":"178","hashOfConfig":"153"},{"size":2018,"mtime":1652874888006,"results":"179","hashOfConfig":"153"},{"size":734,"mtime":1652796176000,"results":"180","hashOfConfig":"153"},{"size":3515,"mtime":1655277506791,"results":"181","hashOfConfig":"153"},{"size":1486,"mtime":1654203926773,"results":"182","hashOfConfig":"153"},{"size":2005,"mtime":1652796176000,"results":"183","hashOfConfig":"153"},{"size":1539,"mtime":1652873139363,"results":"184","hashOfConfig":"153"},{"size":1257,"mtime":1652796176000,"results":"185","hashOfConfig":"153"},{"size":1193,"mtime":1652875775826,"results":"186","hashOfConfig":"153"},{"size":780,"mtime":1652875855509,"results":"187","hashOfConfig":"153"},{"size":3443,"mtime":1655248507991,"results":"188","hashOfConfig":"153"},{"size":2542,"mtime":1654105733885,"results":"189","hashOfConfig":"153"},{"size":306,"mtime":1654114519312,"results":"190","hashOfConfig":"153"},{"size":1984,"mtime":1655277017689,"results":"191","hashOfConfig":"153"},{"size":2899,"mtime":1652875553420,"results":"192","hashOfConfig":"153"},{"size":2056,"mtime":1652873809868,"results":"193","hashOfConfig":"153"},{"size":2874,"mtime":1652875425035,"results":"194","hashOfConfig":"153"},{"size":593,"mtime":1652796176000,"results":"195","hashOfConfig":"153"},{"size":1490,"mtime":1655248507990,"results":"196","hashOfConfig":"153"},{"size":716,"mtime":1652874888006,"results":"197","hashOfConfig":"153"},{"size":5221,"mtime":1652796176000,"results":"198","hashOfConfig":"153"},{"size":1789,"mtime":1655277506791,"results":"199","hashOfConfig":"153"},{"size":251,"mtime":1652796176000,"results":"200","hashOfConfig":"153"},{"size":1534,"mtime":1655277503804,"results":"201","hashOfConfig":"153"},{"size":713,"mtime":1655277082653,"results":"202","hashOfConfig":"153"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},"79kevw",{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"238","usedDeprecatedRules":"205"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"243","usedDeprecatedRules":"205"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"250","usedDeprecatedRules":"205"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"205"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"205"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},"1r6x28q",{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"330","usedDeprecatedRules":"311"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"311"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"311"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"351","usedDeprecatedRules":"311"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"356","usedDeprecatedRules":"311"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"311"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"311"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"311"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\index.js",[],["418","419"],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\App.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\reportWebVitals.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\signin.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\subpage.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\instances.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\register.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\user.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\instance.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\HowItWorks.js",["420"],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\ChainLink.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Dapp.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\TermsOfService.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Faqs.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\ThreeSat.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\Development.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Navbar\\index.js",["421","422","423","424","425","426"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { FaBars } from 'react-icons/fa';\r\nimport { animateScroll as scroll } from 'react-scroll';\r\nimport {\r\n  Nav,\r\n  NavbarContainer,\r\n  NavLogo,\r\n  MobileIcon,\r\n  NavMenu,\r\n  NavItem,\r\n  NavLinks,\r\n  NavBtn,\r\n  NavBtnLink\r\n} from './NavbarElements';\r\nimport logo from 'images/logo.png';\r\nimport { connectWallet, getCurrentWalletConnected } from '../interact';\r\n\r\nconst Navbar = ({ toggle }) => {\r\n  // MetaMask Wallet Connection\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const history = useHistory()\r\n  const [url, setUrl] = useState(window.location.pathname);\r\n\r\n  useEffect(() => {\r\n    const initialSet = async () => {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n      addWalletListener();\r\n    }\r\n    initialSet();\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const [scrollNav, setScrollNav] = useState(false)\r\n\r\n  const changeNav = () => {\r\n    if (window.scrollY >= 80) {\r\n      setScrollNav(true)\r\n    } else {\r\n      setScrollNav(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', changeNav)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    return history.listen((location) => {\r\n      setUrl(location.pathname);\r\n      // if go to another page, first remove all the active class of NavLinks\r\n      // so the green bottom line will disappear\r\n      // then check current path, and activate responding class of NavLinks\r\n      const q1 = document.querySelector(\"#scrollToDapp\");\r\n      const q2 = document.querySelector(\"#scrollToHowItWorks\");\r\n      const q3 = document.querySelector(\"#scrollTo3sat\");\r\n      const q4 = document.querySelector(\"#scrollToChainlink\");\r\n      q1.classList.remove('active');\r\n      q2.classList.remove('active');\r\n      q3.classList.remove('active');\r\n      q4.classList.remove('active');\r\n      switch (location.pathname) {\r\n        case \"/dapp\":\r\n          q1.classList.add('active');\r\n          break;\r\n        case \"/howitworks\":\r\n          // console.log(location.pathname);\r\n          q2.classList.add('active');\r\n          break;\r\n        case \"/3sat\":\r\n          q3.classList.add('active');\r\n          break;\r\n        case \"/chainlink\":\r\n          q4.classList.add('active');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    })\r\n  }, [history])\r\n\r\n  const toggleHome = () => {\r\n    scroll.scrollToTop();\r\n  }\r\n\r\n  const handleClick = (path) => {\r\n    // if at the front page, click NavLinks button will scroll to the location of element\r\n    // if not, click NavLinks button will navigate to clicked path\r\n    if (url !== \"/\" && path !== url) {\r\n      history.push(path);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Nav scrollNav={scrollNav} id=\"navbar\">\r\n        <NavbarContainer>\r\n          <NavLogo to='/' onClick={toggleHome}>\r\n            <img src={logo} alt='logo' />\r\n          </NavLogo>\r\n          <MobileIcon onClick={toggle}>\r\n            <FaBars />\r\n          </MobileIcon>\r\n          <NavMenu>\r\n            <NavItem>\r\n              <NavLinks id=\"scrollToDapp\"\r\n                to={url === '/' ? 'dapp' : 'navbar'}\r\n                smooth={true}\r\n                duration={500}\r\n                spy={url === '/' ? true : false}\r\n                exact='true'\r\n                offset={-80}\r\n                onClick={() => handleClick('/dapp')}\r\n              >ÐApp</NavLinks>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLinks id=\"scrollToHowItWorks\"\r\n                to={url === '/' ? 'how_it_works' : 'navbar'}\r\n                smooth={true}\r\n                duration={500}\r\n                spy={url === '/' ? true : false}\r\n                exact='true'\r\n                offset={-80}\r\n                onClick={() => handleClick('/howitworks')}\r\n              >How it works</NavLinks>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLinks id=\"scrollTo3sat\"\r\n                to={url === '/' ? '3sat' : 'navbar'}\r\n                smooth={true}\r\n                duration={500}\r\n                spy={url === '/' ? true : false}\r\n                exact='true'\r\n                offset={-80}\r\n                onClick={() => handleClick('/3sat')}\r\n              >3-SAT</NavLinks>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLinks id=\"scrollToChainlink\"\r\n                to={url === '/' ? 'chainlink' : 'navbar'}\r\n                smooth={true}\r\n                duration={500}\r\n                spy={url === '/' ? true : false}\r\n                exact='true'\r\n                offset={-80}\r\n                onClick={() => handleClick('/chainlink')}\r\n              >Chainlink</NavLinks>\r\n            </NavItem>\r\n          </NavMenu>\r\n          <NavBtn>\r\n            <NavBtnLink to=\"\" id=\"walletButton\" onClick={connectWalletPressed}>\r\n              {walletAddress.length > 0 ? (\"Connected: \" +\r\n                String(walletAddress).substring(0, 6) + \"...\" +\r\n                String(walletAddress).substring(38)) : (<span>Connect Wallet</span>)}\r\n            </NavBtnLink>\r\n          </NavBtn>\r\n        </NavbarContainer>\r\n      </Nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\pages\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SideBar\\index.js",["427","428"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  SidebarContainer,\r\n  Icon,\r\n  CloseIcon,\r\n  SidebarWrapper,\r\n  SidebarMenu,\r\n  SidebarLink,\r\n  SideBtnWrap,\r\n  SidebarRoute\r\n} from './SidebarElements';\r\n\r\nimport { connectWallet, getCurrentWalletConnected } from '../interact';\r\n\r\nconst Sidebar = ({ isOpen, toggle }) => {\r\n  // MetaMask Wallet Connection\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const history = useHistory()\r\n  const [url, setUrl] = useState(window.location.pathname);\r\n\r\n  useEffect(() => {\r\n    const initialSet = async () => {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n      addWalletListener();\r\n    }\r\n    initialSet();\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return history.listen((location) => {\r\n      setUrl(location.pathname);\r\n    })\r\n  }, [history])\r\n\r\n  const handleClick = (path) => {\r\n    // if at the front page, click NavLinks button will scroll to the location of element\r\n    // if not, click NavLinks button will navigate to clicked path\r\n    if (url !== \"/\" && path !== url) {\r\n      history.push(path);\r\n    }\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <SidebarContainer isOpen={isOpen} onClick={toggle}>\r\n      <Icon onClick={toggle}>\r\n        <CloseIcon>\r\n\r\n        </CloseIcon>\r\n      </Icon>\r\n      <SidebarWrapper>\r\n        <SidebarMenu>\r\n          <SidebarLink to='dapp' onClick={() => handleClick('/dapp')}>\r\n            ÐApp\r\n          </SidebarLink>\r\n          <SidebarLink to='how_it_works' onClick={() => handleClick('/howitworks')}>\r\n            How it works\r\n          </SidebarLink>\r\n          <SidebarLink to='3sat' onClick={() => handleClick('/3sat')}>\r\n            3-SAT\r\n          </SidebarLink>\r\n          <SidebarLink to='chainlink' onClick={() => handleClick('/chainlink')}>\r\n            Chainlink\r\n          </SidebarLink>\r\n        </SidebarMenu>\r\n        <SideBtnWrap>\r\n          <SidebarRoute to=\"\" id=\"walletButton\" onClick={connectWalletPressed}>\r\n            {walletAddress.length > 0 ? (\"Connected: \" +\r\n              String(walletAddress).substring(0, 6) + \"...\" +\r\n              String(walletAddress).substring(38)) : (<span>Connect Wallet</span>)}\r\n          </SidebarRoute>\r\n        </SideBtnWrap>\r\n      </SidebarWrapper>\r\n    </SidebarContainer>\r\n  )\r\n}\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SubPages\\SubpagesElements.js",["429"],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Navbar\\NavbarElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\interact.js",["430","431"],"import React from 'react';\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\Data.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\index.js",["432","433","434","435","436"],"import React, { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { generatorAddress, requestAccount } from '../../App.js';\r\nimport { ethers } from 'ethers';\r\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\r\nimport './messagesInfo.css'\r\nimport { buildInstance, buildDateArray } from './supportFunctions'\r\nimport swal from 'sweetalert';\r\nimport { secureStorage } from 'components/secureSession';\r\nimport {\r\n  Container,\r\n  FormButton,\r\n  FormButtonTop,\r\n  Form,\r\n  FormH1,\r\n  FormWrap1,\r\n  FormWrap2,\r\n} from './UserElements'\r\nimport {\r\n  FormLabel,\r\n  FormInput,\r\n  FormError\r\n} from '../FormElements'\r\nimport logo from '../../images/chainlink.png';\r\n\r\nconst UserSection = () => {\r\n  var infoArray = [];\r\n  var currentRandomNumber = null;\r\n  var oldRandomNumber = null;\r\n  let history = useHistory();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n  } = useForm();\r\n\r\n  const {\r\n    register: register2,\r\n    reset: reset2,\r\n    handleSubmit: handleSubmit2,\r\n    formState: { errors: errors2 }\r\n  } = useForm();\r\n\r\n  useEffect(() => {\r\n    // Check whether user entered the password before, if not, go back to /signin page\r\n    if (!secureStorage.getItem('password')) {\r\n      secureStorage.removeItem(\"password\");\r\n      secureStorage.removeItem(\"currOrcid\");\r\n      sessionStorage.setItem(\"noPassword\", true);\r\n      history.push(\"/signin\");\r\n    }\r\n  }, [history])\r\n\r\n  useEffect(() => {\r\n    secureStorage.removeItem(\"currOrcid\");\r\n  }, [])\r\n\r\n  /*\r\n  * Function to check if the user wnats to use A or B generator\r\n  */\r\n  async function myHandleSubmit(data, event) {\r\n    if (event.nativeEvent.submitter?.id === \"submit1\")\r\n      async_createAInstance(data);\r\n    else if (event.nativeEvent.submitter?.id === \"submit2\")\r\n      async_createBInstance(data);\r\n  }\r\n\r\n  /*\r\n  * This function executes the function to generate a new instance using A generator\r\n  */\r\n  async function async_createAInstance(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount()\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner()\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\r\n      const transaction = await contract.createAInstance(\r\n        data.p_value,\r\n        data.q_value,\r\n        secureStorage.getItem('password'),\r\n        data.numInstances,\r\n        { gasLimit: 30000000 })\r\n      await transaction.wait()\r\n    }\r\n  }\r\n\r\n  /*\r\n  * This function executes the function to generate a new instance using B generator\r\n  */\r\n  async function async_createBInstance(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount()\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner()\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\r\n      const transaction = await contract.createBInstance(\r\n        data.p_value,\r\n        data.q_value,\r\n        secureStorage.getItem('password'),\r\n        data.numInstances,\r\n        { gasLimit: 30000000 })\r\n      await transaction.wait()\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Get all instances from smart contract filtered by orcid\r\n  */\r\n  async function async_getAllInstances(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount()\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n      try {\r\n        const signer = provider.getSigner();\r\n        const result = await contract.connect(signer).getAllInstances(data.orcid);\r\n        infoArray = buildInstance(result);\r\n        secureStorage.setItem(\"currOrcid\", data.orcid)\r\n        history.push({\r\n          pathname: '/instances',\r\n          state: { infoArray }\r\n        });\r\n      } catch (err) {\r\n        console.log(\"Error: \", err)\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * VRF function to request the random number\r\n  */\r\n  async function async_getRandomNumber(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount()\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner()\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\r\n      try {\r\n        const transaction = await contract.getRandomNumber(secureStorage.getItem('password'))\r\n        await transaction.wait();\r\n      } catch (e) {\r\n        alert(\"Not enough LINK in the smart contract. Please contact the admin.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Asks to the contract if there is enough LINK to call the oracles\r\n  */\r\n  async function async_getRemainingLINK(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount();\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n      try {\r\n        const signer = provider.getSigner();\r\n        const result = await contract.connect(signer).getRemainingLINK();\r\n        console.log(\"Smart contract balance is: \" + (result / 10e17) + \" LINK token\");\r\n      } catch (err) {\r\n        console.log(\"Error: \", err)\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Function to check the moment when the random number has been generated\r\n  */\r\n  async function async_randomResult(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount();\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n      try {\r\n        const signer = provider.getSigner();\r\n        let isCanceled = false;\r\n        oldRandomNumber = currentRandomNumber;\r\n        if (parseInt(currentRandomNumber, 16) === parseInt(oldRandomNumber, 16) && currentRandomNumber !== null && currentRandomNumber != 0)\r\n          swal(\"Wait!\", \"You have not yet used the current number\", \"info\");\r\n        while (!isCanceled) {\r\n          currentRandomNumber = await contract.connect(signer).randomResult();\r\n          if (parseInt(currentRandomNumber, 16) !== parseInt(oldRandomNumber, 16) && oldRandomNumber !== null) {\r\n            isCanceled = true;\r\n            swal(\"Good job!\", \"Your new random number is available\", \"success\");\r\n          } else {\r\n            oldRandomNumber = currentRandomNumber;\r\n          }\r\n          await new Promise(resolve => setTimeout(resolve, 2000));\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Error: \", err)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /*\r\n  * Get the array which contains all the dates for the random numbers generated from the SC\r\n  */\r\n  async function async_getDateNumber(data) {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n      await requestAccount()\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\r\n      try {\r\n        const signer = provider.getSigner();\r\n        const result = await contract.connect(signer).getDateNumber(secureStorage.getItem('password'));\r\n        console.log(buildDateArray(result));\r\n      } catch (err) {\r\n        console.log(\"Error: \", err)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <FormWrap1>\r\n        <Form key={1} onSubmit={handleSubmit(myHandleSubmit)}>\r\n          <FormH1>Create a new instance</FormH1>\r\n          <img className=\"logo\" src={logo} alt='logo' onClick={() => { async_getRandomNumber(); async_getRemainingLINK(); async_randomResult(); }} />\r\n          <span className=\"field-tip\">\r\n            <FormLabel>First parameter</FormLabel>\r\n            <span className=\"tip-content\">The \"p\" value indicates the probability of generating a new proposition symbol</span>\r\n          </span>\r\n          <FormInput {...register(\"p_value\", {\r\n            required: true,\r\n            max: 99,\r\n            min: 1,\r\n            pattern: /^[0-9\\b]+$/\r\n          })} type=\"number\" name=\"p_value\" placeholder=\"p value\" />\r\n          {errors?.p_value?.type === \"required\" && <FormError>Field required</FormError>}\r\n          {errors?.p_value?.type === \"max\" && <FormError>Integer number between [1, 99]</FormError>}\r\n          {errors?.p_value?.type === \"min\" && <FormError>Integer number between [1, 99]</FormError>}\r\n          {errors?.p_value?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\r\n          <span className=\"field-tip\">\r\n            <FormLabel>Second parameter</FormLabel>\r\n            <span className=\"tip-content\">The \"q\" value indicates the probability of generating a new clause</span>\r\n          </span>\r\n          <FormInput {...register(\"q_value\", {\r\n            required: true,\r\n            max: 99,\r\n            min: 1,\r\n            pattern: /^[0-9\\b]+$/\r\n          })} type=\"number\" name=\"q_value\" placeholder=\"q value\" />\r\n          {errors?.q_value?.type === \"required\" && <FormError>Field required</FormError>}\r\n          {errors?.q_value?.type === \"max\" && <FormError>Integer number between [1, 99]</FormError>}\r\n          {errors?.q_value?.type === \"min\" && <FormError>Integer number between [1, 99]</FormError>}\r\n          {errors?.q_value?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\r\n          <span className=\"field-tip\">\r\n            <FormLabel>Number of instances</FormLabel>\r\n            <span className=\"tip-content\">Enter the number of instances you would like to generate</span>\r\n          </span>\r\n          <FormInput {...register(\"numInstances\", {\r\n            required: true,\r\n            max: 5,\r\n            min: 1,\r\n            pattern: /^[0-9\\b]+$/\r\n          })} type=\"number\" name=\"numInstances\" />\r\n          {errors?.numInstances?.type === \"required\" && <FormError>Field required</FormError>}\r\n          {errors?.numInstances?.type === \"max\" && <FormError>Integer number between [1, 5]</FormError>}\r\n          {errors?.numInstances?.type === \"min\" && <FormError>Integer number between [1, 5]</FormError>}\r\n          {errors?.numInstances?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\r\n          <div>\r\n            { /* FormButtonTop has props(left or right) for controlling the 'float' attr  */}\r\n            <FormButtonTop left id=\"submit1\" type=\"submit\" value=\"A generator\" />\r\n            <FormButtonTop right id=\"submit2\" type=\"submit\" value=\"B generator\" />\r\n          </div>\r\n        </Form>\r\n      </FormWrap1>\r\n      <FormWrap2>\r\n        <Form key={2} onSubmit={handleSubmit2(async_getAllInstances)}>\r\n          <FormH1>Search for instances</FormH1>\r\n          <FormLabel>ORCID</FormLabel>\r\n          <FormInput {...register2(\"orcid\", {\r\n            required: true,\r\n            minLength: 16,\r\n            maxLength: 16,\r\n            pattern: /^[0-9\\b]+$/\r\n          })} type=\"number\" name=\"orcid\" />\r\n          {errors2?.orcid?.type === \"required\" && <FormError>Field required</FormError>}\r\n          {errors2?.orcid?.type === \"minLength\" && <FormError>It must be a number of 16 digits</FormError>}\r\n          {errors2?.orcid?.type === \"maxLength\" && <FormError>It must be a number of 16 digits</FormError>}\r\n          {errors2?.orcid?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\r\n          <FormButton type=\"submit\" value=\"Get instances\" />\r\n        </Form>\r\n      </FormWrap2>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default UserSection;","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Signin\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Register\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instance\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instances\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\SideBar\\SidebarElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Footer\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\HeroSection\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\supportFunctions.js",["437","438"],"const clausesLength = 3;\r\n\r\n/*\r\n* Builds the instance(s) into a friendly way\r\n*/\r\nexport function buildInstance(arr) {\r\n    let result = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let info = {\r\n            id: hexToDecimal(arr[i][0]),\r\n            chain: buildChain(arr[i][1]),\r\n            size: hexToDecimal(arr[i][2]),\r\n            created: buildDate(arr[i][3]),\r\n            solution: arr[i][4],\r\n            solved: arr[i][5],\r\n            ended: buildDate(arr[i][6])\r\n        };\r\n        result.push(info);\r\n    }\r\n    return result;\r\n}\r\n\r\n/*\r\n* Builds the chain as a string\r\n*/\r\nfunction buildChain(_oldChain) {\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while (array.length > 1) {\r\n        result += \"(\";\r\n        for (let i = 0; i < clausesLength; i++) {\r\n            if (Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if (i < clausesLength - 1)\r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if (array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n/*\r\n* Converts a hexadecimal number to decimal number\r\n*/\r\nfunction hexToDecimal(_hexNumber) {\r\n    return parseInt(_hexNumber._hex, 16);\r\n}\r\n\r\n/*\r\n* Builds the date as date format\r\n*/\r\nfunction buildDate(_oldDate) {\r\n    let result, newDate;\r\n    if (hexToDecimal(_oldDate) !== 0) {\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\r\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    } else\r\n        result = \"Date unavailable\";\r\n    return result;\r\n}\r\n\r\n/*\r\n* Returns 'true' or 'false' with 50% probability\r\n*/\r\nfunction getBoolean() {\r\n    if (Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\n/*\r\n* Builds an array of date as date format\r\n*/\r\nexport function buildDateArray(_arrayRandoms) {\r\n    let result = [];\r\n    for (let i = 0; i < _arrayRandoms.length; i++)\r\n        result.push(buildDate(_arrayRandoms[i]));\r\n    return result;\r\n} ","C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\FormElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\UserSection\\UserElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Signin\\SinginElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instance\\InstanceElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Register\\RegisterElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Instances\\InstancesElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\InfoSection\\InfoElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\Footer\\FooterElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\HeroSection\\HeroElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\secureSession.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\helper.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ButtonElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\RowHeaderTable\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\index.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\helperFunctions.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\ColumnHeaderTable\\tableElements.js",[],"C:\\Users\\Jonathan\\3SAT_Instance_Generator\\3SAT_Instance_Generator\\src\\components\\RowHeaderTable\\tableElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\index.js",[],["439","440"],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\reportWebVitals.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\App.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\user.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\register.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\signin.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\instances.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\subpage.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\instance.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Navbar\\index.js",["441","442","443","444","445","446"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport { FaBars } from 'react-icons/fa';\nimport { animateScroll as scroll } from 'react-scroll';\nimport {\n  Nav,\n  NavbarContainer,\n  NavLogo,\n  MobileIcon,\n  NavMenu,\n  NavItem,\n  NavLinks,\n  NavBtn,\n  NavBtnLink\n} from './NavbarElements';\nimport logo from 'images/logo.png';\nimport { connectWallet, getCurrentWalletConnected } from '../interact';\n\nconst Navbar = ({ toggle }) => {\n  // MetaMask Wallet Connection\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const history = useHistory()\n  const [url, setUrl] = useState(window.location.pathname);\n\n  useEffect(() => {\n    const initialSet = async () => {\n      const { address, status } = await getCurrentWalletConnected();\n      setWallet(address)\n      setStatus(status);\n      addWalletListener();\n    }\n    initialSet();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const [scrollNav, setScrollNav] = useState(false)\n\n  const changeNav = () => {\n    if (window.scrollY >= 80) {\n      setScrollNav(true)\n    } else {\n      setScrollNav(false)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', changeNav)\n  }, [])\n\n  useEffect(() => {\n    return history.listen((location) => {\n      setUrl(location.pathname);\n      // if go to another page, first remove all the active class of NavLinks\n      // so the green bottom line will disappear\n      // then check current path, and activate responding class of NavLinks\n      const q1 = document.querySelector(\"#scrollToDapp\");\n      const q2 = document.querySelector(\"#scrollToHowItWorks\");\n      const q3 = document.querySelector(\"#scrollToAuction\");\n      const q4 = document.querySelector(\"#scrollToChainlink\");\n      q1.classList.remove('active');\n      q2.classList.remove('active');\n      q3.classList.remove('active');\n      q4.classList.remove('active');\n      switch (location.pathname) {\n        case \"/dapp\":\n          q1.classList.add('active');\n          break;\n        case \"/howitworks\":\n          // console.log(location.pathname);\n          q2.classList.add('active');\n          break;\n        case \"/auction\":\n          q3.classList.add('active');\n          break;\n        case \"/chainlink\":\n          q4.classList.add('active');\n          break;\n        default:\n          break;\n      }\n    })\n  }, [history])\n\n  const toggleHome = () => {\n    scroll.scrollToTop();\n  }\n\n  const handleClick = (path) => {\n    // if at the front page, click NavLinks button will scroll to the location of element\n    // if not, click NavLinks button will navigate to clicked path\n    if (url !== \"/\" && path !== url) {\n      history.push(path);\n    }\n  }\n\n  return (\n    <>\n      <Nav scrollNav={scrollNav} id=\"navbar\">\n        <NavbarContainer>\n          <NavLogo to='/' onClick={toggleHome}>\n            <img src={logo} alt='logo' />\n          </NavLogo>\n          <MobileIcon onClick={toggle}>\n            <FaBars />\n          </MobileIcon>\n          <NavMenu>\n            <NavItem>\n              <NavLinks id=\"scrollToDapp\"\n                to={url === '/' ? 'dapp' : 'navbar'}\n                smooth={true}\n                duration={500}\n                spy={url === '/' ? true : false}\n                exact='true'\n                offset={-80}\n                onClick={() => handleClick('/dapp')}\n              >ÐApp</NavLinks>\n            </NavItem>\n            <NavItem>\n              <NavLinks id=\"scrollToHowItWorks\"\n                to={url === '/' ? 'how_it_works' : 'navbar'}\n                smooth={true}\n                duration={500}\n                spy={url === '/' ? true : false}\n                exact='true'\n                offset={-80}\n                onClick={() => handleClick('/howitworks')}\n              >How it works</NavLinks>\n            </NavItem>\n            <NavItem>\n              <NavLinks id=\"scrollToAuction\"\n                to={url === '/' ? 'auction' : 'navbar'}\n                smooth={true}\n                duration={500}\n                spy={url === '/' ? true : false}\n                exact='true'\n                offset={-80}\n                onClick={() => handleClick('/auction')}\n              >Auction</NavLinks>\n            </NavItem>\n            <NavItem>\n              <NavLinks id=\"scrollToChainlink\"\n                to={url === '/' ? 'chainlink' : 'navbar'}\n                smooth={true}\n                duration={500}\n                spy={url === '/' ? true : false}\n                exact='true'\n                offset={-80}\n                onClick={() => handleClick('/chainlink')}\n              >Chainlink</NavLinks>\n            </NavItem>\n          </NavMenu>\n          <NavBtn>\n            <NavBtnLink to=\"\" id=\"walletButton\" onClick={connectWalletPressed}>\n              {walletAddress.length > 0 ? (\"Connected: \" +\n                String(walletAddress).substring(0, 6) + \"...\" +\n                String(walletAddress).substring(38)) : (<span>Connect Wallet</span>)}\n            </NavBtnLink>\n          </NavBtn>\n        </NavbarContainer>\n      </Nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\HowItWorks.js",["447"],"import {\n    Container,\n    Wrap,\n    NewH1,\n    NewH2,\n    NewP,\n\tNewLinkWithoutline,\n    Img\n} from \"./SubpagesElements\";\n\nimport imag1 from 'images/imag1.PNG';\nimport imag2 from 'images/imag2.PNG';\nimport imag3 from 'images/imag3.PNG';\nimport imag4 from 'images/imag4.PNG';\nimport imag5 from 'images/imag5.PNG';\nimport imag6 from 'images/imag6.PNG';\nimport imag7 from 'images/imag7.PNG';\nimport imag8 from 'images/imag8.PNG';\nimport imag9 from 'images/imag9.PNG';\nimport imag10 from 'images/imag10.PNG';\n\nconst HowItWorks = () => {\n    return (\n        <Container>\n            <Wrap>\n                <NewH1>Preparing the environment</NewH1>\n\t\t\t\t<NewP>Decentralised applications do not work in the same way as traditional web applications. For this reason, before explaining how this instance generator works, we need to take a few simple steps that will only take a few minutes.</NewP>\n\t\t\t\t<NewP>First of all, we need to install a wallet with which we can make transactions to the blockchain. In our case we use Metamask, which is just a plugin available for Chrome, Brave and some other browsers. If this is the first time we use Metamask, we must select the option <b>Create a wallet</b>. \n                    After creating a password and completing the secret backup phrase, we will see that our wallet will be ready to trade and connected to the main Ethereum network, although with 0 ethers. The first thing we are going to do is connect to the Kovan test network, which is where our smart contract is deployed. \n                    To do this, we select the drop-down menu of the main network and click on <b>Show/hide test networks</b>. Then, we activate the option \"Show test networks\" and we will see how the different test networks appear, where we have to click on the Kovan test network. </NewP>\n                <Img alt=\"dev\" src={imag1}></Img>\n                <NewP>We can see that in this test network we also do not have enough ether to pay for the gas for the transactions. To obtain gas for the test networks we can visit the following link: <b><NewLinkWithoutline href=\"https://faucets.chain.link/\" target=\"_blank\" rel=\"noreferrer\">Chainlink faucet</NewLinkWithoutline></b></NewP>\n                <NewP>At the top right you will see a button that says <b>Connect wallet</b>. We must click it and connect our wallet to this site.</NewP>\n                <Img alt=\"dev\" src={imag2}></Img>\n                <NewP>We will then see that our wallet address has been connected to the website and, after completing the captcha, we will be able to request ether. By default, every time we make a request it will give us 0.1 ether and 10 LINK. This last token will not be necessary to operate within the DApp.</NewP>\n                <Img alt=\"dev\" src={imag3}></Img>\n                <NewH1>DApp operation</NewH1>\n                <NewP>Now that we have all the previous preparations, we can start interacting with the DApp. In the main page there are some interesting links to learn more about this project, how it works, what is the 3-SAT problem or how Chainlink oracles work. If it is our first time, we must register by clicking on the <b>Get started</b> button. This will take you to the registration page where you will be asked for some information: your name, email and researcher ORCID.</NewP>\n                <Img alt=\"dev\" src={imag4}></Img>\n                <NewP>Whenever we perform a function that involves writing data to the blockchain, Metamask will ask us if we want to confirm the transaction or if we want to reject it. </NewP>\n                <Img alt=\"dev\" src={imag5}></Img>\n                <NewP>In addition, it will show us a summary of the transaction, the expected waiting time and an approximation of the cost in gas that the transaction will have. All these data (and many others such as block number, gas fee, gas price, gas limit...) can also be verified in <b><NewLinkWithoutline href=\"https://kovan.etherscan.io\" target=\"_blank\" rel=\"noreferrer\">Kovan scan</NewLinkWithoutline></b>, accessing through the address of our wallet, which appears in Metamask. We could even see all the interactions performed by the smart contract by doing a search with the smart contract address.</NewP>\n                <Img alt=\"dev\" src={imag6}></Img>\n                <NewP>Once we have registered in the application, we will automatically receive an email with a password. This password is associated to our ORCID in the sense that an ORCID will always output the same password. In the <b>Sign in</b> page we will enter this password to access the user panel.</NewP>\n                <NewP>In this page we can find the main functionality of the application. The first form allows to generate instances using two generators: A and B generator. The A generator generates proposition symbols and, at the same time, the instance clauses. This is why the first proposition symbols are more likely to appear in the clauses (especially at the beginning) as the instance is created. On the other hand, generator B first builds a skeleton of the instance, then generates all proposition symbols and finally fills in the instances. Note how, in this case, all symbols have the same probability of appearing in each of the clauses.</NewP>\n                <Img alt=\"dev\" src={imag7}></Img>\n                <NewP>These two generators make use of random numbers, which are obtained thanks to the Chainlink oracles. Before generating an instance, the user must generate a random number. To do so, the user must click on the grey hexagon in the top-left corner of the form. This will launch a transaction to the oracles and request randomness. The process of obtaining this random number takes approximately 50 seconds because it is a two-transaction process. Once we have generated the numbers, a pop-up window will appear informing us.</NewP>\n                <Img alt=\"dev\" src={imag8}></Img>\n                <NewP>We have our random number. The next step is to generate one or more instances. To do this, the form has two parameters called \"p\" and \"q\". Basically, the \"p\" parameter indicates the probability of generating a new proposition symbol: the higher the probability, the more different proposition symbols our instances will have (setting a value around p = 10 is a good start). On the other hand, the parameter \"q\" indicates the probability of generating a new clause: the higher the probability, the more clauses our instance will have. Finally, the last parameter indicates the number of instances we want to generate at the same time (between 1 and 5).</NewP>\n                <NewP>The second of the forms shown in the image allows us to search for instances generated by a given ORCID, whether it is ours or not. The action will display a table containing a summary of the instances generated by an ORCID: instance id, size in clauses, creation date and whether they have been resolved or not.</NewP>\n                <Img alt=\"dev\" src={imag9}></Img>\n                <NewP>When we click on one of the rows, this will take us to the page where the instance is displayed. Here, we can also download the instance in JSON format by clicking on the button in the second row of the table. In addition, if the instance is ours and is not solved, a form will appear where we can insert the hash of the file containing the solution to the instance, the hash of the algorithm that has been used and the method to calculate the hash values.</NewP>\n                <Img alt=\"dev\" src={imag10}></Img>\n                <NewP>Finally, it should be noted that each time a new set of instances is generated, we should ask the oracles for randomness again. If we do not do so, the instances we generate will potentially be very similar to each other.</NewP>\n                <NewP>By making use of this tool, the application allows us to generate completely random dynamic instances without the need for a third party, storing who created the instance, at what time, what the instance looked like, when it was solved, solution hashes and the algorithm used to check the veracity of the instances.</NewP>\n                <NewP>In the <b>Home</b> page of the application, at the bottom of the <b>Footer</b> section, you can find more information about the research group and a contact in case of any doubt or suggestion about this instance generator.</NewP>\n            </Wrap>\n        </Container>\n    );\n}\n\nexport default HowItWorks;","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\ChainLink.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Dapp.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\ThreeSat.js",["448"],"import {\n\tContainer,\n\tWrap,\n\tNewH1,\n\tNewH2,\n\tNewP,\n\tImg\n} from \"./SubpagesElements\";\n\nimport logicImg from 'images/3sat_logic.png';\n\nconst ThreeSat = () => {\n\treturn (\n\t\t<Container>\n\t\t\t<Wrap>\n\t\t\t\t<NewH1>What ́s 3-SAT?</NewH1>\n\t\t\t\t<NewP></NewP>\n\n\t\t\t\t<NewH1>What ́s 3-SAT?</NewH1>\n\t\t\t\t<NewP></NewP>\n\t\t\t\t<div style={{ textAlign: 'center' }}>\n\t\t\t\t\t<Img style={{ maxWidth: '700px' }} src={logicImg} alt=\"logic\"></Img>\n\t\t\t\t</div>\n\n\t\t\t\t<NewH1>What ́s 3-SAT?</NewH1>\n\t\t\t\t<NewP></NewP>\n\n\t\t\t</Wrap>\n\t\t</Container>\n\t);\n}\n\nexport default ThreeSat;","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\TermsOfService.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Faqs.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\Development.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\pages\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SideBar\\index.js",["449","450"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport {\n  SidebarContainer,\n  Icon,\n  CloseIcon,\n  SidebarWrapper,\n  SidebarMenu,\n  SidebarLink,\n  SideBtnWrap,\n  SidebarRoute\n} from './SidebarElements';\n\nimport { connectWallet, getCurrentWalletConnected } from '../interact';\n\nconst Sidebar = ({ isOpen, toggle }) => {\n  // MetaMask Wallet Connection\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const history = useHistory()\n  const [url, setUrl] = useState(window.location.pathname);\n\n  useEffect(() => {\n    const initialSet = async () => {\n      const { address, status } = await getCurrentWalletConnected();\n      setWallet(address)\n      setStatus(status);\n      addWalletListener();\n    }\n    initialSet();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  useEffect(() => {\n    return history.listen((location) => {\n      setUrl(location.pathname);\n    })\n  }, [history])\n\n  const handleClick = (path) => {\n    // if at the front page, click NavLinks button will scroll to the location of element\n    // if not, click NavLinks button will navigate to clicked path\n    if (url !== \"/\" && path !== url) {\n      history.push(path);\n    }\n    toggle();\n  }\n\n  return (\n    <SidebarContainer isOpen={isOpen} onClick={toggle}>\n      <Icon onClick={toggle}>\n        <CloseIcon>\n\n        </CloseIcon>\n      </Icon>\n      <SidebarWrapper>\n        <SidebarMenu>\n          <SidebarLink to='dapp' onClick={() => handleClick('/dapp')}>\n            ÐApp\n          </SidebarLink>\n          <SidebarLink to='how_it_works' onClick={() => handleClick('/howitworks')}>\n            How it works\n          </SidebarLink>\n          <SidebarLink to='auction' onClick={() => handleClick('/auction')}>\n            Auction\n          </SidebarLink>\n          <SidebarLink to='chainlink' onClick={() => handleClick('/chainlink')}>\n            Chainlink\n          </SidebarLink>\n        </SidebarMenu>\n        <SideBtnWrap>\n          <SidebarRoute to=\"\" id=\"walletButton\" onClick={connectWalletPressed}>\n            {walletAddress.length > 0 ? (\"Connected: \" +\n              String(walletAddress).substring(0, 6) + \"...\" +\n              String(walletAddress).substring(38)) : (<span>Connect Wallet</span>)}\n          </SidebarRoute>\n        </SideBtnWrap>\n      </SidebarWrapper>\n    </SidebarContainer>\n  )\n}\n\nexport default Sidebar;\n","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Navbar\\NavbarElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\interact.js",["451","452"],"import React from 'react';\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SubPages\\SubpagesElements.js",["453"],"import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n    min-height: calc(100vh - 80px);\n    position: relative;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 0;\n    overflow: hidden;\n    background: #fff;\n`;\n\nexport const Wrap = styled.div`\n    font-family: \"Montserrat\", Sans-serif;\n    display: block;\n    margin: 50px auto;\n    padding: 40px 100px;\n    width: 60%;\n    background: #fff;\n    color: #000;\n    border-radius: 8px;\n    @media screen and (max-width: 500px) {\n        width: 90%;\n        padding: 40px 10px;\n        font-size: 0.5em;\n    }\n`;\n\nexport const NewH1 = styled.h1`\n    line-height: 1.2;\n`\n\nexport const NewH2 = styled.h2`\n\n`\n\nexport const NewH3 = styled.h3`\n\n`\n\nexport const NewP = styled.p`\n    font-size: 14px;\n    @media screen and (max-width: 500px) {\n        font-size: 12px;\n    }\n`\n\nexport const NewB = styled.span`\n    font-weight: 700;\n`\n\nexport const NewUl = styled.ul`\n    font-size: 14px;\n    @media screen and (max-width: 500px) {\n        font-size: 12px;\n    }\n`\n\nexport const NewLi = styled.li`\n\n`\n\nexport const NewLink = styled.a`\n    color: #000;\n    // text-decoration: none;\n    &:hover {\n        color: #1E90FF;\n    }\n`;\n\nexport const NewLinkWithoutline = styled.a`\n    color: #000;\n    text-decoration: none;\n    &:hover {\n        color: #1E90FF;\n    }\n`;\n\nexport const Img = styled.img`\n    margin: 0 0 10px 0;\n    padding-right: 0;\n    border-radius: 8px;\n    display: block;\n    margin: auto;\n    @media screen and (max-width: 768px) {\n\n    }\n\n    @media screen and (max-width: 480px) {\n\n    }\n`;","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\Data.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Register\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Signin\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\index.js",["454","455","456","457","458"],"import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from \"react-router-dom\";\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport './messagesInfo.css'\nimport { buildInstance, buildDateArray } from './supportFunctions'\nimport swal from 'sweetalert';\nimport { secureStorage } from 'components/secureSession';\nimport {\n  Container,\n  FormButton,\n  FormButtonTop,\n  Form,\n  FormH1,\n  FormWrap1,\n  FormWrap2,\n} from './UserElements'\nimport {\n  FormLabel,\n  FormInput,\n  FormError\n} from '../FormElements'\nimport logo from '../../images/chainlink.png';\n\nconst UserSection = () => {\n  var infoArray = [];\n  var currentRandomNumber = null;\n  var oldRandomNumber = null;\n  let history = useHistory();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors }\n  } = useForm();\n\n  const {\n    register: register2,\n    reset: reset2,\n    handleSubmit: handleSubmit2,\n    formState: { errors: errors2 }\n  } = useForm();\n\n  useEffect(() => {\n    // Check whether user entered the password before, if not, go back to /signin page\n    if (!secureStorage.getItem('password')) {\n      secureStorage.removeItem(\"password\");\n      secureStorage.removeItem(\"currOrcid\");\n      sessionStorage.setItem(\"noPassword\", true);\n      history.push(\"/signin\");\n    }\n  }, [history])\n\n  useEffect(() => {\n    secureStorage.removeItem(\"currOrcid\");\n  }, [])\n\n  /*\n  * Function to check if the user wnats to use A or B generator\n  */\n  async function myHandleSubmit(data, event) {\n    if (event.nativeEvent.submitter?.id === \"submit1\")\n      async_createAInstance(data);\n    else if (event.nativeEvent.submitter?.id === \"submit2\")\n      async_createBInstance(data);\n    else if (event.nativeEvent.submitter?.id === \"submit3\")\n      async_createCInstance(data);\n  }\n\n  /*\n  * This function executes the function to generate a new instance using A generator\n  */\n  async function async_createAInstance(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createAInstance(\n        data.agents,\n        data.resources,\n        secureStorage.getItem('password'),\n        data.numInstances,\n        1,\n        { gasLimit: 30000000 })\n      await transaction.wait()\n    }\n  }\n\n  /*\n  * This function executes the function to generate a new instance using B generator\n  */\n  async function async_createBInstance(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createBInstance(\n        data.agents,\n        data.resources,\n        secureStorage.getItem('password'),\n        data.numInstances,\n        1,\n        { gasLimit: 30000000 })\n      await transaction.wait()\n    }\n  }\n\n  /*\n  * This function executes the function to generate a new instance using C generator\n  */\n  async function async_createCInstance(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createCInstance(\n        data.agents,\n        data.resources,\n        secureStorage.getItem('password'),\n        data.numInstances,\n        1,\n        { gasLimit: 30000000 })\n      await transaction.wait()\n    }\n  }\n\n  /*\n  * Get all instances from smart contract filtered by orcid\n  */\n  async function async_getAllInstances(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getAllInstances(data.orcid);\n        infoArray = buildInstance(result);\n        console.log(infoArray);\n        secureStorage.setItem(\"currOrcid\", data.orcid)\n        history.push({\n          pathname: '/instances',\n          state: { infoArray }\n        });\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  /*\n  * VRF function to request the random number\n  */\n  async function async_getRandomNumber(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      try {\n        const transaction = await contract.getRandomNumber(secureStorage.getItem('password'))\n        await transaction.wait();\n      } catch (e) {\n        alert(\"Not enough LINK in the smart contract. Please contact the admin.\");\n      }\n    }\n  }\n\n  /*\n  * Asks to the contract if there is enough LINK to call the oracles\n  */\n  async function async_getRemainingLINK(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getRemainingLINK();\n        console.log(\"Smart contract balance is: \" + (result / 10e17) + \" LINK token\");\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  /*\n  * Function to check the moment when the random number has been generated\n  */\n  async function async_randomResult(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n      try {\n        const signer = provider.getSigner();\n        let isCanceled = false;\n        oldRandomNumber = currentRandomNumber;\n        if (parseInt(currentRandomNumber, 16) === parseInt(oldRandomNumber, 16) && currentRandomNumber !== null && currentRandomNumber != 0)\n          swal(\"Wait!\", \"You have not yet used the current number\", \"info\");\n        while (!isCanceled) {\n          currentRandomNumber = await contract.connect(signer).randomResult();\n          if (parseInt(currentRandomNumber, 16) !== parseInt(oldRandomNumber, 16) && oldRandomNumber !== null) {\n            isCanceled = true;\n            swal(\"Good job!\", \"Your new random number is available\", \"success\");\n          } else {\n            oldRandomNumber = currentRandomNumber;\n          }\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n  \n  /*\n  * Get the array which contains all the dates for the random numbers generated from the SC\n  */\n  async function async_getDateNumber(data) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getDateNumber(secureStorage.getItem('password'));\n        console.log(buildDateArray(result));\n      } catch (err) {\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <FormWrap1>\n        <Form key={1} onSubmit={handleSubmit(myHandleSubmit)}>\n          <FormH1>Create a new instance</FormH1>\n          <img className=\"logo\" src={logo} alt='logo' onClick={() => { async_getRandomNumber(); async_getRemainingLINK(); async_randomResult(); }} />\n          <span className=\"field-tip\">\n            <FormLabel>First parameter</FormLabel>\n            <span className=\"tip-content\">This parameter indicates how many agents will participate in the auction. Leave it at 0 to make it random.</span>\n          </span>\n          <FormInput {...register(\"agents\", {\n            required: true,\n            max: 8,\n            min: 0,\n            pattern: /^[0-9\\b]+$/\n          })} type=\"number\" name=\"agents\" placeholder=\"agents\" />\n          {errors?.agents?.type === \"required\" && <FormError>Field required</FormError>}\n          {errors?.agents?.type === \"max\" && <FormError>Integer number between [0, 8]</FormError>}\n          {errors?.agents?.type === \"min\" && <FormError>Integer number between [0, 8]</FormError>}\n          {errors?.agents?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n          <span className=\"field-tip\">\n            <FormLabel>Second parameter</FormLabel>\n            <span className=\"tip-content\">It indicates how many resources will be available in the auction. Leave it at 0 to make it random.</span>\n          </span>\n          <FormInput {...register(\"resources\", {\n            required: true,\n            max: 30,\n            min: 0,\n            pattern: /^[0-9\\b]+$/\n          })} type=\"number\" name=\"resources\" placeholder=\"resources\" />\n          {errors?.resources?.type === \"required\" && <FormError>Field required</FormError>}\n          {errors?.resources?.type === \"max\" && <FormError>Integer number between [0, 30]</FormError>}\n          {errors?.resources?.type === \"min\" && <FormError>Integer number between [0, 30]</FormError>}\n          {errors?.resources?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n          <span className=\"field-tip\">\n            <FormLabel>Number of instances</FormLabel>\n            <span className=\"tip-content\">Enter the number of instances you would like to generate</span>\n          </span>\n          <FormInput {...register(\"numInstances\", {\n            required: true,\n            max: 5,\n            min: 1,\n            pattern: /^[0-9\\b]+$/\n          })} type=\"number\" name=\"numInstances\" />\n          {errors?.numInstances?.type === \"required\" && <FormError>Field required</FormError>}\n          {errors?.numInstances?.type === \"max\" && <FormError>Integer number between [1, 5]</FormError>}\n          {errors?.numInstances?.type === \"min\" && <FormError>Integer number between [1, 5]</FormError>}\n          {errors?.numInstances?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n          <div>\n            { /* FormButtonTop has props(left or right) for controlling the 'float' attr  */}\n            <FormButtonTop left id=\"submit1\" type=\"submit\" value=\"A generator\" />\n            <FormButtonTop center id=\"submit2\" type=\"submit\" value=\"B generator\" />\n            <FormButtonTop right id=\"submit3\" type=\"submit\" value=\"C generator\" />\n          </div>\n        </Form>\n      </FormWrap1>\n      <FormWrap2>\n        <Form key={2} onSubmit={handleSubmit2(async_getAllInstances)}>\n          <FormH1>Search for instances</FormH1>\n          <FormLabel>ORCID</FormLabel>\n          <FormInput {...register2(\"orcid\", {\n            required: true,\n            minLength: 16,\n            maxLength: 16,\n            pattern: /^[0-9\\b]+$/\n          })} type=\"number\" name=\"orcid\" />\n          {errors2?.orcid?.type === \"required\" && <FormError>Field required</FormError>}\n          {errors2?.orcid?.type === \"minLength\" && <FormError>It must be a number of 16 digits</FormError>}\n          {errors2?.orcid?.type === \"maxLength\" && <FormError>It must be a number of 16 digits</FormError>}\n          {errors2?.orcid?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n          <FormButton type=\"submit\" value=\"Get instances\" />\n        </Form>\n      </FormWrap2>\n    </Container>\n  )\n}\n\nexport default UserSection;","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\SideBar\\SidebarElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instances\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instance\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Footer\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\HeroSection\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\FormElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Register\\RegisterElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Signin\\SinginElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\supportFunctions.js",["459"],"\n/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let info = {\n            id: hexToDecimal(arr[i][0]),\n            chain: buildChain(arr[i][1], arr[i][2]),\n            agents: agentsInfo(arr[i][2]),\n            resources: resourcesInfo(arr[i][2]),\n            created: buildDate(arr[i][3]),\n            solution: arr[i][4],\n            solved: arr[i][5],\n            ended: buildDate(arr[i][6]),\n            type: typeProblem(hexToDecimal(arr[i][0])),\n            mode: mode(arr[i][2])\n        };\n        result.push(info);\n    }\n    return result;\n}\n\n/*\n* Builds the chain as a string\n*/\nfunction buildChain(_oldChain, setup) {\n    var agents = hexToDecimal(setup[0]);\n    var resources = hexToDecimal(setup[1]);\n    var mode = hexToDecimal(setup[2]);\n    var newChain = _oldChain.substring(0, _oldChain.length-1); // We remove the last space\n    var arrayChain = newChain.split(\" \");\n    var result = [];\n    result =  splitChain(arrayChain, agents, resources);\n    if(mode === 1){\n        for(var i = 0; i < agents; i++)\n            result[i] = formalizePreferences(result[i], agents, resources);\n    }\n    return result;\n}\n\n/*\n* Formalizes the preferences of an agent\n*/\nfunction formalizePreferences(preferences, numAgents, numResources){\n    var aux = 0;\n    for(var i = 0; i < numResources; i++)\n        aux += parseInt(preferences[i]);\n    aux = 1000 / aux;\n    for(var i = 0; i < numResources; i++)\n        preferences[i] =  Math.round(aux * preferences[i]);\n    return preferences;\n}\n\n/*\n* Splits the array in several arrays considering the number of agents\n*/\nfunction splitChain(arrayChain, numAgents, numResources){\n    var result = [];\n    var cont = 0;\n    for(var i = 0; i < numAgents; i++){\n        var temp = [];\n        for(var j = 0; j < numResources; j++){\n            temp[j] = parseInt(arrayChain[cont]);\n            cont++;\n        }\n        result[i] = temp;\n    }\n    return result;\n}\n\n/*\n* Check if the instance is for auction or optimization problem\n*/\nfunction typeProblem(id){\n    if(id % 2 === 0)\n        return \"Auction problem\";\n    else\n        return \"Optimization problem\";\n}\n\n/*\n* Returns the number of agents\n*/\nfunction agentsInfo(setup){\n    return hexToDecimal(setup[0]);\n}\n\n/*\n* Returns the number of resources\n*/\nfunction resourcesInfo(setup){\n    return hexToDecimal(setup[1]);\n}\n\n/*\n* Check if the instance is unlimited or limited\n*/\nfunction mode(setup){\n    var mode = hexToDecimal(setup[2]);\n    if(mode === 0)\n        return \"Unlimited\";\n    else\n        return \"Limited\";\n}\n\n/*\n* Converts a hexadecimal number to decimal number\n*/\nfunction hexToDecimal(_hexNumber) {\n    return parseInt(_hexNumber._hex, 16);\n}\n\n/*\n* Builds the date as date format\n*/\nfunction buildDate(_oldDate) {\n    let result, newDate;\n    if (hexToDecimal(_oldDate) !== 0) {\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n    } else\n        result = \"Date unavailable\";\n    return result;\n}\n\n/*\n* Builds an array of date as date format\n*/\nexport function buildDateArray(_arrayRandoms) {\n    let result = [];\n    for (let i = 0; i < _arrayRandoms.length; i++)\n        result.push(buildDate(_arrayRandoms[i]));\n    return result;\n} ","C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\UserSection\\UserElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instances\\InstancesElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Instance\\InstanceElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\InfoSection\\InfoElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\Footer\\FooterElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\HeroSection\\HeroElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\secureSession.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\helper.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ButtonElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\RowHeaderTable\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\index.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\RowHeaderTable\\tableElements.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\helperFunctions.js",[],"C:\\Users\\Jonathan\\Documents\\GitHub\\Egalitarian_Instance_Generator\\src\\components\\ColumnHeaderTable\\tableElements.js",[],{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"464","severity":1,"message":"465","line":5,"column":5,"nodeType":"466","messageId":"467","endLine":5,"endColumn":10},{"ruleId":"464","severity":1,"message":"468","line":22,"column":10,"nodeType":"466","messageId":"467","endLine":22,"endColumn":16},{"ruleId":"464","severity":1,"message":"469","line":23,"column":10,"nodeType":"466","messageId":"467","endLine":23,"endColumn":14},{"ruleId":"464","severity":1,"message":"470","line":23,"column":16,"nodeType":"466","messageId":"467","endLine":23,"endColumn":23},{"ruleId":"464","severity":1,"message":"471","line":24,"column":10,"nodeType":"466","messageId":"467","endLine":24,"endColumn":21},{"ruleId":"464","severity":1,"message":"472","line":24,"column":23,"nodeType":"466","messageId":"467","endLine":24,"endColumn":37},{"ruleId":"473","severity":1,"message":"474","line":61,"column":11,"nodeType":"475","messageId":"476","endLine":61,"endColumn":73,"fix":"477"},{"ruleId":"464","severity":1,"message":"468","line":19,"column":10,"nodeType":"466","messageId":"467","endLine":19,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":56,"column":11,"nodeType":"475","messageId":"476","endLine":56,"endColumn":73,"fix":"478"},{"ruleId":"464","severity":1,"message":"479","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":14},{"ruleId":"473","severity":1,"message":"474","line":28,"column":15,"nodeType":"475","messageId":"476","endLine":28,"endColumn":77,"fix":"480"},{"ruleId":"473","severity":1,"message":"474","line":70,"column":15,"nodeType":"475","messageId":"476","endLine":70,"endColumn":77,"fix":"481"},{"ruleId":"464","severity":1,"message":"482","line":1,"column":17,"nodeType":"466","messageId":"467","endLine":1,"endColumn":25},{"ruleId":"464","severity":1,"message":"483","line":36,"column":5,"nodeType":"466","messageId":"467","endLine":36,"endColumn":10},{"ruleId":"464","severity":1,"message":"484","line":42,"column":12,"nodeType":"466","messageId":"467","endLine":42,"endColumn":18},{"ruleId":"485","severity":1,"message":"486","line":180,"column":136,"nodeType":"487","messageId":"488","endLine":180,"endColumn":138},{"ruleId":"464","severity":1,"message":"489","line":201,"column":18,"nodeType":"466","messageId":"467","endLine":201,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":35,"column":31,"nodeType":"487","messageId":"492","endLine":35,"endColumn":32},{"ruleId":"464","severity":1,"message":"493","line":69,"column":10,"nodeType":"466","messageId":"467","endLine":69,"endColumn":20},{"ruleId":"460","replacedBy":"494"},{"ruleId":"462","replacedBy":"495"},{"ruleId":"464","severity":1,"message":"468","line":22,"column":10,"nodeType":"466","messageId":"467","endLine":22,"endColumn":16},{"ruleId":"464","severity":1,"message":"469","line":23,"column":10,"nodeType":"466","messageId":"467","endLine":23,"endColumn":14},{"ruleId":"464","severity":1,"message":"470","line":23,"column":16,"nodeType":"466","messageId":"467","endLine":23,"endColumn":23},{"ruleId":"464","severity":1,"message":"471","line":24,"column":10,"nodeType":"466","messageId":"467","endLine":24,"endColumn":21},{"ruleId":"464","severity":1,"message":"472","line":24,"column":23,"nodeType":"466","messageId":"467","endLine":24,"endColumn":37},{"ruleId":"473","severity":1,"message":"474","line":61,"column":11,"nodeType":"475","messageId":"476","endLine":61,"endColumn":73,"fix":"496"},{"ruleId":"464","severity":1,"message":"465","line":5,"column":5,"nodeType":"466","messageId":"467","endLine":5,"endColumn":10},{"ruleId":"464","severity":1,"message":"465","line":5,"column":2,"nodeType":"466","messageId":"467","endLine":5,"endColumn":7},{"ruleId":"464","severity":1,"message":"468","line":19,"column":10,"nodeType":"466","messageId":"467","endLine":19,"endColumn":16},{"ruleId":"473","severity":1,"message":"474","line":56,"column":11,"nodeType":"475","messageId":"476","endLine":56,"endColumn":73,"fix":"497"},{"ruleId":"473","severity":1,"message":"474","line":28,"column":15,"nodeType":"475","messageId":"476","endLine":28,"endColumn":77,"fix":"498"},{"ruleId":"473","severity":1,"message":"474","line":70,"column":15,"nodeType":"475","messageId":"476","endLine":70,"endColumn":77,"fix":"499"},{"ruleId":"464","severity":1,"message":"479","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":14},{"ruleId":"464","severity":1,"message":"482","line":1,"column":17,"nodeType":"466","messageId":"467","endLine":1,"endColumn":25},{"ruleId":"464","severity":1,"message":"483","line":36,"column":5,"nodeType":"466","messageId":"467","endLine":36,"endColumn":10},{"ruleId":"464","severity":1,"message":"484","line":42,"column":12,"nodeType":"466","messageId":"467","endLine":42,"endColumn":18},{"ruleId":"485","severity":1,"message":"486","line":205,"column":136,"nodeType":"487","messageId":"488","endLine":205,"endColumn":138},{"ruleId":"464","severity":1,"message":"489","line":226,"column":18,"nodeType":"466","messageId":"467","endLine":226,"endColumn":37},{"ruleId":"500","severity":1,"message":"501","line":51,"column":13,"nodeType":"466","messageId":"502","endLine":51,"endColumn":14},"no-native-reassign",["503"],"no-negated-in-lhs",["504"],"no-unused-vars","'NewH2' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"505","text":"506"},{"range":"507","text":"506"},"'Link' is defined but never used.",{"range":"508","text":"506"},{"range":"509","text":"506"},"'useState' is defined but never used.","'reset' is assigned a value but never used.","'reset2' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'async_getDateNumber' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'getBoolean' is defined but never used.",["503"],["504"],{"range":"510","text":"506"},{"range":"511","text":"506"},{"range":"512","text":"506"},{"range":"513","text":"506"},"no-redeclare","'i' is already defined.","redeclared","no-global-assign","no-unsafe-negation",[1814,1814]," rel=\"noreferrer\"",[1604,1604],[744,744],[1853,1853],[1754,1754],[1549,1549],[717,717],[1784,1784]]