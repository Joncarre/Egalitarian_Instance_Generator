{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w10te\\\\Documents\\\\dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatorAddress = \"0xdeBd84A441C2FBBD4C1FdBe26890Ab93ccb74D36\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state\n  const [researcher, regResearcherValue] = useState(); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // call the smart contract, read the current greeting value\n\n\n  async function asyncFetchResearcher() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const data = await contract.getResearcher();\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send a new researcher\n\n\n  async function asyncRegResearcher() {\n    if (!researcher) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.regResearcher(researcher, 212121);\n      await transaction.wait();\n      asyncFetchResearcher();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Register your information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"for\",\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"for\",\n      children: \"ORCID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncRegResearcher,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => regResearcherValue(e.target.value),\n      placeholder: \"name, orcid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncFetchResearcher,\n      children: \"Fetch Researcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ZbMlzu0cxCeckCFRT/O3bew3DTw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/w10te/Documents/dapp/src/App.js"],"names":["useState","ethers","generatorAddress","App","researcher","regResearcherValue","requestAccount","window","ethereum","request","method","asyncFetchResearcher","provider","providers","Web3Provider","contract","Contract","Generator","abi","data","getResearcher","console","log","err","asyncRegResearcher","signer","getSigner","transaction","regResearcher","wait","e","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers'\n\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0xdeBd84A441C2FBBD4C1FdBe26890Ab93ccb74D36\"\n\nfunction App() {\n  // store greeting in local state\n  const [researcher, regResearcherValue] = useState()\n  \n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n    // call the smart contract, read the current greeting value\n    async function asyncFetchResearcher() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider)\n        try {\n          const data = await contract.getResearcher()\n          console.log('data: ', data)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n  // call the smart contract, send a new researcher\n  async function asyncRegResearcher() {\n    if (!researcher) return\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer)\n      const transaction = await contract.regResearcher(researcher, 212121)\n      await transaction.wait()\n      asyncFetchResearcher()\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n                            <p>Register your information</p>\n                            <label htmlFor='for'>Name</label>\n                            <input type='text'/>\n                            <label htmlFor='for'>ORCID</label>\n                            <input type='text'/>\n                            <button onClick={asyncRegResearcher}>Register</button>\n                            <input onChange={e => regResearcherValue(e.target.value)} placeholder=\"name, orcid\" />\n                            <button type='submit'>Register</button>\n                            <button onClick={asyncFetchResearcher}>Fetch Researcher</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}