{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst semver = __importStar(require(\"semver\"));\n\nconst config_env_1 = require(\"../internal/core/config/config-env\");\n\nconst scripts_runner_1 = require(\"../internal/util/scripts-runner\");\n\nconst task_names_1 = require(\"./task-names\");\n\nconst log = debug_1.default(\"hardhat:core:tasks:console\");\nconfig_env_1.task(task_names_1.TASK_CONSOLE, \"Opens a hardhat console\").addFlag(\"noCompile\", \"Don't compile before running this task\").setAction(async ({\n  noCompile\n}, {\n  config,\n  run,\n  hardhatArguments\n}) => {\n  if (!noCompile) {\n    await run(task_names_1.TASK_COMPILE, {\n      quiet: true\n    });\n  }\n\n  await fs_extra_1.default.ensureDir(config.paths.cache);\n  const historyFile = path.join(config.paths.cache, \"console-history.txt\");\n  const nodeArgs = [];\n\n  if (semver.gte(process.version, \"10.0.0\")) {\n    nodeArgs.push(\"--experimental-repl-await\");\n  }\n\n  log(`Creating a Node REPL subprocess with Hardhat's register so we can set some Node's flags`); // Running the script \"\" is like running `node`, so this starts the repl\n\n  await scripts_runner_1.runScriptWithHardhat(hardhatArguments, \"\", [], nodeArgs, {\n    NODE_REPL_HISTORY: historyFile\n  });\n});","map":{"version":3,"sources":["../src/builtin-tasks/console.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,MAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAM,GAAG,GAAG,OAAA,CAAA,OAAA,CAAM,4BAAN,CAAZ;AAEA,YAAA,CAAA,IAAA,CAAK,YAAA,CAAA,YAAL,EAAmB,yBAAnB,EACG,OADH,CACW,WADX,EACwB,wCADxB,EAEG,SAFH,CAGI,OACE;AAAE,EAAA;AAAF,CADF,EAEE;AAAE,EAAA,MAAF;AAAU,EAAA,GAAV;AAAe,EAAA;AAAf,CAFF,KAGI;AACF,MAAI,CAAC,SAAL,EAAgB;AACd,UAAM,GAAG,CAAC,YAAA,CAAA,YAAD,EAAe;AAAE,MAAA,KAAK,EAAE;AAAT,KAAf,CAAT;AACD;;AAED,QAAM,UAAA,CAAA,OAAA,CAAQ,SAAR,CAAkB,MAAM,CAAC,KAAP,CAAa,KAA/B,CAAN;AACA,QAAM,WAAW,GAAG,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,KAAP,CAAa,KAAvB,EAA8B,qBAA9B,CAApB;AAEA,QAAM,QAAQ,GAAG,EAAjB;;AACA,MAAI,MAAM,CAAC,GAAP,CAAW,OAAO,CAAC,OAAnB,EAA4B,QAA5B,CAAJ,EAA2C;AACzC,IAAA,QAAQ,CAAC,IAAT,CAAc,2BAAd;AACD;;AAED,EAAA,GAAG,CACD,yFADC,CAAH,CAbE,CAiBF;;AACA,QAAM,gBAAA,CAAA,oBAAA,CAAqB,gBAArB,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,QAA/C,EAAyD;AAC7D,IAAA,iBAAiB,EAAE;AAD0C,GAAzD,CAAN;AAGD,CA3BL","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path = __importStar(require(\"path\"));\nconst semver = __importStar(require(\"semver\"));\nconst config_env_1 = require(\"../internal/core/config/config-env\");\nconst scripts_runner_1 = require(\"../internal/util/scripts-runner\");\nconst task_names_1 = require(\"./task-names\");\nconst log = debug_1.default(\"hardhat:core:tasks:console\");\nconfig_env_1.task(task_names_1.TASK_CONSOLE, \"Opens a hardhat console\")\n    .addFlag(\"noCompile\", \"Don't compile before running this task\")\n    .setAction(async ({ noCompile }, { config, run, hardhatArguments }) => {\n    if (!noCompile) {\n        await run(task_names_1.TASK_COMPILE, { quiet: true });\n    }\n    await fs_extra_1.default.ensureDir(config.paths.cache);\n    const historyFile = path.join(config.paths.cache, \"console-history.txt\");\n    const nodeArgs = [];\n    if (semver.gte(process.version, \"10.0.0\")) {\n        nodeArgs.push(\"--experimental-repl-await\");\n    }\n    log(`Creating a Node REPL subprocess with Hardhat's register so we can set some Node's flags`);\n    // Running the script \"\" is like running `node`, so this starts the repl\n    await scripts_runner_1.runScriptWithHardhat(hardhatArguments, \"\", [], nodeArgs, {\n        NODE_REPL_HISTORY: historyFile,\n    });\n});\n//# sourceMappingURL=console.js.map"]},"metadata":{},"sourceType":"script"}