{"ast":null,"code":"// Creates the structure for a JSON file\nexport const buildJSON = (_oldChain, agents, resources) => {\n  console.log(\"The chain: \" + _oldChain);\n  var numAgent = 0;\n  var index = 0;\n  let object = {};\n\n  for (let i = 0; i < agents; i++) {\n    let agentVector = [];\n\n    for (let j = 0; j < resources; j++) {\n      agentVector[j] = _oldChain[index];\n      index++;\n    }\n\n    console.log(\"vector \" + agentVector);\n    object.agent = agentVector;\n  }\n\n  console.log(object);\n  return JSON.stringify(object);\n};\nexport const buildJSON_old = _oldChain => {\n  let object = {};\n  let chain = String(_oldChain).replace(/\\D/g, '');\n  let tempArray = Array.from(chain);\n  let arrayValue = new Array(tempArray.length);\n  let arraySign = new Array(tempArray.length);\n\n  for (let i = 0; i < tempArray.length; i++) {\n    arrayValue[i] = parseInt(tempArray[i]);\n    if (Math.random() < 0.5) arraySign[i] = 1;else arraySign[i] = 0;\n  }\n\n  object.value = arrayValue;\n  object.sign = arraySign;\n  return JSON.stringify(object);\n};\nexport const downloadJSON = (json, id) => {\n  const element = document.createElement(\"a\");\n  const textFile = new Blob([json], {\n    type: 'text/plain'\n  }); //pass data from localStorage API to blob\n\n  element.href = URL.createObjectURL(textFile);\n  element.download = `Egalitarian_instance_${id}.json`;\n  document.body.appendChild(element);\n  element.click();\n};","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/Egalitarian_Instance_Generator/src/components/ColumnHeaderTable/helperFunctions.js"],"names":["buildJSON","_oldChain","agents","resources","console","log","numAgent","index","object","i","agentVector","j","agent","JSON","stringify","buildJSON_old","chain","String","replace","tempArray","Array","from","arrayValue","length","arraySign","parseInt","Math","random","value","sign","downloadJSON","json","id","element","document","createElement","textFile","Blob","type","href","URL","createObjectURL","download","body","appendChild","click"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,SAApB,KAAkC;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBJ,SAA5B;AACA,MAAIK,QAAQ,GAAG,CAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,MAAnB,EAA2BO,CAAC,EAA5B,EAA+B;AAC3B,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,SAAnB,EAA8BQ,CAAC,EAA/B,EAAkC;AAC9BD,MAAAA,WAAW,CAACC,CAAD,CAAX,GAAiBV,SAAS,CAACM,KAAD,CAA1B;AACAA,MAAAA,KAAK;AACR;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYK,WAAxB;AACAF,IAAAA,MAAM,CAACI,KAAP,GAAeF,WAAf;AACH;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,SAAOK,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAP;AACH,CAhBM;AAkBP,OAAO,MAAMO,aAAa,GAAGd,SAAS,IAAI;AACtC,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIQ,KAAK,GAAGC,MAAM,CAAChB,SAAD,CAAN,CAAkBiB,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAZ;AACA,MAAIC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWL,KAAX,CAAhB;AACA,MAAIM,UAAU,GAAG,IAAIF,KAAJ,CAAUD,SAAS,CAACI,MAApB,CAAjB;AACA,MAAIC,SAAS,GAAG,IAAIJ,KAAJ,CAAUD,SAAS,CAACI,MAApB,CAAhB;;AACA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,SAAS,CAACI,MAA9B,EAAsCd,CAAC,EAAvC,EAA2C;AACvCa,IAAAA,UAAU,CAACb,CAAD,CAAV,GAAgBgB,QAAQ,CAACN,SAAS,CAACV,CAAD,CAAV,CAAxB;AACA,QAAIiB,IAAI,CAACC,MAAL,KAAgB,GAApB,EACIH,SAAS,CAACf,CAAD,CAAT,GAAe,CAAf,CADJ,KAGIe,SAAS,CAACf,CAAD,CAAT,GAAe,CAAf;AACP;;AACDD,EAAAA,MAAM,CAACoB,KAAP,GAAeN,UAAf;AACAd,EAAAA,MAAM,CAACqB,IAAP,GAAcL,SAAd;AACA,SAAOX,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAP;AACH,CAhBM;AAkBP,OAAO,MAAMsB,YAAY,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AACtC,QAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAhB;AACA,QAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAACN,IAAD,CAAT,EAAiB;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAjB,CAAjB,CAFsC,CAEqB;;AAC3DL,EAAAA,OAAO,CAACM,IAAR,GAAeC,GAAG,CAACC,eAAJ,CAAoBL,QAApB,CAAf;AACAH,EAAAA,OAAO,CAACS,QAAR,GAAoB,wBAAuBV,EAAG,OAA9C;AACAE,EAAAA,QAAQ,CAACS,IAAT,CAAcC,WAAd,CAA0BX,OAA1B;AACAA,EAAAA,OAAO,CAACY,KAAR;AACH,CAPM","sourcesContent":["// Creates the structure for a JSON file\nexport const buildJSON = (_oldChain, agents, resources) => {\n    console.log(\"The chain: \" + _oldChain)\n    var numAgent = 0; \n    var index = 0;\n    let object = {};\n    for(let i = 0; i < agents; i++){\n        let agentVector = [];\n        for(let j = 0; j < resources; j++){\n            agentVector[j] = _oldChain[index];\n            index++;\n        }\n        console.log(\"vector \" + agentVector);\n        object.agent = agentVector;\n    }\n    console.log(object);\n    return JSON.stringify(object);\n}\n\nexport const buildJSON_old = _oldChain => {\n    let object = {};\n    let chain = String(_oldChain).replace(/\\D/g, '');\n    let tempArray = Array.from(chain);\n    let arrayValue = new Array(tempArray.length);\n    let arraySign = new Array(tempArray.length);\n    for (let i = 0; i < tempArray.length; i++) {\n        arrayValue[i] = parseInt(tempArray[i]);\n        if (Math.random() < 0.5)\n            arraySign[i] = 1;\n        else\n            arraySign[i] = 0;\n    }\n    object.value = arrayValue;\n    object.sign = arraySign;\n    return JSON.stringify(object);\n}\n\nexport const downloadJSON = (json, id) => {\n    const element = document.createElement(\"a\");\n    const textFile = new Blob([json], { type: 'text/plain' }); //pass data from localStorage API to blob\n    element.href = URL.createObjectURL(textFile);\n    element.download = `Egalitarian_instance_${id}.json`;\n    document.body.appendChild(element);\n    element.click();\n}"]},"metadata":{},"sourceType":"module"}