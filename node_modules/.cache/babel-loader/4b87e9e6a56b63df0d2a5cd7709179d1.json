{"ast":null,"code":"import React from 'react';\nconst clausesLength = 3; // Builds the instance(s) into a friendly way\n\nexport function buildInstance(arr) {\n  let result = []; // id\n\n  result[0] = hexToDecimal(arr[0][0]); // chain\n\n  result[1] = buildChain(arr[0][1]); // size\n\n  result[2] = hexToDecimal(arr[0][2]); // date created\n\n  result[3] = buildDate(arr[0][3]); // solution\n\n  result[4] = arr[0][4]; // solved\n\n  result[5] = arr[0][5]; // date resolved\n\n  result[6] = buildDate(arr[0][6]);\n  return result;\n} // Builds the chain as a string\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n} // Converts a hexadecimal number to decimal number\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber, 16);\n} // Builds the date as a date format\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  }\n\n  return result;\n} // Return 'true' or 'false' with 50% probability\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n\nexport default buildInstance;","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/UCM/Doctorado/Investigaciones/Generator App/Generator-DApp/src/components/UserSection/supportFunctions.js"],"names":["React","clausesLength","buildInstance","arr","result","hexToDecimal","buildChain","buildDate","_oldChain","array","Array","from","length","i","Math","random","shift","_hexNumber","parseInt","_oldDate","newDate","Date","_hex","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst clausesLength = 3;\r\n\r\n// Builds the instance(s) into a friendly way\r\nexport function buildInstance(arr){\r\n    let result = [];\r\n    // id\r\n    result[0] = hexToDecimal(arr[0][0]);\r\n    // chain\r\n    result[1] = buildChain(arr[0][1]);\r\n    // size\r\n    result[2] = hexToDecimal(arr[0][2]);\r\n    // date created\r\n    result[3] = buildDate(arr[0][3]);\r\n    // solution\r\n    result[4] = arr[0][4];\r\n    // solved\r\n    result[5] = arr[0][5];\r\n    // date resolved\r\n    result[6] = buildDate(arr[0][6]);\r\n    return result;\r\n}\r\n\r\n// Builds the chain as a string\r\nfunction buildChain(_oldChain){\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while(array.length > 1){\r\n        result += \"(\";\r\n        for(let i = 0; i < clausesLength; i++){\r\n            if(Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if(i < clausesLength-1) \r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if(array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n// Converts a hexadecimal number to decimal number\r\nfunction hexToDecimal(_hexNumber){\r\n    return parseInt(_hexNumber, 16);\r\n}\r\n\r\n// Builds the date as a date format\r\nfunction buildDate(_oldDate){\r\n    let result, newDate;\r\n    if(hexToDecimal(_oldDate) !== 0){\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16)*1000);\r\n        result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate()  + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    }\r\n    return result;\r\n}\r\n\r\n// Return 'true' or 'false' with 50% probability\r\nfunction getBoolean(){\r\n    if(Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nexport default buildInstance;"]},"metadata":{},"sourceType":"module"}