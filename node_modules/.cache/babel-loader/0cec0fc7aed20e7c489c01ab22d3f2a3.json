{"ast":null,"code":"/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1], arr[i][2]),\n      agents: agentsInfo(arr[i][2]),\n      resources: resourcesInfo(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6]),\n      type: typeProblem(hexToDecimal(arr[i][0])),\n      mode: mode(arr[i][2])\n    };\n    result.push(info);\n  }\n\n  return result;\n}\n/*\n* Builds the chain as a string\n*/\n\nfunction buildChain(_oldChain, setup) {\n  var agents = hexToDecimal(setup[0]);\n  var resources = hexToDecimal(setup[1]);\n  var mode = hexToDecimal(setup[2]);\n\n  var newChain = _oldChain.substring(0, _oldChain.length - 1); // We remove the last space\n\n\n  var arrayChain = newChain.split(\" \");\n  var result = [];\n  result = splitChain(arrayChain, agents, resources);\n\n  for (var k = 0; k < agents; k++) console.log(\"step 2: \" + result[k]);\n\n  if (mode === 1) {\n    for (var i = 0; i < agents; i++) result[i] = formalizePreferences(result[i], agents, resources);\n  }\n\n  for (var i = 0; i < agents; i++) console.log(\"step 3: \" + result[i]); // Construir la cadena de nuevo... o no\n\n\n  return result;\n}\n/*\n* Formalizes the preferences of an agent\n*/\n\n\nfunction formalizePreferences(preferences, numAgents, numResources) {\n  var aux = 0;\n\n  for (var i = 0; i < numResources; i++) aux += preferences[i];\n\n  console.log(aux);\n  aux = 1000 / aux;\n  console.log(aux);\n\n  for (var i = 0; i < numResources; i++) preferences[i] = Math.round(aux * preferences[i]);\n\n  return preferences;\n}\n/*\n* Splits the array in several arrays considering the number of agents\n*/\n\n\nfunction splitChain(arrayChain, numAgents, numResources) {\n  var result = [];\n  var cont = 0;\n\n  for (var i = 0; i < numAgents; i++) {\n    var temp = [];\n\n    for (var j = 0; j < numResources; j++) {\n      temp[j] = arrayChain[cont];\n      cont++;\n    }\n\n    result[i] = temp;\n  }\n\n  return result;\n}\n/*\n* Check if the instance is for auction or optimization problem\n*/\n\n\nfunction typeProblem(id) {\n  if (id % 2 === 0) return \"Auction problem\";else return \"Optimization problem\";\n}\n/*\n* Returns the number of agents\n*/\n\n\nfunction agentsInfo(setup) {\n  return hexToDecimal(setup[0]);\n}\n/*\n* Returns the number of resources\n*/\n\n\nfunction resourcesInfo(setup) {\n  return hexToDecimal(setup[1]);\n}\n/*\n* Check if the instance is unlimited or limited\n*/\n\n\nfunction mode(setup) {\n  var mode = hexToDecimal(setup[2]);\n  if (mode === 0) return \"Unlimited\";else return \"Limited\";\n}\n/*\n* Converts a hexadecimal number to decimal number\n*/\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber._hex, 16);\n}\n/*\n* Builds the date as date format\n*/\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n}\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n/*\n* Builds an array of date as date format\n*/\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/Egalitarian_Instance_Generator/src/components/UserSection/supportFunctions.js"],"names":["buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","agents","agentsInfo","resources","resourcesInfo","created","buildDate","solution","solved","ended","type","typeProblem","mode","push","_oldChain","setup","newChain","substring","arrayChain","split","splitChain","k","console","log","formalizePreferences","preferences","numAgents","numResources","aux","Math","round","cont","temp","j","_hexNumber","parseInt","_hex","_oldDate","newDate","Date","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","random","buildDateArray","_arrayRandoms"],"mappings":"AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,IAAI,GAAG;AACPC,MAAAA,EAAE,EAAEC,YAAY,CAACN,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CADT;AAEPK,MAAAA,KAAK,EAAEC,UAAU,CAACR,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,EAAYF,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAZ,CAFV;AAGPO,MAAAA,MAAM,EAAEC,UAAU,CAACV,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CAHX;AAIPS,MAAAA,SAAS,EAAEC,aAAa,CAACZ,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CAJjB;AAKPW,MAAAA,OAAO,EAAEC,SAAS,CAACd,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CALX;AAMPa,MAAAA,QAAQ,EAAEf,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CANH;AAOPc,MAAAA,MAAM,EAAEhB,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAPD;AAQPe,MAAAA,KAAK,EAAEH,SAAS,CAACd,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CART;AASPgB,MAAAA,IAAI,EAAEC,WAAW,CAACb,YAAY,CAACN,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD,CAAb,CATV;AAUPkB,MAAAA,IAAI,EAAEA,IAAI,CAACpB,GAAG,CAACE,CAAD,CAAH,CAAO,CAAP,CAAD;AAVH,KAAX;AAYAD,IAAAA,MAAM,CAACoB,IAAP,CAAYjB,IAAZ;AACH;;AACD,SAAOH,MAAP;AACH;AAED;AACA;AACA;;AACA,SAASO,UAAT,CAAoBc,SAApB,EAA+BC,KAA/B,EAAsC;AAClC,MAAId,MAAM,GAAGH,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAzB;AACA,MAAIZ,SAAS,GAAGL,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAA5B;AACA,MAAIH,IAAI,GAAGd,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAvB;;AACA,MAAIC,QAAQ,GAAGF,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuBH,SAAS,CAACnB,MAAV,GAAiB,CAAxC,CAAf,CAJkC,CAIyB;;;AAC3D,MAAIuB,UAAU,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAjB;AACA,MAAI1B,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,GAAI2B,UAAU,CAACF,UAAD,EAAajB,MAAb,EAAqBE,SAArB,CAApB;;AACA,OAAI,IAAIkB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGpB,MAAnB,EAA2BoB,CAAC,EAA5B,EACIC,OAAO,CAACC,GAAR,CAAY,aAAa9B,MAAM,CAAC4B,CAAD,CAA/B;;AACJ,MAAGT,IAAI,KAAK,CAAZ,EAAc;AACV,SAAI,IAAIlB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGO,MAAnB,EAA2BP,CAAC,EAA5B,EACID,MAAM,CAACC,CAAD,CAAN,GAAY8B,oBAAoB,CAAC/B,MAAM,CAACC,CAAD,CAAP,EAAYO,MAAZ,EAAoBE,SAApB,CAAhC;AACP;;AACD,OAAI,IAAIT,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGO,MAAnB,EAA2BP,CAAC,EAA5B,EACI4B,OAAO,CAACC,GAAR,CAAY,aAAa9B,MAAM,CAACC,CAAD,CAA/B,EAf8B,CAgBlC;;;AACA,SAAOD,MAAP;AACH;AAED;AACA;AACA;;;AACA,SAAS+B,oBAAT,CAA8BC,WAA9B,EAA2CC,SAA3C,EAAsDC,YAAtD,EAAmE;AAC/D,MAAIC,GAAG,GAAG,CAAV;;AACA,OAAI,IAAIlC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGiC,YAAnB,EAAiCjC,CAAC,EAAlC,EACIkC,GAAG,IAAIH,WAAW,CAAC/B,CAAD,CAAlB;;AACJ4B,EAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAA,EAAAA,GAAG,GAAG,OAAOA,GAAb;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;;AACA,OAAI,IAAIlC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGiC,YAAnB,EAAiCjC,CAAC,EAAlC,EACI+B,WAAW,CAAC/B,CAAD,CAAX,GAAkBmC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAGH,WAAW,CAAC/B,CAAD,CAA5B,CAAlB;;AACJ,SAAO+B,WAAP;AACH;AAED;AACA;AACA;;;AACA,SAASL,UAAT,CAAoBF,UAApB,EAAgCQ,SAAhC,EAA2CC,YAA3C,EAAwD;AACpD,MAAIlC,MAAM,GAAG,EAAb;AACA,MAAIsC,IAAI,GAAG,CAAX;;AACA,OAAI,IAAIrC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGgC,SAAnB,EAA8BhC,CAAC,EAA/B,EAAkC;AAC9B,QAAIsC,IAAI,GAAG,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,YAAnB,EAAiCM,CAAC,EAAlC,EAAqC;AACjCD,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUf,UAAU,CAACa,IAAD,CAApB;AACAA,MAAAA,IAAI;AACP;;AACDtC,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYsC,IAAZ;AACH;;AACD,SAAOvC,MAAP;AACH;AAED;AACA;AACA;;;AACA,SAASkB,WAAT,CAAqBd,EAArB,EAAwB;AACpB,MAAGA,EAAE,GAAG,CAAL,KAAW,CAAd,EACI,OAAO,iBAAP,CADJ,KAGI,OAAO,sBAAP;AACP;AAED;AACA;AACA;;;AACA,SAASK,UAAT,CAAoBa,KAApB,EAA0B;AACtB,SAAOjB,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAnB;AACH;AAED;AACA;AACA;;;AACA,SAASX,aAAT,CAAuBW,KAAvB,EAA6B;AACzB,SAAOjB,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAnB;AACH;AAED;AACA;AACA;;;AACA,SAASH,IAAT,CAAcG,KAAd,EAAoB;AAChB,MAAIH,IAAI,GAAGd,YAAY,CAACiB,KAAK,CAAC,CAAD,CAAN,CAAvB;AACA,MAAGH,IAAI,KAAK,CAAZ,EACI,OAAO,WAAP,CADJ,KAGI,OAAO,SAAP;AACP;AAED;AACA;AACA;;;AACA,SAASd,YAAT,CAAsBoC,UAAtB,EAAkC;AAC9B,SAAOC,QAAQ,CAACD,UAAU,CAACE,IAAZ,EAAkB,EAAlB,CAAf;AACH;AAED;AACA;AACA;;;AACA,SAAS9B,SAAT,CAAmB+B,QAAnB,EAA6B;AACzB,MAAI5C,MAAJ,EAAY6C,OAAZ;;AACA,MAAIxC,YAAY,CAACuC,QAAD,CAAZ,KAA2B,CAA/B,EAAkC;AAC9BC,IAAAA,OAAO,GAAG,IAAIC,IAAJ,CAASJ,QAAQ,CAACE,QAAQ,CAACD,IAAT,CAAcI,KAAd,CAAoB,CAApB,CAAD,EAAyB,EAAzB,CAAR,GAAuC,IAAhD,CAAV;AACA/C,IAAAA,MAAM,GAAG6C,OAAO,CAACG,WAAR,KAAwB,GAAxB,IAA+BH,OAAO,CAACI,QAAR,KAAmB,CAAlD,IAAuD,GAAvD,GAA6DJ,OAAO,CAACK,OAAR,EAA7D,GAAiF,GAAjF,GAAuFL,OAAO,CAACM,QAAR,EAAvF,GAA4G,GAA5G,GAAkHN,OAAO,CAACO,UAAR,EAA3H;AACH,GAHD,MAIIpD,MAAM,GAAG,kBAAT;;AACJ,SAAOA,MAAP;AACH;AAED;AACA;AACA;;;AACA,SAASqD,UAAT,GAAsB;AAClB,MAAIjB,IAAI,CAACkB,MAAL,MAAiB,EAArB,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AACP;AAED;AACA;AACA;;;AACA,OAAO,SAASC,cAAT,CAAwBC,aAAxB,EAAuC;AAC1C,MAAIxD,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,aAAa,CAACtD,MAAlC,EAA0CD,CAAC,EAA3C,EACID,MAAM,CAACoB,IAAP,CAAYP,SAAS,CAAC2C,aAAa,CAACvD,CAAD,CAAd,CAArB;;AACJ,SAAOD,MAAP;AACH","sourcesContent":["\n/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let info = {\n            id: hexToDecimal(arr[i][0]),\n            chain: buildChain(arr[i][1], arr[i][2]),\n            agents: agentsInfo(arr[i][2]),\n            resources: resourcesInfo(arr[i][2]),\n            created: buildDate(arr[i][3]),\n            solution: arr[i][4],\n            solved: arr[i][5],\n            ended: buildDate(arr[i][6]),\n            type: typeProblem(hexToDecimal(arr[i][0])),\n            mode: mode(arr[i][2])\n        };\n        result.push(info);\n    }\n    return result;\n}\n\n/*\n* Builds the chain as a string\n*/\nfunction buildChain(_oldChain, setup) {\n    var agents = hexToDecimal(setup[0]);\n    var resources = hexToDecimal(setup[1]);\n    var mode = hexToDecimal(setup[2]);\n    var newChain = _oldChain.substring(0, _oldChain.length-1); // We remove the last space\n    var arrayChain = newChain.split(\" \");\n    var result = [];\n    result =  splitChain(arrayChain, agents, resources);\n    for(var k = 0; k < agents; k++)\n        console.log(\"step 2: \" + result[k]);\n    if(mode === 1){\n        for(var i = 0; i < agents; i++)\n            result[i] = formalizePreferences(result[i], agents, resources);\n    }\n    for(var i = 0; i < agents; i++)\n        console.log(\"step 3: \" + result[i]);\n    // Construir la cadena de nuevo... o no\n    return result;\n}\n\n/*\n* Formalizes the preferences of an agent\n*/\nfunction formalizePreferences(preferences, numAgents, numResources){\n    var aux = 0;\n    for(var i = 0; i < numResources; i++)\n        aux += preferences[i];\n    console.log(aux);\n    aux = 1000 / aux;\n    console.log(aux);\n    for(var i = 0; i < numResources; i++)\n        preferences[i] =  Math.round(aux * preferences[i]);\n    return preferences;\n}\n\n/*\n* Splits the array in several arrays considering the number of agents\n*/\nfunction splitChain(arrayChain, numAgents, numResources){\n    var result = [];\n    var cont = 0;\n    for(var i = 0; i < numAgents; i++){\n        var temp = [];\n        for(var j = 0; j < numResources; j++){\n            temp[j] = arrayChain[cont];\n            cont++;\n        }\n        result[i] = temp;\n    }\n    return result;\n}\n\n/*\n* Check if the instance is for auction or optimization problem\n*/\nfunction typeProblem(id){\n    if(id % 2 === 0)\n        return \"Auction problem\";\n    else\n        return \"Optimization problem\";\n}\n\n/*\n* Returns the number of agents\n*/\nfunction agentsInfo(setup){\n    return hexToDecimal(setup[0]);\n}\n\n/*\n* Returns the number of resources\n*/\nfunction resourcesInfo(setup){\n    return hexToDecimal(setup[1]);\n}\n\n/*\n* Check if the instance is unlimited or limited\n*/\nfunction mode(setup){\n    var mode = hexToDecimal(setup[2]);\n    if(mode === 0)\n        return \"Unlimited\";\n    else\n        return \"Limited\";\n}\n\n/*\n* Converts a hexadecimal number to decimal number\n*/\nfunction hexToDecimal(_hexNumber) {\n    return parseInt(_hexNumber._hex, 16);\n}\n\n/*\n* Builds the date as date format\n*/\nfunction buildDate(_oldDate) {\n    let result, newDate;\n    if (hexToDecimal(_oldDate) !== 0) {\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n    } else\n        result = \"Date unavailable\";\n    return result;\n}\n\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\nfunction getBoolean() {\n    if (Math.random() >= 50)\n        return true;\n    else\n        return false;\n}\n\n/*\n* Builds an array of date as date format\n*/\nexport function buildDateArray(_arrayRandoms) {\n    let result = [];\n    for (let i = 0; i < _arrayRandoms.length; i++)\n        result.push(buildDate(_arrayRandoms[i]));\n    return result;\n} "]},"metadata":{},"sourceType":"module"}