{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HelpPrinter = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nconst errors_list_1 = require(\"../core/errors-list\");\n\nconst ArgumentsParser_1 = require(\"./ArgumentsParser\");\n\nclass HelpPrinter {\n  constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks) {\n    this._programName = _programName;\n    this._executableName = _executableName;\n    this._version = _version;\n    this._hardhatParamDefinitions = _hardhatParamDefinitions;\n    this._tasks = _tasks;\n  }\n\n  printGlobalHelp(includeSubtasks = false) {\n    console.log(`${this._programName} version ${this._version}\\n`);\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`);\n    console.log(\"GLOBAL OPTIONS:\\n\");\n\n    this._printParamDetails(this._hardhatParamDefinitions);\n\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n    const tasksToShow = {};\n\n    for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n      if (includeSubtasks || !taskDefinition.isSubtask) {\n        tasksToShow[taskName] = taskDefinition;\n      }\n    }\n\n    const nameLength = Object.keys(tasksToShow).map(n => n.length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(tasksToShow).sort()) {\n      const {\n        description = \"\"\n      } = this._tasks[name];\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    console.log(\"\");\n    console.log(`To get help for a specific task run: npx ${this._executableName} help [task]\\n`);\n  }\n\n  printTaskHelp(taskName) {\n    const taskDefinition = this._tasks[taskName];\n\n    if (taskDefinition === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n        task: taskName\n      });\n    }\n\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions\n    } = taskDefinition;\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    const paramsList = this._getParamsList(paramDefinitions);\n\n    const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`);\n\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n\n      this._printParamDetails(paramDefinitions);\n\n      console.log(\"\");\n    }\n\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n\n      this._printPositionalParamDetails(positionalParamDefinitions);\n\n      console.log(\"\");\n    }\n\n    console.log(`${name}: ${description}\\n`);\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n\n  _getParamValueDescription(paramDefinition) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n\n  _getParamsList(paramDefinitions) {\n    let paramsList = \"\";\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const {\n        defaultValue,\n        isFlag\n      } = definition;\n      paramsList += \" \";\n\n      if (defaultValue !== undefined) {\n        paramsList += \"[\";\n      }\n\n      paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n\n      if (defaultValue !== undefined) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  _getPositionalParamsList(positionalParamDefinitions) {\n    let paramsList = \"\";\n\n    for (const definition of positionalParamDefinitions) {\n      const {\n        defaultValue,\n        isVariadic,\n        name\n      } = definition;\n      paramsList += \" \";\n\n      if (defaultValue !== undefined) {\n        paramsList += \"[\";\n      }\n\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n\n      paramsList += name;\n\n      if (defaultValue !== undefined) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  _printParamDetails(paramDefinitions) {\n    const paramsNameLength = Object.keys(paramDefinitions).map(n => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const {\n        description,\n        defaultValue,\n        isOptional,\n        isFlag\n      } = paramDefinitions[name];\n      let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n  _printPositionalParamDetails(positionalParamDefinitions) {\n    const paramsNameLength = positionalParamDefinitions.map(d => d.name.length).reduce((a, b) => Math.max(a, b), 0);\n\n    for (const definition of positionalParamDefinitions) {\n      const {\n        name,\n        description,\n        isOptional,\n        defaultValue\n      } = definition;\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n}\n\nexports.HelpPrinter = HelpPrinter;","map":{"version":3,"sources":["../../src/internal/cli/HelpPrinter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HelpPrinter = void 0;\nconst errors_1 = require(\"../core/errors\");\nconst errors_list_1 = require(\"../core/errors-list\");\nconst ArgumentsParser_1 = require(\"./ArgumentsParser\");\nclass HelpPrinter {\n    constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks) {\n        this._programName = _programName;\n        this._executableName = _executableName;\n        this._version = _version;\n        this._hardhatParamDefinitions = _hardhatParamDefinitions;\n        this._tasks = _tasks;\n    }\n    printGlobalHelp(includeSubtasks = false) {\n        console.log(`${this._programName} version ${this._version}\\n`);\n        console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`);\n        console.log(\"GLOBAL OPTIONS:\\n\");\n        this._printParamDetails(this._hardhatParamDefinitions);\n        console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n        const tasksToShow = {};\n        for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n            if (includeSubtasks || !taskDefinition.isSubtask) {\n                tasksToShow[taskName] = taskDefinition;\n            }\n        }\n        const nameLength = Object.keys(tasksToShow)\n            .map((n) => n.length)\n            .reduce((a, b) => Math.max(a, b), 0);\n        for (const name of Object.keys(tasksToShow).sort()) {\n            const { description = \"\" } = this._tasks[name];\n            console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n        }\n        console.log(\"\");\n        console.log(`To get help for a specific task run: npx ${this._executableName} help [task]\\n`);\n    }\n    printTaskHelp(taskName) {\n        const taskDefinition = this._tasks[taskName];\n        if (taskDefinition === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n                task: taskName,\n            });\n        }\n        const { description = \"\", name, paramDefinitions, positionalParamDefinitions, } = taskDefinition;\n        console.log(`${this._programName} version ${this._version}\\n`);\n        const paramsList = this._getParamsList(paramDefinitions);\n        const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n        console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`);\n        if (Object.keys(paramDefinitions).length > 0) {\n            console.log(\"OPTIONS:\\n\");\n            this._printParamDetails(paramDefinitions);\n            console.log(\"\");\n        }\n        if (positionalParamDefinitions.length > 0) {\n            console.log(\"POSITIONAL ARGUMENTS:\\n\");\n            this._printPositionalParamDetails(positionalParamDefinitions);\n            console.log(\"\");\n        }\n        console.log(`${name}: ${description}\\n`);\n        console.log(`For global options help run: ${this._executableName} help\\n`);\n    }\n    _getParamValueDescription(paramDefinition) {\n        return `<${paramDefinition.type.name.toUpperCase()}>`;\n    }\n    _getParamsList(paramDefinitions) {\n        let paramsList = \"\";\n        for (const name of Object.keys(paramDefinitions).sort()) {\n            const definition = paramDefinitions[name];\n            const { defaultValue, isFlag } = definition;\n            paramsList += \" \";\n            if (defaultValue !== undefined) {\n                paramsList += \"[\";\n            }\n            paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n            if (!isFlag) {\n                paramsList += ` ${this._getParamValueDescription(definition)}`;\n            }\n            if (defaultValue !== undefined) {\n                paramsList += \"]\";\n            }\n        }\n        return paramsList;\n    }\n    _getPositionalParamsList(positionalParamDefinitions) {\n        let paramsList = \"\";\n        for (const definition of positionalParamDefinitions) {\n            const { defaultValue, isVariadic, name } = definition;\n            paramsList += \" \";\n            if (defaultValue !== undefined) {\n                paramsList += \"[\";\n            }\n            if (isVariadic) {\n                paramsList += \"...\";\n            }\n            paramsList += name;\n            if (defaultValue !== undefined) {\n                paramsList += \"]\";\n            }\n        }\n        return paramsList;\n    }\n    _printParamDetails(paramDefinitions) {\n        const paramsNameLength = Object.keys(paramDefinitions)\n            .map((n) => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length)\n            .reduce((a, b) => Math.max(a, b), 0);\n        for (const name of Object.keys(paramDefinitions).sort()) {\n            const { description, defaultValue, isOptional, isFlag } = paramDefinitions[name];\n            let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n            if (description !== undefined) {\n                msg += `${description} `;\n            }\n            if (isOptional && defaultValue !== undefined && !isFlag) {\n                msg += `(default: ${JSON.stringify(defaultValue)})`;\n            }\n            console.log(msg);\n        }\n    }\n    _printPositionalParamDetails(positionalParamDefinitions) {\n        const paramsNameLength = positionalParamDefinitions\n            .map((d) => d.name.length)\n            .reduce((a, b) => Math.max(a, b), 0);\n        for (const definition of positionalParamDefinitions) {\n            const { name, description, isOptional, defaultValue } = definition;\n            let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n            if (description !== undefined) {\n                msg += `${description} `;\n            }\n            if (isOptional && defaultValue !== undefined) {\n                msg += `(default: ${JSON.stringify(defaultValue)})`;\n            }\n            console.log(msg);\n        }\n    }\n}\nexports.HelpPrinter = HelpPrinter;\n//# sourceMappingURL=HelpPrinter.js.map"]},"metadata":{},"sourceType":"script"}