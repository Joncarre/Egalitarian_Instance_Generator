{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf, SyncPromise } from '@sentry/utils';\nimport { getExceptionFromError } from '../parsers';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\n\nvar LinkedErrors =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n\n      if (self) {\n        var handler = self._handler && self._handler.bind(self);\n\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._handler = function (event, hint) {\n    var _this = this;\n\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return SyncPromise.resolve(event);\n    }\n\n    return new SyncPromise(function (resolve) {\n      _this._walkErrorTree(hint.originalException, _this._key).then(function (linkedErrors) {\n        if (event && event.exception && event.exception.values) {\n          event.exception.values = __spread(linkedErrors, event.exception.values);\n        }\n\n        resolve(event);\n      }).then(null, function () {\n        resolve(event);\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    var _this = this;\n\n    if (stack === void 0) {\n      stack = [];\n    }\n\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return SyncPromise.resolve(stack);\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      getExceptionFromError(error[key]).then(function (exception) {\n        _this._walkErrorTree(error[key], key, __spread([exception], stack)).then(resolve).then(null, function () {\n          reject();\n        });\n      }).then(null, function () {\n        reject();\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\n\nexport { LinkedErrors };","map":{"version":3,"sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf, SyncPromise } from '@sentry/utils';\n\nimport { getExceptionFromError } from '../parsers';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        const handler = self._handler && self._handler.bind(self);\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): PromiseLike<Event> {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return SyncPromise.resolve(event);\n    }\n\n    return new SyncPromise<Event>(resolve => {\n      this._walkErrorTree(hint.originalException as Error, this._key)\n        .then((linkedErrors: Exception[]) => {\n          if (event && event.exception && event.exception.values) {\n            event.exception.values = [...linkedErrors, ...event.exception.values];\n          }\n          resolve(event);\n        })\n        .then(null, () => {\n          resolve(event);\n        });\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): PromiseLike<Exception[]> {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return SyncPromise.resolve(stack);\n    }\n    return new SyncPromise<Exception[]>((resolve, reject) => {\n      getExceptionFromError(error[key])\n        .then((exception: Exception) => {\n          this._walkErrorTree(error[key], key, [exception, ...stack])\n            .then(resolve)\n            .then(null, () => {\n              reject();\n            });\n        })\n        .then(null, () => {\n          reject();\n        });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}