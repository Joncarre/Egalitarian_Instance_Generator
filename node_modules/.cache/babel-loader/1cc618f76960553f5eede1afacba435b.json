{"ast":null,"code":"import { generatorAddress, requestAccount } from '../App.js';\nimport { ethers } from 'ethers';\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\nexport async function async_getHash(_id) {\n  if (typeof window.ethereum !== 'undefined') {\n    await requestAccount();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n    try {\n      const signer = provider.getSigner();\n      const result = await contract.connect(signer).getHash(_id);\n      console.log(\"Solution information for instance \" + _id + \":\");\n      console.log(\"\t- Solution hash: \" + result[0]);\n      console.log(\"\t- Algorithm hash: \" + result[1]);\n      console.log(\"\t- Hash method used: \" + result[2]);\n    } catch (err) {\n      console.log(\"Error: \", err);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Desktop/DApp Versiones/v11/Generator-DApp/src/components/helper.js"],"names":["generatorAddress","requestAccount","ethers","Generator","async_getHash","_id","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","result","connect","getHash","console","log","err"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,cAA3B,QAAiD,WAAjD;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,qDAAtB;AAEA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkC;AACxC,MAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC3C,UAAMN,cAAc,EAApB;AACA,UAAMO,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMI,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBZ,gBAApB,EAAsCG,SAAS,CAACU,GAAhD,EAAqDL,QAArD,CAAjB;;AACA,QAAI;AACH,YAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,YAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBH,MAAjB,EAAyBI,OAAzB,CAAiCb,GAAjC,CAArB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCf,GAAvC,GAA6C,GAAzD;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,MAAM,CAAC,CAAD,CAAzC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBJ,MAAM,CAAC,CAAD,CAA1C;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BJ,MAAM,CAAC,CAAD,CAA5C;AACA,KAPD,CAOE,OAAOK,GAAP,EAAY;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACA;AACD;AACD","sourcesContent":["import { generatorAddress, requestAccount } from '../App.js';\nimport { ethers } from 'ethers';\nimport Generator from '../artifacts/contracts/Generator.sol/Generator.json';\n\nexport async function async_getHash(_id) {\n\tif (typeof window.ethereum !== 'undefined') {\n\t\tawait requestAccount()\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\t\ttry {\n\t\t\tconst signer = provider.getSigner();\n\t\t\tconst result = await contract.connect(signer).getHash(_id);\n\t\t\tconsole.log(\"Solution information for instance \" + _id + \":\");\n\t\t\tconsole.log(\"\t- Solution hash: \" + result[0]);\n\t\t\tconsole.log(\"\t- Algorithm hash: \" + result[1]);\n\t\t\tconsole.log(\"\t- Hash method used: \" + result[2]);\n\t\t} catch (err) {\n\t\t\tconsole.log(\"Error: \", err)\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}