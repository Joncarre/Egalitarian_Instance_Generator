{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w10te\\\\Documents\\\\dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatorAddress = \"0xd1E327D0E2e31601965d371f5C111c11cf2058E0\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state\n  const [data2, setData2] = useState();\n  const [userInput2, setUserInput2] = useState(); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // ------------------ Using other functions of my contract -----------------------\n\n\n  async function asyncFetchHash() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getLastHash();\n        setData2(result);\n        console.log('data: ', result);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function asyncSetLastHash() {\n    if (!userInput2) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.regResearcher(userInput2);\n      await transaction.wait();\n    }\n  }\n\n  async function asyncSetInstance() {\n    if (!userInput2) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createInstance(userInput2);\n      await transaction.wait();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"1. Set a instance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncSetInstance,\n      children: \"Set instance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"2. Set your hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncFetchHash,\n      children: \"Get hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", data2, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncSetLastHash,\n      children: \"Set hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setUserInput2(e.target.value),\n      placeholder: \"hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2mZ7Fg7eHxq6bZzmEN88ypWMMzY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/w10te/Documents/dapp/src/App.js"],"names":["useState","ethers","Generator","generatorAddress","App","data2","setData2","userInput2","setUserInput2","requestAccount","window","ethereum","request","method","asyncFetchHash","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","result","connect","getLastHash","console","log","err","asyncSetLastHash","transaction","regResearcher","wait","asyncSetInstance","createInstance","e","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'\n\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0xd1E327D0E2e31601965d371f5C111c11cf2058E0\"\n\nfunction App() {\n  // store greeting in local state\n  const [data2, setData2] = useState()\n  const [userInput2, setUserInput2] = useState()\n\n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n\n    // ------------------ Using other functions of my contract -----------------------\n\n    async function asyncFetchHash() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getLastHash()\n          setData2(result)\n          console.log('data: ', result)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n    async function asyncSetLastHash() {\n      if (!userInput2) return\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.regResearcher(userInput2)\n        await transaction.wait()\n      }\n    }\n\n    async function asyncSetInstance() {\n      if (!userInput2) return\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.createInstance(userInput2)\n        await transaction.wait()\n      }\n    }\n    \n  return (\n    <div className=\"App\">\n      <h5>1. Set a instance</h5>\n      <button onClick={asyncSetInstance}>Set instance</button>\n\n      <h5>2. Set your hash</h5>\n      <button onClick={asyncFetchHash}>Get hash</button>\n      <p> { data2 } </p>\n      <button onClick={asyncSetLastHash}>Set hash</button>\n      <input onChange={e => setUserInput2(e.target.value)} placeholder=\"hash\" />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}