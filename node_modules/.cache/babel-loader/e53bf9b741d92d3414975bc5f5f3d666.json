{"ast":null,"code":"var _jsxFileName = \"/Users/tao-sen/generator-dapp/Generator-DApp/src/components/SubPages/ThreeSat.js\";\nimport { Container, Wrap, NewH1, NewH2, NewP, NewLink, Img } from \"./SubpagesElements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThreeSat = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Wrap, {\n      children: [/*#__PURE__*/_jsxDEV(NewH1, {\n        children: \"What \\u0301s 3-SAT?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"3SAT, or the Boolean satisfiability problem, is a problem that asks what is the fastest algorithm to tell for a given formula in Boolean algebra (with unknown number of variables) whether it is satisfiable, that is, whether there is some combination of the (binary) values of the variables that will give 1. In other words, it asks whether the variables of a given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula evaluates to TRUE. If this is the case, the formula is called satisfiable. On the other hand, if no such assignment exists, the function expressed by the formula is FALSE for all possible variable assignments and the formula is unsatisfiable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewH2, {\n        children: \"Conjunctive normal form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"Conjunctive normal form (in particular with 3 literals per clause) is often considered the canonical representation for SAT formulas. The general SAT problem reduces to 3-SAT, the problem of determining satisfiability for formulas in this form. For example, a 3SAT instance would be to know if there are values     ,     and     such that the following expression is true.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }, this);\n};\n\n_c = ThreeSat;\nexport default ThreeSat;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeSat\");","map":{"version":3,"sources":["/Users/tao-sen/generator-dapp/Generator-DApp/src/components/SubPages/ThreeSat.js"],"names":["Container","Wrap","NewH1","NewH2","NewP","NewLink","Img","ThreeSat"],"mappings":";AAAA,SACCA,SADD,EAECC,IAFD,EAGCC,KAHD,EAICC,KAJD,EAKCC,IALD,EAMCC,OAND,EAOCC,GAPD,QAQO,oBARP;;;AAWA,MAAMC,QAAQ,GAAG,MAAM;AACtB,sBACC,QAAC,SAAD;AAAA,2BACC,QAAC,IAAD;AAAA,8BACC,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAIC,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJD,eAKC,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAYA,CAbD;;KAAMA,Q;AAeN,eAAeA,QAAf","sourcesContent":["import {\n\tContainer,\n\tWrap,\n\tNewH1,\n\tNewH2,\n\tNewP,\n\tNewLink,\n\tImg\n} from \"./SubpagesElements\";\n\n\nconst ThreeSat = () => {\n\treturn (\n\t\t<Container>\n\t\t\t<Wrap>\n\t\t\t\t<NewH1>What ÃÅs 3-SAT?</NewH1>\n\t\t\t\t<NewP>3SAT, or the Boolean satisfiability problem, is a problem that asks what is the fastest algorithm to tell for a given formula in Boolean algebra (with unknown number of variables) whether it is satisfiable, that is, whether there is some combination of the (binary) values of the variables that will give 1. In other words, it asks whether the variables of a given Boolean formula can be consistently replaced by the values TRUE or FALSE in such a way that the formula evaluates to TRUE. If this is the case, the formula is called satisfiable. On the other hand, if no such assignment exists, the function expressed by the formula is FALSE for all possible variable assignments and the formula is unsatisfiable.</NewP>\n\n\t\t\t\t<NewH2>Conjunctive normal form</NewH2>\n\t\t\t\t<NewP>Conjunctive normal form (in particular with 3 literals per clause) is often considered the canonical representation for SAT formulas. The general SAT problem reduces to 3-SAT, the problem of determining satisfiability for formulas in this form. For example, a 3SAT instance would be to\n\t\t\t\t\tknow if there are values     ,     and     such that the following expression is true.</NewP>\n\t\t\t</Wrap>\n\t\t</Container>\n\t);\n}\n\nexport default ThreeSat;"]},"metadata":{},"sourceType":"module"}