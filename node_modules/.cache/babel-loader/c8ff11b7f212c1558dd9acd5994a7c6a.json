{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeTelemetryConsent = exports.hasConsentedTelemetry = exports.getCompilersDir = exports.writeAnalyticsId = exports.readSecondLegacyAnalyticsId = exports.readFirstLegacyAnalyticsId = exports.readAnalyticsId = exports.getCacheDir = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst log = debug_1.default(\"hardhat:core:global-dir\");\n\nasync function generatePaths(packageName = \"hardhat\") {\n  const {\n    default: envPaths\n  } = await Promise.resolve().then(() => __importStar(require(\"env-paths\")));\n  return envPaths(packageName);\n}\n\nfunction generatePathsSync(packageName = \"hardhat\") {\n  const envPaths = require(\"env-paths\");\n\n  return envPaths(packageName);\n}\n\nfunction getConfigDirSync() {\n  const {\n    config\n  } = generatePathsSync();\n  fs_extra_1.default.ensureDirSync(config);\n  return config;\n}\n\nasync function getDataDir(packageName) {\n  const {\n    data\n  } = await generatePaths(packageName);\n  await fs_extra_1.default.ensureDir(data);\n  return data;\n}\n\nasync function getCacheDir() {\n  const {\n    cache\n  } = await generatePaths();\n  await fs_extra_1.default.ensureDir(cache);\n  return cache;\n}\n\nexports.getCacheDir = getCacheDir;\n\nasync function readAnalyticsId() {\n  const globalDataDir = await getDataDir();\n  const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n  return readId(idFile);\n}\n\nexports.readAnalyticsId = readAnalyticsId;\n/**\n * This is the first way that the analytics id was saved.\n */\n\nfunction readFirstLegacyAnalyticsId() {\n  const oldIdFile = path_1.default.join(os_1.default.homedir(), \".buidler\", \"config.json\");\n  return readId(oldIdFile);\n}\n\nexports.readFirstLegacyAnalyticsId = readFirstLegacyAnalyticsId;\n/**\n * This is the same way the analytics id is saved now, but using buidler as the\n * name of the project for env-paths\n */\n\nasync function readSecondLegacyAnalyticsId() {\n  const globalDataDir = await getDataDir(\"buidler\");\n  const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n  return readId(idFile);\n}\n\nexports.readSecondLegacyAnalyticsId = readSecondLegacyAnalyticsId;\n\nasync function readId(idFile) {\n  log(`Looking up Client Id at ${idFile}`);\n  let clientId;\n\n  try {\n    const data = await fs_extra_1.default.readJSON(idFile, {\n      encoding: \"utf8\"\n    });\n    clientId = data.analytics.clientId;\n  } catch (error) {\n    return undefined;\n  }\n\n  log(`Client Id found: ${clientId}`);\n  return clientId;\n}\n\nasync function writeAnalyticsId(clientId) {\n  const globalDataDir = await getDataDir();\n  const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n  await fs_extra_1.default.writeJSON(idFile, {\n    analytics: {\n      clientId\n    }\n  }, {\n    encoding: \"utf-8\",\n    spaces: 2\n  });\n  log(`Stored clientId ${clientId}`);\n}\n\nexports.writeAnalyticsId = writeAnalyticsId;\n\nasync function getCompilersDir() {\n  const cache = await getCacheDir();\n  const compilersCache = path_1.default.join(cache, \"compilers\");\n  await fs_extra_1.default.ensureDir(compilersCache);\n  return compilersCache;\n}\n\nexports.getCompilersDir = getCompilersDir;\n/**\n * Checks if the user has given (or refused) consent for telemetry.\n *\n * Returns undefined if it can't be determined.\n */\n\nfunction hasConsentedTelemetry() {\n  const configDir = getConfigDirSync();\n  const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n  const fileExists = fs_extra_1.default.pathExistsSync(telemetryConsentPath);\n\n  if (!fileExists) {\n    return undefined;\n  }\n\n  const {\n    consent\n  } = fs_extra_1.default.readJSONSync(telemetryConsentPath);\n  return consent;\n}\n\nexports.hasConsentedTelemetry = hasConsentedTelemetry;\n\nfunction writeTelemetryConsent(consent) {\n  const configDir = getConfigDirSync();\n  const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n  fs_extra_1.default.writeJSONSync(telemetryConsentPath, {\n    consent\n  }, {\n    spaces: 2\n  });\n}\n\nexports.writeTelemetryConsent = writeTelemetryConsent;","map":{"version":3,"sources":["../../src/internal/util/global-dir.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.writeTelemetryConsent = exports.hasConsentedTelemetry = exports.getCompilersDir = exports.writeAnalyticsId = exports.readSecondLegacyAnalyticsId = exports.readFirstLegacyAnalyticsId = exports.readAnalyticsId = exports.getCacheDir = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst log = debug_1.default(\"hardhat:core:global-dir\");\nasync function generatePaths(packageName = \"hardhat\") {\n    const { default: envPaths } = await Promise.resolve().then(() => __importStar(require(\"env-paths\")));\n    return envPaths(packageName);\n}\nfunction generatePathsSync(packageName = \"hardhat\") {\n    const envPaths = require(\"env-paths\");\n    return envPaths(packageName);\n}\nfunction getConfigDirSync() {\n    const { config } = generatePathsSync();\n    fs_extra_1.default.ensureDirSync(config);\n    return config;\n}\nasync function getDataDir(packageName) {\n    const { data } = await generatePaths(packageName);\n    await fs_extra_1.default.ensureDir(data);\n    return data;\n}\nasync function getCacheDir() {\n    const { cache } = await generatePaths();\n    await fs_extra_1.default.ensureDir(cache);\n    return cache;\n}\nexports.getCacheDir = getCacheDir;\nasync function readAnalyticsId() {\n    const globalDataDir = await getDataDir();\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    return readId(idFile);\n}\nexports.readAnalyticsId = readAnalyticsId;\n/**\n * This is the first way that the analytics id was saved.\n */\nfunction readFirstLegacyAnalyticsId() {\n    const oldIdFile = path_1.default.join(os_1.default.homedir(), \".buidler\", \"config.json\");\n    return readId(oldIdFile);\n}\nexports.readFirstLegacyAnalyticsId = readFirstLegacyAnalyticsId;\n/**\n * This is the same way the analytics id is saved now, but using buidler as the\n * name of the project for env-paths\n */\nasync function readSecondLegacyAnalyticsId() {\n    const globalDataDir = await getDataDir(\"buidler\");\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    return readId(idFile);\n}\nexports.readSecondLegacyAnalyticsId = readSecondLegacyAnalyticsId;\nasync function readId(idFile) {\n    log(`Looking up Client Id at ${idFile}`);\n    let clientId;\n    try {\n        const data = await fs_extra_1.default.readJSON(idFile, { encoding: \"utf8\" });\n        clientId = data.analytics.clientId;\n    }\n    catch (error) {\n        return undefined;\n    }\n    log(`Client Id found: ${clientId}`);\n    return clientId;\n}\nasync function writeAnalyticsId(clientId) {\n    const globalDataDir = await getDataDir();\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    await fs_extra_1.default.writeJSON(idFile, {\n        analytics: {\n            clientId,\n        },\n    }, { encoding: \"utf-8\", spaces: 2 });\n    log(`Stored clientId ${clientId}`);\n}\nexports.writeAnalyticsId = writeAnalyticsId;\nasync function getCompilersDir() {\n    const cache = await getCacheDir();\n    const compilersCache = path_1.default.join(cache, \"compilers\");\n    await fs_extra_1.default.ensureDir(compilersCache);\n    return compilersCache;\n}\nexports.getCompilersDir = getCompilersDir;\n/**\n * Checks if the user has given (or refused) consent for telemetry.\n *\n * Returns undefined if it can't be determined.\n */\nfunction hasConsentedTelemetry() {\n    const configDir = getConfigDirSync();\n    const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n    const fileExists = fs_extra_1.default.pathExistsSync(telemetryConsentPath);\n    if (!fileExists) {\n        return undefined;\n    }\n    const { consent } = fs_extra_1.default.readJSONSync(telemetryConsentPath);\n    return consent;\n}\nexports.hasConsentedTelemetry = hasConsentedTelemetry;\nfunction writeTelemetryConsent(consent) {\n    const configDir = getConfigDirSync();\n    const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n    fs_extra_1.default.writeJSONSync(telemetryConsentPath, { consent }, { spaces: 2 });\n}\nexports.writeTelemetryConsent = writeTelemetryConsent;\n//# sourceMappingURL=global-dir.js.map"]},"metadata":{},"sourceType":"script"}