{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n\nconst context_1 = require(\"../../context\");\n\nconst solidityTracer_1 = require(\"../../hardhat-network/stack-traces/solidityTracer\");\n\nconst packageInfo_1 = require(\"../../util/packageInfo\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst project_structure_1 = require(\"../project-structure\");\n\nconst config_resolution_1 = require(\"./config-resolution\");\n\nconst config_validation_1 = require(\"./config-validation\");\n\nconst default_config_1 = require(\"./default-config\");\n\nconst log = debug_1.default(\"hardhat:core:config\");\n\nfunction importCsjOrEsModule(filePath) {\n  const imported = require(filePath);\n\n  return imported.default !== undefined ? imported.default : imported;\n}\n\nfunction resolveConfigPath(configPath) {\n  if (configPath === undefined) {\n    configPath = project_structure_1.getUserConfigPath();\n  } else {\n    if (!path_1.default.isAbsolute(configPath)) {\n      configPath = path_1.default.join(process.cwd(), configPath);\n      configPath = path_1.default.normalize(configPath);\n    }\n  }\n\n  return configPath;\n}\n\nexports.resolveConfigPath = resolveConfigPath;\n\nfunction loadConfigAndTasks(hardhatArguments, {\n  showSolidityConfigWarnings\n} = {\n  showSolidityConfigWarnings: false\n}) {\n  let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`); // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n\n  const configEnv = require(\"./config-env\");\n\n  const globalAsAny = global;\n  Object.entries(configEnv).forEach(([key, value]) => globalAsAny[key] = value);\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.setConfigLoadingAsStarted();\n  let userConfig;\n\n  try {\n    require(\"../tasks/builtin-tasks\");\n\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath); // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n\n  config_validation_1.validateConfig(userConfig);\n\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  } // To avoid bad practices we remove the previously exported stuff\n\n\n  Object.keys(configEnv).forEach(key => globalAsAny[key] = undefined);\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n  const resolved = config_resolution_1.resolveConfig(configPath, userConfig);\n\n  for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n  }\n\n  return resolved;\n}\n\nexports.loadConfigAndTasks = loadConfigAndTasks;\n\nfunction deepFreezeUserConfig(config, propertyPath = []) {\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n\n  return new Proxy(config, {\n    get(target, property, receiver) {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [...propertyPath, property]);\n    },\n\n    set(target, property, _value, _receiver) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property].map(pathPart => pathPart.toString()).join(\".\")\n      });\n    }\n\n  });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\n\n\nfunction analyzeModuleNotFoundError(error, configPath) {\n  var _a;\n\n  const stackTraceParser = require(\"stacktrace-parser\");\n\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace.filter(x => x.file !== null).map(x => x.file).find(x => path_1.default.isAbsolute(x));\n\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  } // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n\n\n  if (throwingFile === configPath) {\n    return;\n  }\n\n  const packageJsonPath = packageInfo_1.findClosestPackageJson(throwingFile);\n\n  if (packageJsonPath === null) {\n    return;\n  }\n\n  const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n  const peerDependencies = (_a = packageJson.peerDependencies) !== null && _a !== void 0 ? _a : {};\n\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name\n    });\n  } // if the problem doesn't come from a hardhat plugin, we ignore it\n\n\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n\n  const missingPeerDependencies = {};\n\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency);\n\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies).map(([name, version]) => `\"${name}@${version}\"`).join(\" \")\n    });\n  }\n}\n\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\n\nfunction readPackageJson(packageName) {\n  try {\n    const packageJsonPath = require.resolve(path_1.default.join(packageName, \"package.json\"));\n\n    return require(packageJsonPath);\n  } catch (error) {\n    return undefined;\n  }\n}\n\nfunction checkMissingSolidityConfig(userConfig) {\n  if (userConfig.solidity === undefined) {\n    console.warn(chalk_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to supress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\"\n`));\n  }\n}\n\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n  const compilerVersions = resolvedConfig.solidity.compilers.map(x => x.version);\n  const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map(x => x.version);\n  const solcVersions = [...compilerVersions, ...overrideVersions];\n  const unsupportedVersions = [];\n\n  for (const solcVersion of solcVersions) {\n    if (!semver_1.default.satisfies(solcVersion, solidityTracer_1.SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n\n  if (unsupportedVersions.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/reference/solidity-support\"\n`));\n  }\n}","map":{"version":3,"sources":["../../../src/internal/core/config/config-loading.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst context_1 = require(\"../../context\");\nconst solidityTracer_1 = require(\"../../hardhat-network/stack-traces/solidityTracer\");\nconst packageInfo_1 = require(\"../../util/packageInfo\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst project_structure_1 = require(\"../project-structure\");\nconst config_resolution_1 = require(\"./config-resolution\");\nconst config_validation_1 = require(\"./config-validation\");\nconst default_config_1 = require(\"./default-config\");\nconst log = debug_1.default(\"hardhat:core:config\");\nfunction importCsjOrEsModule(filePath) {\n    const imported = require(filePath);\n    return imported.default !== undefined ? imported.default : imported;\n}\nfunction resolveConfigPath(configPath) {\n    if (configPath === undefined) {\n        configPath = project_structure_1.getUserConfigPath();\n    }\n    else {\n        if (!path_1.default.isAbsolute(configPath)) {\n            configPath = path_1.default.join(process.cwd(), configPath);\n            configPath = path_1.default.normalize(configPath);\n        }\n    }\n    return configPath;\n}\nexports.resolveConfigPath = resolveConfigPath;\nfunction loadConfigAndTasks(hardhatArguments, { showSolidityConfigWarnings } = { showSolidityConfigWarnings: false }) {\n    let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n    configPath = resolveConfigPath(configPath);\n    log(`Loading Hardhat config from ${configPath}`);\n    // Before loading the builtin tasks, the default and user's config we expose\n    // the config env in the global object.\n    const configEnv = require(\"./config-env\");\n    const globalAsAny = global;\n    Object.entries(configEnv).forEach(([key, value]) => (globalAsAny[key] = value));\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.setConfigLoadingAsStarted();\n    let userConfig;\n    try {\n        require(\"../tasks/builtin-tasks\");\n        userConfig = importCsjOrEsModule(configPath);\n    }\n    catch (e) {\n        analyzeModuleNotFoundError(e, configPath);\n        // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n        throw e;\n    }\n    finally {\n        ctx.setConfigLoadingAsFinished();\n    }\n    config_validation_1.validateConfig(userConfig);\n    if (showSolidityConfigWarnings) {\n        checkMissingSolidityConfig(userConfig);\n    }\n    // To avoid bad practices we remove the previously exported stuff\n    Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));\n    const frozenUserConfig = deepFreezeUserConfig(userConfig);\n    const resolved = config_resolution_1.resolveConfig(configPath, userConfig);\n    for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n        extender(resolved, frozenUserConfig);\n    }\n    if (showSolidityConfigWarnings) {\n        checkUnsupportedSolidityConfig(resolved);\n    }\n    return resolved;\n}\nexports.loadConfigAndTasks = loadConfigAndTasks;\nfunction deepFreezeUserConfig(config, propertyPath = []) {\n    if (typeof config !== \"object\" || config === null) {\n        return config;\n    }\n    return new Proxy(config, {\n        get(target, property, receiver) {\n            return deepFreezeUserConfig(Reflect.get(target, property, receiver), [\n                ...propertyPath,\n                property,\n            ]);\n        },\n        set(target, property, _value, _receiver) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n                path: [...propertyPath, property]\n                    .map((pathPart) => pathPart.toString())\n                    .join(\".\"),\n            });\n        },\n    });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nfunction analyzeModuleNotFoundError(error, configPath) {\n    var _a;\n    const stackTraceParser = require(\"stacktrace-parser\");\n    if (error.code !== \"MODULE_NOT_FOUND\") {\n        return;\n    }\n    const stackTrace = stackTraceParser.parse(error.stack);\n    const throwingFile = stackTrace\n        .filter((x) => x.file !== null)\n        .map((x) => x.file)\n        .find((x) => path_1.default.isAbsolute(x));\n    if (throwingFile === null || throwingFile === undefined) {\n        return;\n    }\n    // if the error comes from the config file, we ignore it because we know it's\n    // a direct import that's missing\n    if (throwingFile === configPath) {\n        return;\n    }\n    const packageJsonPath = packageInfo_1.findClosestPackageJson(throwingFile);\n    if (packageJsonPath === null) {\n        return;\n    }\n    const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n    const peerDependencies = (_a = packageJson.peerDependencies) !== null && _a !== void 0 ? _a : {};\n    if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n            plugin: packageJson.name,\n        });\n    }\n    // if the problem doesn't come from a hardhat plugin, we ignore it\n    if (peerDependencies.hardhat === undefined) {\n        return;\n    }\n    const missingPeerDependencies = {};\n    for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n        const peerDependencyPackageJson = readPackageJson(peerDependency);\n        if (peerDependencyPackageJson === undefined) {\n            missingPeerDependencies[peerDependency] = version;\n        }\n    }\n    const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n    if (missingPeerDependenciesNames.length > 0) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n            plugin: packageJson.name,\n            missingDependencies: missingPeerDependenciesNames.join(\", \"),\n            missingDependenciesVersions: Object.entries(missingPeerDependencies)\n                .map(([name, version]) => `\"${name}@${version}\"`)\n                .join(\" \"),\n        });\n    }\n}\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\nfunction readPackageJson(packageName) {\n    try {\n        const packageJsonPath = require.resolve(path_1.default.join(packageName, \"package.json\"));\n        return require(packageJsonPath);\n    }\n    catch (error) {\n        return undefined;\n    }\n}\nfunction checkMissingSolidityConfig(userConfig) {\n    if (userConfig.solidity === undefined) {\n        console.warn(chalk_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to supress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\"\n`));\n    }\n}\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n    const compilerVersions = resolvedConfig.solidity.compilers.map((x) => x.version);\n    const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map((x) => x.version);\n    const solcVersions = [...compilerVersions, ...overrideVersions];\n    const unsupportedVersions = [];\n    for (const solcVersion of solcVersions) {\n        if (!semver_1.default.satisfies(solcVersion, solidityTracer_1.SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n            unsupportedVersions.push(solcVersion);\n        }\n    }\n    if (unsupportedVersions.length > 0) {\n        console.warn(chalk_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/reference/solidity-support\"\n`));\n    }\n}\n//# sourceMappingURL=config-loading.js.map"]},"metadata":{},"sourceType":"script"}