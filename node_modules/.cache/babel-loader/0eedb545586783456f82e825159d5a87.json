{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\nexport var defaultIntegrations = [// Common\nnew CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), // Native Wrappers\nnew Console(), new Http(), // Global Handlers\nnew OnUncaughtException(), new OnUnhandledRejection(), // Misc\nnew LinkedErrors()];\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\n\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    var tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    var global_1 = getGlobalObject(); // Prefer env var over global\n\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    } // This supports the variable that sentry-webpack-plugin injects\n    else if (global_1.SENTRY_RELEASE && global_1.SENTRY_RELEASE.id) {\n      options.release = global_1.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n\n\n  if (domain.active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\n\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function flush(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n\n      if (client) {\n        return [2\n        /*return*/\n        , client.flush(timeout)];\n      }\n\n      return [2\n      /*return*/\n      , Promise.reject(false)];\n    });\n  });\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\n\nexport function close(timeout) {\n  return __awaiter(this, void 0, void 0, function () {\n    var client;\n    return __generator(this, function (_a) {\n      client = getCurrentHub().getClient();\n\n      if (client) {\n        return [2\n        /*return*/\n        , client.close(timeout)];\n      }\n\n      return [2\n      /*return*/\n      , Promise.reject(false)];\n    });\n  });\n}","map":{"version":3,"sources":["../src/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getMainCarrier, setHubOnCarrier } from '@sentry/hub';\nimport { getGlobalObject } from '@sentry/utils';\nimport * as domain from 'domain';\n\nimport { NodeOptions } from './backend';\nimport { NodeClient } from './client';\nimport { Console, Http, LinkedErrors, OnUncaughtException, OnUnhandledRejection } from './integrations';\n\nexport const defaultIntegrations = [\n  // Common\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  // Native Wrappers\n  new Console(),\n  new Http(),\n  // Global Handlers\n  new OnUncaughtException(),\n  new OnUnhandledRejection(),\n  // Misc\n  new LinkedErrors(),\n];\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\nexport function init(options: NodeOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const global = getGlobalObject<Window>();\n    // Prefer env var over global\n    if (process.env.SENTRY_RELEASE) {\n      options.release = process.env.SENTRY_RELEASE;\n    }\n    // This supports the variable that sentry-webpack-plugin injects\n    else if (global.SENTRY_RELEASE && global.SENTRY_RELEASE.id) {\n      options.release = global.SENTRY_RELEASE.id;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  if ((domain as any).active) {\n    setHubOnCarrier(getMainCarrier(), getCurrentHub());\n  }\n\n  initAndBind(NodeClient, options);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<NodeClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return Promise.reject(false);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}