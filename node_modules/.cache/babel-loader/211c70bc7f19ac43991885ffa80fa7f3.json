{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompilerDownloader = exports.CompilerPlatform = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst errors_1 = require(\"../../core/errors\");\n\nconst errors_list_1 = require(\"../../core/errors-list\");\n\nvar CompilerPlatform;\n\n(function (CompilerPlatform) {\n  CompilerPlatform[\"LINUX\"] = \"linux-amd64\";\n  CompilerPlatform[\"WINDOWS\"] = \"windows-amd64\";\n  CompilerPlatform[\"MACOS\"] = \"macosx-amd64\";\n  CompilerPlatform[\"WASM\"] = \"wasm\";\n})(CompilerPlatform = exports.CompilerPlatform || (exports.CompilerPlatform = {}));\n\nconst log = debug_1.default(\"hardhat:core:solidity:downloader\");\nconst COMPILER_FILES_DIR_URL_SOLC = \"https://binaries.soliditylang.org/\";\n\nasync function downloadFile(url, destinationFile) {\n  const {\n    download\n  } = await Promise.resolve().then(() => __importStar(require(\"../../util/download\")));\n  log(`Downloading from ${url} to ${destinationFile}`);\n  await download(url, destinationFile);\n}\n\nclass CompilerDownloader {\n  constructor(_compilersDir, options = {}) {\n    var _a, _b;\n\n    this._compilersDir = _compilersDir;\n    this._download = (_a = options.download) !== null && _a !== void 0 ? _a : downloadFile;\n    this._forceSolcJs = (_b = options.forceSolcJs) !== null && _b !== void 0 ? _b : false;\n  }\n\n  async isCompilerDownloaded(version) {\n    const compilerBuild = await this.getCompilerBuild(version);\n\n    const downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n    return this._fileExists(downloadedFilePath);\n  }\n\n  async verifyCompiler(compilerBuild, downloadedFilePath) {\n    const ethereumjsUtil = await Promise.resolve().then(() => __importStar(require(\"ethereumjs-util\")));\n    const expectedKeccak256 = compilerBuild.keccak256;\n    const compiler = await fs_extra_1.default.readFile(downloadedFilePath);\n    const compilerKeccak256 = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak(compiler));\n\n    if (expectedKeccak256 !== compilerKeccak256) {\n      await fs_extra_1.default.unlink(downloadedFilePath);\n      await fs_extra_1.default.unlink(this.getCompilersListPath(compilerBuild.platform));\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_DOWNLOAD, {\n        remoteVersion: compilerBuild.version\n      });\n    }\n  }\n\n  async getDownloadedCompilerPath(version) {\n    const {\n      default: AdmZip\n    } = await Promise.resolve().then(() => __importStar(require(\"adm-zip\")));\n\n    try {\n      const compilerBuild = await this.getCompilerBuild(version);\n\n      let downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n\n      if (!(await this._fileExists(downloadedFilePath))) {\n        await this.downloadCompiler(compilerBuild, downloadedFilePath);\n      }\n\n      await this.verifyCompiler(compilerBuild, downloadedFilePath);\n\n      if (compilerBuild.platform === CompilerPlatform.LINUX || compilerBuild.platform === CompilerPlatform.MACOS) {\n        fs_extra_1.default.chmodSync(downloadedFilePath, 0o755);\n      } else if (compilerBuild.platform === CompilerPlatform.WINDOWS) {\n        // some window builds are zipped, some are not\n        if (downloadedFilePath.endsWith(\".zip\")) {\n          const zip = new AdmZip(downloadedFilePath);\n          zip.extractAllTo(path_1.default.join(this._compilersDir, compilerBuild.version));\n          downloadedFilePath = path_1.default.join(this._compilersDir, compilerBuild.version, \"solc.exe\");\n        }\n      }\n\n      return {\n        compilerPath: downloadedFilePath,\n        platform: compilerBuild.platform\n      };\n    } catch (e) {\n      if (errors_1.HardhatError.isHardhatError(e)) {\n        throw e;\n      }\n\n      console.warn(chalk_1.default.yellow(`There was an unexpected problem downloading the compiler: ${e.message}`));\n    }\n  }\n\n  async getCompilersList(platform) {\n    if (!(await this.compilersListExists(platform))) {\n      await this.downloadCompilersList(platform);\n    }\n\n    return fs_extra_1.default.readJson(this.getCompilersListPath(platform));\n  }\n\n  async getCompilerBuild(version) {\n    const platform = this._getCurrentPlarform();\n\n    if (await this._versionExists(version, platform)) {\n      try {\n        return await this._getCompilerBuildByPlatform(version, platform);\n      } catch (e) {\n        log(\"Couldn't download native compiler, using solcjs instead\");\n      }\n    }\n\n    return this._getCompilerBuildByPlatform(version, CompilerPlatform.WASM);\n  }\n\n  async downloadCompilersList(platform) {\n    try {\n      await this._download(getCompilerListURL(platform), this.getCompilersListPath(platform));\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED, {}, error);\n    }\n  }\n\n  async downloadCompiler(compilerBuild, downloadedFilePath) {\n    log(`Downloading compiler version ${compilerBuild.version} platform ${compilerBuild.platform}`);\n    const compilerUrl = getCompilerURL(compilerBuild.platform, compilerBuild.path);\n\n    try {\n      await this._download(compilerUrl, downloadedFilePath);\n    } catch (error) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.DOWNLOAD_FAILED, {\n        remoteVersion: compilerBuild.version\n      }, error);\n    }\n  }\n\n  async compilersListExists(platform) {\n    return fs_extra_1.default.pathExists(this.getCompilersListPath(platform));\n  }\n\n  getCompilersListPath(platform) {\n    return path_1.default.join(this._compilersDir, platform, \"list.json\");\n  }\n\n  _getDownloadedFilePath(compilerBuild) {\n    return path_1.default.join(this._compilersDir, compilerBuild.platform, compilerBuild.path);\n  }\n\n  async _fetchVersionPath(version, platform) {\n    const compilersListExisted = await this.compilersListExists(platform);\n    let list = await this.getCompilersList(platform);\n    let compilerBuildPath = list.releases[version]; // We may need to re-download the compilers list.\n\n    if (compilerBuildPath === undefined && compilersListExisted) {\n      await fs_extra_1.default.unlink(this.getCompilersListPath(platform));\n      list = await this.getCompilersList(platform);\n      compilerBuildPath = list.releases[version];\n    }\n\n    return compilerBuildPath;\n  }\n\n  async _versionExists(version, platform) {\n    const versionPath = await this._fetchVersionPath(version, platform);\n    return versionPath !== undefined;\n  }\n\n  async _getCompilerBuildByPlatform(version, platform) {\n    const compilerBuildPath = await this._fetchVersionPath(version, platform);\n    const list = await this.getCompilersList(platform);\n    const compilerBuild = list.builds.find(b => b.path === compilerBuildPath);\n\n    if (compilerBuild === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_VERSION, {\n        version\n      });\n    }\n\n    compilerBuild.platform = platform;\n    return compilerBuild;\n  }\n\n  async _fileExists(filePath) {\n    return fs_extra_1.default.pathExists(filePath);\n  }\n\n  _getCurrentPlarform() {\n    if (this._forceSolcJs) {\n      return CompilerPlatform.WASM;\n    }\n\n    switch (os_1.default.platform()) {\n      case \"win32\":\n        return CompilerPlatform.WINDOWS;\n\n      case \"linux\":\n        return CompilerPlatform.LINUX;\n\n      case \"darwin\":\n        return CompilerPlatform.MACOS;\n\n      default:\n        return CompilerPlatform.WASM;\n    }\n  }\n\n}\n\nexports.CompilerDownloader = CompilerDownloader;\n\nfunction getCompilerURL(platform, filePath) {\n  return `${COMPILER_FILES_DIR_URL_SOLC}${platform}/${filePath}`;\n}\n\nfunction getCompilerListURL(platform) {\n  return getCompilerURL(platform, \"list.json\");\n}","map":{"version":3,"sources":["../../../src/internal/solidity/compiler/downloader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompilerDownloader = exports.CompilerPlatform = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst errors_1 = require(\"../../core/errors\");\nconst errors_list_1 = require(\"../../core/errors-list\");\nvar CompilerPlatform;\n(function (CompilerPlatform) {\n    CompilerPlatform[\"LINUX\"] = \"linux-amd64\";\n    CompilerPlatform[\"WINDOWS\"] = \"windows-amd64\";\n    CompilerPlatform[\"MACOS\"] = \"macosx-amd64\";\n    CompilerPlatform[\"WASM\"] = \"wasm\";\n})(CompilerPlatform = exports.CompilerPlatform || (exports.CompilerPlatform = {}));\nconst log = debug_1.default(\"hardhat:core:solidity:downloader\");\nconst COMPILER_FILES_DIR_URL_SOLC = \"https://binaries.soliditylang.org/\";\nasync function downloadFile(url, destinationFile) {\n    const { download } = await Promise.resolve().then(() => __importStar(require(\"../../util/download\")));\n    log(`Downloading from ${url} to ${destinationFile}`);\n    await download(url, destinationFile);\n}\nclass CompilerDownloader {\n    constructor(_compilersDir, options = {}) {\n        var _a, _b;\n        this._compilersDir = _compilersDir;\n        this._download = (_a = options.download) !== null && _a !== void 0 ? _a : downloadFile;\n        this._forceSolcJs = (_b = options.forceSolcJs) !== null && _b !== void 0 ? _b : false;\n    }\n    async isCompilerDownloaded(version) {\n        const compilerBuild = await this.getCompilerBuild(version);\n        const downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n        return this._fileExists(downloadedFilePath);\n    }\n    async verifyCompiler(compilerBuild, downloadedFilePath) {\n        const ethereumjsUtil = await Promise.resolve().then(() => __importStar(require(\"ethereumjs-util\")));\n        const expectedKeccak256 = compilerBuild.keccak256;\n        const compiler = await fs_extra_1.default.readFile(downloadedFilePath);\n        const compilerKeccak256 = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak(compiler));\n        if (expectedKeccak256 !== compilerKeccak256) {\n            await fs_extra_1.default.unlink(downloadedFilePath);\n            await fs_extra_1.default.unlink(this.getCompilersListPath(compilerBuild.platform));\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_DOWNLOAD, {\n                remoteVersion: compilerBuild.version,\n            });\n        }\n    }\n    async getDownloadedCompilerPath(version) {\n        const { default: AdmZip } = await Promise.resolve().then(() => __importStar(require(\"adm-zip\")));\n        try {\n            const compilerBuild = await this.getCompilerBuild(version);\n            let downloadedFilePath = this._getDownloadedFilePath(compilerBuild);\n            if (!(await this._fileExists(downloadedFilePath))) {\n                await this.downloadCompiler(compilerBuild, downloadedFilePath);\n            }\n            await this.verifyCompiler(compilerBuild, downloadedFilePath);\n            if (compilerBuild.platform === CompilerPlatform.LINUX ||\n                compilerBuild.platform === CompilerPlatform.MACOS) {\n                fs_extra_1.default.chmodSync(downloadedFilePath, 0o755);\n            }\n            else if (compilerBuild.platform === CompilerPlatform.WINDOWS) {\n                // some window builds are zipped, some are not\n                if (downloadedFilePath.endsWith(\".zip\")) {\n                    const zip = new AdmZip(downloadedFilePath);\n                    zip.extractAllTo(path_1.default.join(this._compilersDir, compilerBuild.version));\n                    downloadedFilePath = path_1.default.join(this._compilersDir, compilerBuild.version, \"solc.exe\");\n                }\n            }\n            return {\n                compilerPath: downloadedFilePath,\n                platform: compilerBuild.platform,\n            };\n        }\n        catch (e) {\n            if (errors_1.HardhatError.isHardhatError(e)) {\n                throw e;\n            }\n            console.warn(chalk_1.default.yellow(`There was an unexpected problem downloading the compiler: ${e.message}`));\n        }\n    }\n    async getCompilersList(platform) {\n        if (!(await this.compilersListExists(platform))) {\n            await this.downloadCompilersList(platform);\n        }\n        return fs_extra_1.default.readJson(this.getCompilersListPath(platform));\n    }\n    async getCompilerBuild(version) {\n        const platform = this._getCurrentPlarform();\n        if (await this._versionExists(version, platform)) {\n            try {\n                return await this._getCompilerBuildByPlatform(version, platform);\n            }\n            catch (e) {\n                log(\"Couldn't download native compiler, using solcjs instead\");\n            }\n        }\n        return this._getCompilerBuildByPlatform(version, CompilerPlatform.WASM);\n    }\n    async downloadCompilersList(platform) {\n        try {\n            await this._download(getCompilerListURL(platform), this.getCompilersListPath(platform));\n        }\n        catch (error) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED, {}, error);\n        }\n    }\n    async downloadCompiler(compilerBuild, downloadedFilePath) {\n        log(`Downloading compiler version ${compilerBuild.version} platform ${compilerBuild.platform}`);\n        const compilerUrl = getCompilerURL(compilerBuild.platform, compilerBuild.path);\n        try {\n            await this._download(compilerUrl, downloadedFilePath);\n        }\n        catch (error) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.DOWNLOAD_FAILED, {\n                remoteVersion: compilerBuild.version,\n            }, error);\n        }\n    }\n    async compilersListExists(platform) {\n        return fs_extra_1.default.pathExists(this.getCompilersListPath(platform));\n    }\n    getCompilersListPath(platform) {\n        return path_1.default.join(this._compilersDir, platform, \"list.json\");\n    }\n    _getDownloadedFilePath(compilerBuild) {\n        return path_1.default.join(this._compilersDir, compilerBuild.platform, compilerBuild.path);\n    }\n    async _fetchVersionPath(version, platform) {\n        const compilersListExisted = await this.compilersListExists(platform);\n        let list = await this.getCompilersList(platform);\n        let compilerBuildPath = list.releases[version];\n        // We may need to re-download the compilers list.\n        if (compilerBuildPath === undefined && compilersListExisted) {\n            await fs_extra_1.default.unlink(this.getCompilersListPath(platform));\n            list = await this.getCompilersList(platform);\n            compilerBuildPath = list.releases[version];\n        }\n        return compilerBuildPath;\n    }\n    async _versionExists(version, platform) {\n        const versionPath = await this._fetchVersionPath(version, platform);\n        return versionPath !== undefined;\n    }\n    async _getCompilerBuildByPlatform(version, platform) {\n        const compilerBuildPath = await this._fetchVersionPath(version, platform);\n        const list = await this.getCompilersList(platform);\n        const compilerBuild = list.builds.find((b) => b.path === compilerBuildPath);\n        if (compilerBuild === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_VERSION, { version });\n        }\n        compilerBuild.platform = platform;\n        return compilerBuild;\n    }\n    async _fileExists(filePath) {\n        return fs_extra_1.default.pathExists(filePath);\n    }\n    _getCurrentPlarform() {\n        if (this._forceSolcJs) {\n            return CompilerPlatform.WASM;\n        }\n        switch (os_1.default.platform()) {\n            case \"win32\":\n                return CompilerPlatform.WINDOWS;\n            case \"linux\":\n                return CompilerPlatform.LINUX;\n            case \"darwin\":\n                return CompilerPlatform.MACOS;\n            default:\n                return CompilerPlatform.WASM;\n        }\n    }\n}\nexports.CompilerDownloader = CompilerDownloader;\nfunction getCompilerURL(platform, filePath) {\n    return `${COMPILER_FILES_DIR_URL_SOLC}${platform}/${filePath}`;\n}\nfunction getCompilerListURL(platform) {\n    return getCompilerURL(platform, \"list.json\");\n}\n//# sourceMappingURL=downloader.js.map"]},"metadata":{},"sourceType":"script"}