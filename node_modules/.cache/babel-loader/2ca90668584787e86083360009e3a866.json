{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRunningOnCiServer = void 0;\n\nconst ci_info_1 = __importDefault(require(\"ci-info\"));\n\nconst os_1 = __importDefault(require(\"os\")); // This has been tested in:\n//   - Travis CI\n//   - Circle CI\n//   - GitHub Actions\n//   - Azure Pipelines\n//\n// This should also work in this CI providers because they set process.env.CI:\n//   - AppVeyor\n//   - Bitbucket Pipelines\n//   - GitLab CI\n//\n// This should also work:\n//   - AWS CodeBuild -- Special case\n//   - Jenkins -- Using process.env.BUILD_NUMBER\n//   - ZEIT Now -- Special case\n\n\nfunction isRunningOnCiServer() {\n  return ci_info_1.default.isCI || isGithubActions() || isLinuxWithoutDisplayServer() || isNow() || isAwsCodeBuild();\n}\n\nexports.isRunningOnCiServer = isRunningOnCiServer;\n\nfunction isGithubActions() {\n  return process.env.GITHUB_ACTIONS !== undefined;\n}\n\nfunction isLinuxWithoutDisplayServer() {\n  if (os_1.default.type() !== \"Linux\") {\n    return false;\n  }\n\n  if (process.env.DISPLAY !== undefined) {\n    return false;\n  }\n\n  if (process.env.WAYLAND_DISPLAY !== undefined) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isNow() {\n  return process.env.NOW !== undefined || process.env.DEPLOYMENT_ID !== undefined;\n}\n\nfunction isAwsCodeBuild() {\n  return process.env.CODEBUILD_BUILD_NUMBER !== undefined;\n}","map":{"version":3,"sources":["../../src/internal/util/ci-detection.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,MAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAgB,mBAAhB,GAAmC;AACjC,SACE,SAAA,CAAA,OAAA,CAAG,IAAH,IACA,eAAe,EADf,IAEA,2BAA2B,EAF3B,IAGA,KAAK,EAHL,IAIA,cAAc,EALhB;AAOD;;AARD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAUA,SAAS,eAAT,GAAwB;AACtB,SAAO,OAAO,CAAC,GAAR,CAAY,cAAZ,KAA+B,SAAtC;AACD;;AAED,SAAS,2BAAT,GAAoC;AAClC,MAAI,IAAA,CAAA,OAAA,CAAG,IAAH,OAAc,OAAlB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,MAAI,OAAO,CAAC,GAAR,CAAY,OAAZ,KAAwB,SAA5B,EAAuC;AACrC,WAAO,KAAP;AACD;;AAED,MAAI,OAAO,CAAC,GAAR,CAAY,eAAZ,KAAgC,SAApC,EAA+C;AAC7C,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAAS,KAAT,GAAc;AACZ,SACE,OAAO,CAAC,GAAR,CAAY,GAAZ,KAAoB,SAApB,IAAiC,OAAO,CAAC,GAAR,CAAY,aAAZ,KAA8B,SADjE;AAGD;;AAED,SAAS,cAAT,GAAuB;AACrB,SAAO,OAAO,CAAC,GAAR,CAAY,sBAAZ,KAAuC,SAA9C;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isRunningOnCiServer = void 0;\nconst ci_info_1 = __importDefault(require(\"ci-info\"));\nconst os_1 = __importDefault(require(\"os\"));\n// This has been tested in:\n//   - Travis CI\n//   - Circle CI\n//   - GitHub Actions\n//   - Azure Pipelines\n//\n// This should also work in this CI providers because they set process.env.CI:\n//   - AppVeyor\n//   - Bitbucket Pipelines\n//   - GitLab CI\n//\n// This should also work:\n//   - AWS CodeBuild -- Special case\n//   - Jenkins -- Using process.env.BUILD_NUMBER\n//   - ZEIT Now -- Special case\nfunction isRunningOnCiServer() {\n    return (ci_info_1.default.isCI ||\n        isGithubActions() ||\n        isLinuxWithoutDisplayServer() ||\n        isNow() ||\n        isAwsCodeBuild());\n}\nexports.isRunningOnCiServer = isRunningOnCiServer;\nfunction isGithubActions() {\n    return process.env.GITHUB_ACTIONS !== undefined;\n}\nfunction isLinuxWithoutDisplayServer() {\n    if (os_1.default.type() !== \"Linux\") {\n        return false;\n    }\n    if (process.env.DISPLAY !== undefined) {\n        return false;\n    }\n    if (process.env.WAYLAND_DISPLAY !== undefined) {\n        return false;\n    }\n    return true;\n}\nfunction isNow() {\n    return (process.env.NOW !== undefined || process.env.DEPLOYMENT_ID !== undefined);\n}\nfunction isAwsCodeBuild() {\n    return process.env.CODEBUILD_BUILD_NUMBER !== undefined;\n}\n//# sourceMappingURL=ci-detection.js.map"]},"metadata":{},"sourceType":"script"}