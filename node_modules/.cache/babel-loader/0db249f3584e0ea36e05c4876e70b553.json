{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\3SAT_Instance_Generator\\\\3SAT_Instance_Generator\\\\src\\\\components\\\\SubPages\\\\HowItWorks.js\";\nimport { Container, Wrap, NewH1, NewH2, NewP, NewLinkWithoutline, Img } from \"./SubpagesElements\";\nimport devImg from 'images/development.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HowItWorks = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Wrap, {\n      children: [/*#__PURE__*/_jsxDEV(NewH1, {\n        children: \"Preparing the environment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"Decentralised applications do not work in the same way as traditional web applications. For this reason, before explaining how this instance generator works, we need to take a few simple steps that will only take a few minutes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Img, {\n        alt: \"dev\",\n        src: devImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewH2, {\n        children: /*#__PURE__*/_jsxDEV(NewLinkWithoutline, {\n          href: \"https://hardhat.org/\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Hardhat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: [\"First of all, we need to install a wallet with which we can make transactions to the blockchain. In our case we use Metamask, which is just a plugin available for Chrome, Brave and some other browsers. If this is the first time we use Metamask, we must select the option \\\"Create a wallet\\\". After creating a password and completing the secret backup phrase, we will see that our wallet will be ready to trade and connected to the main Ethereum network, albeit with 0 ethers. The first thing we are going to do is connect to the Kovan test network, which is where our smart contract is deployed. To do this, we select the drop-down menu of the main network and click on \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Show/hide test networks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 95\n        }, this), \". Then, we activate the option \\\"Show test networks\\\" and we will see how the different test networks appear, where we have to click on the Kovan test network. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HowItWorks;\nexport default HowItWorks;\n\nvar _c;\n\n$RefreshReg$(_c, \"HowItWorks\");","map":{"version":3,"sources":["C:/Users/Jonathan/3SAT_Instance_Generator/3SAT_Instance_Generator/src/components/SubPages/HowItWorks.js"],"names":["Container","Wrap","NewH1","NewH2","NewP","NewLinkWithoutline","Img","devImg","HowItWorks"],"mappings":";AAAA,SACIA,SADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMCC,kBAND,EAOIC,GAPJ,QAQO,oBARP;AAUA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,sBACI,QAAC,SAAD;AAAA,2BACI,QAAC,IAAD;AAAA,8BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAER,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFQ,eAGR,QAAC,GAAD;AAAK,QAAA,GAAG,EAAC,KAAT;AAAe,QAAA,GAAG,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,cAHQ,eAKR,QAAC,KAAD;AAAA,+BACC,QAAC,kBAAD;AAAoB,UAAA,IAAI,EAAC,sBAAzB;AAAgD,UAAA,MAAM,EAAC,QAAvD;AAAgE,UAAA,GAAG,EAAC,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cALQ,eASR,QAAC,IAAD;AAAA,ksBAE0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF1F;AAAA;AAAA;AAAA;AAAA;AAAA,cATQ,eAYI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAZJ,eAaI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAbJ,eAcI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAdJ,eAeI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAfJ,eAgBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAiBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAkBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAlBJ,eAmBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAnBJ,eAoBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cApBJ,eAqBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cArBJ,eAsBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAtBJ,eAuBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAvBJ,eAwBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAxBJ,eAyBI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAzBJ,eA0BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA2BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA4BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA5BJ,eA6BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA7BJ,eA8BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA9BJ,eA+BI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cA/BJ,eAgCI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAhCJ,eAiCI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAuCH,CAxCD;;KAAMC,U;AA0CN,eAAeA,UAAf","sourcesContent":["import {\n    Container,\n    Wrap,\n    NewH1,\n    NewH2,\n    NewP,\n\tNewLinkWithoutline,\n    Img\n} from \"./SubpagesElements\";\n\nimport devImg from 'images/development.png';\n\nconst HowItWorks = () => {\n    return (\n        <Container>\n            <Wrap>\n                <NewH1>Preparing the environment</NewH1>\n\t\t\t\t<NewP>Decentralised applications do not work in the same way as traditional web applications. For this reason, before explaining how this instance generator works, we need to take a few simple steps that will only take a few minutes.</NewP>\n\t\t\t\t<Img alt=\"dev\" src={devImg}></Img>\n\n\t\t\t\t<NewH2>\n\t\t\t\t\t<NewLinkWithoutline href=\"https://hardhat.org/\" target=\"_blank\" rel=\"noreferrer\">Hardhat</NewLinkWithoutline>\n\t\t\t\t</NewH2>\n\t\t\t\n\t\t\t\t<NewP>First of all, we need to install a wallet with which we can make transactions to the blockchain. In our case we use Metamask, which is just a plugin available for Chrome, Brave and some other browsers. If this is the first time we use Metamask, we must select the option \"Create a wallet\". \n                    After creating a password and completing the secret backup phrase, we will see that our wallet will be ready to trade and connected to the main Ethereum network, albeit with 0 ethers. The first thing we are going to do is connect to the Kovan test network, which is where our smart contract is deployed. \n                    To do this, we select the drop-down menu of the main network and click on <b>Show/hide test networks</b>. Then, we activate the option \"Show test networks\" and we will see how the different test networks appear, where we have to click on the Kovan test network. </NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n            </Wrap>\n        </Container>\n    );\n}\n\nexport default HowItWorks;"]},"metadata":{},"sourceType":"module"}