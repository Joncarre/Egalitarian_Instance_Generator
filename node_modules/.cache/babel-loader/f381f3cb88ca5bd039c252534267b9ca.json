{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst context_1 = require(\"../context\");\n\nconst config_loading_1 = require(\"../core/config/config-loading\");\n\nconst errors_1 = require(\"../core/errors\");\n\nconst errors_list_1 = require(\"../core/errors-list\");\n\nconst env_variables_1 = require(\"../core/params/env-variables\");\n\nconst hardhat_params_1 = require(\"../core/params/hardhat-params\");\n\nconst runtime_environment_1 = require(\"../core/runtime-environment\");\n\nconst antlr_prototype_pollution_workaround_1 = require(\"../util/antlr-prototype-pollution-workaround\");\n\nlet ctx;\nlet env;\nantlr_prototype_pollution_workaround_1.applyWorkaround();\n\nif (context_1.HardhatContext.isCreated()) {\n  ctx = context_1.HardhatContext.getHardhatContext(); // The most probable reason for this to happen is that this file was imported\n  // from the config file\n\n  if (ctx.environment === undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.LIB_IMPORTED_FROM_THE_CONFIG);\n  }\n\n  env = ctx.environment;\n} else {\n  ctx = context_1.HardhatContext.createHardhatContext();\n  const hardhatArguments = env_variables_1.getEnvHardhatArguments(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS, process.env);\n\n  if (hardhatArguments.verbose) {\n    debug_1.default.enable(\"hardhat*\");\n  }\n\n  const config = config_loading_1.loadConfigAndTasks(hardhatArguments);\n  env = new runtime_environment_1.Environment(config, hardhatArguments, ctx.tasksDSL.getTaskDefinitions(), ctx.extendersManager.getExtenders(), ctx.experimentalHardhatNetworkMessageTraceHooks);\n  ctx.setHardhatRuntimeEnvironment(env);\n}\n\nmodule.exports = env;","map":{"version":3,"sources":["../../src/internal/lib/hardhat-lib.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,MAAA,sCAAA,GAAA,OAAA,CAAA,8CAAA,CAAA;;AAEA,IAAI,GAAJ;AACA,IAAI,GAAJ;AAEA,sCAAA,CAAA,eAAA;;AAEA,IAAI,SAAA,CAAA,cAAA,CAAe,SAAf,EAAJ,EAAgC;AAC9B,EAAA,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAN,CAD8B,CAG9B;AACA;;AACA,MAAI,GAAG,CAAC,WAAJ,KAAoB,SAAxB,EAAmC;AACjC,UAAM,IAAI,QAAA,CAAA,YAAJ,CAAiB,aAAA,CAAA,MAAA,CAAO,OAAP,CAAe,4BAAhC,CAAN;AACD;;AAED,EAAA,GAAG,GAAG,GAAG,CAAC,WAAV;AACD,CAVD,MAUO;AACL,EAAA,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,oBAAf,EAAN;AAEA,QAAM,gBAAgB,GAAG,eAAA,CAAA,sBAAA,CACvB,gBAAA,CAAA,yBADuB,EAEvB,OAAO,CAAC,GAFe,CAAzB;;AAKA,MAAI,gBAAgB,CAAC,OAArB,EAA8B;AAC5B,IAAA,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa,UAAb;AACD;;AAED,QAAM,MAAM,GAAG,gBAAA,CAAA,kBAAA,CAAmB,gBAAnB,CAAf;AAEA,EAAA,GAAG,GAAG,IAAI,qBAAA,CAAA,WAAJ,CACJ,MADI,EAEJ,gBAFI,EAGJ,GAAG,CAAC,QAAJ,CAAa,kBAAb,EAHI,EAIJ,GAAG,CAAC,gBAAJ,CAAqB,YAArB,EAJI,EAKJ,GAAG,CAAC,2CALA,CAAN;AAQA,EAAA,GAAG,CAAC,4BAAJ,CAAiC,GAAjC;AACD;;AAED,MAAA,CAAA,OAAA,GAAS,GAAT","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst debug_1 = __importDefault(require(\"debug\"));\nconst context_1 = require(\"../context\");\nconst config_loading_1 = require(\"../core/config/config-loading\");\nconst errors_1 = require(\"../core/errors\");\nconst errors_list_1 = require(\"../core/errors-list\");\nconst env_variables_1 = require(\"../core/params/env-variables\");\nconst hardhat_params_1 = require(\"../core/params/hardhat-params\");\nconst runtime_environment_1 = require(\"../core/runtime-environment\");\nconst antlr_prototype_pollution_workaround_1 = require(\"../util/antlr-prototype-pollution-workaround\");\nlet ctx;\nlet env;\nantlr_prototype_pollution_workaround_1.applyWorkaround();\nif (context_1.HardhatContext.isCreated()) {\n    ctx = context_1.HardhatContext.getHardhatContext();\n    // The most probable reason for this to happen is that this file was imported\n    // from the config file\n    if (ctx.environment === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.LIB_IMPORTED_FROM_THE_CONFIG);\n    }\n    env = ctx.environment;\n}\nelse {\n    ctx = context_1.HardhatContext.createHardhatContext();\n    const hardhatArguments = env_variables_1.getEnvHardhatArguments(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS, process.env);\n    if (hardhatArguments.verbose) {\n        debug_1.default.enable(\"hardhat*\");\n    }\n    const config = config_loading_1.loadConfigAndTasks(hardhatArguments);\n    env = new runtime_environment_1.Environment(config, hardhatArguments, ctx.tasksDSL.getTaskDefinitions(), ctx.extendersManager.getExtenders(), ctx.experimentalHardhatNetworkMessageTraceHooks);\n    ctx.setHardhatRuntimeEnvironment(env);\n}\nmodule.exports = env;\n//# sourceMappingURL=hardhat-lib.js.map"]},"metadata":{},"sourceType":"script"}