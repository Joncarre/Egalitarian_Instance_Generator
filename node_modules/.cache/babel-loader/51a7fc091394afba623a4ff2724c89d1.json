{"ast":null,"code":"const clausesLength = 3; // Builds the instance(s) into a friendly way\n\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: arr[i][0],\n      chain: buildChain(arr[i][1]),\n      size: arr[i][2],\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6])\n    };\n    result.push(info);\n  }\n\n  return result;\n} // Builds the chain as a string\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n} // Converts a hexadecimal number to decimal number\n\n\nfunction hexToDecimal(_hexNumber) {\n  console.log(\"Before: \" + _hexNumber);\n  let number = parseInt(_hexNumber, 16);\n  console.log(\"After: \" + number);\n  return number;\n} // Builds the date as date format\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n} // Returns 'true' or 'false' with 50% probability\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n} // Builds an array of date as date format\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Desktop/DApp Versiones/my_v9/Generator-DApp/src/components/UserSection/supportFunctions.js"],"names":["clausesLength","buildInstance","arr","result","i","length","info","id","chain","buildChain","size","created","buildDate","solution","solved","ended","push","_oldChain","array","Array","from","Math","random","shift","hexToDecimal","_hexNumber","console","log","number","parseInt","_oldDate","newDate","Date","_hex","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","buildDateArray","_arrayRandoms"],"mappings":"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","sourcesContent":["const clausesLength = 3;\r\n\r\n// Builds the instance(s) into a friendly way\r\nexport function buildInstance(arr) {\r\n    let result = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let info = {\r\n            id: arr[i][0],\r\n            chain: buildChain(arr[i][1]),\r\n            size: arr[i][2],\r\n            created: buildDate(arr[i][3]),\r\n            solution: arr[i][4],\r\n            solved: arr[i][5],\r\n            ended: buildDate(arr[i][6])\r\n        };\r\n        result.push(info);\r\n    }\r\n    return result;\r\n}\r\n\r\n// Builds the chain as a string\r\nfunction buildChain(_oldChain) {\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while (array.length > 1) {\r\n        result += \"(\";\r\n        for (let i = 0; i < clausesLength; i++) {\r\n            if (Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if (i < clausesLength - 1)\r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if (array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n// Converts a hexadecimal number to decimal number\r\nfunction hexToDecimal(_hexNumber) {\r\n    console.log(\"Before: \" + _hexNumber);\r\n    let number = parseInt(_hexNumber, 16);\r\n    console.log(\"After: \" + number);\r\n    return number;\r\n}\r\n\r\n// Builds the date as date format\r\nfunction buildDate(_oldDate) {\r\n    let result, newDate;\r\n    if (hexToDecimal(_oldDate) !== 0) {\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\r\n        result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    } else\r\n        result = \"Date unavailable\";\r\n    return result;\r\n}\r\n\r\n// Returns 'true' or 'false' with 50% probability\r\nfunction getBoolean() {\r\n    if (Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\n// Builds an array of date as date format\r\nexport function buildDateArray(_arrayRandoms) {\r\n    let result = [];\r\n    for (let i = 0; i < _arrayRandoms.length; i++)\r\n        result.push(buildDate(_arrayRandoms[i]));\r\n    return result;\r\n} "]},"metadata":{},"sourceType":"module"}