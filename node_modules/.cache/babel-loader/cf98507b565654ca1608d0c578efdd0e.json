{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { NodeBackend } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\n\nvar NodeClient =\n/** @class */\nfunction (_super) {\n  __extends(NodeClient, _super);\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n\n\n  function NodeClient(options) {\n    return _super.call(this, NodeBackend, options) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  NodeClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'node';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/node',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n\n  return NodeClient;\n}(BaseClient);\n\nexport { NodeClient };","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAAkC,cAAlC;AAGA,SAAS,WAAT,QAAyC,WAAzC;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,WAAtC;AAEA;;;;;AAKG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AAC9B;;;AAGG;;;AACH,WAAA,UAAA,CAAmB,OAAnB,EAAuC;WACrC,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,EAAmB,OAAnB,KAA2B,I;AAC5B;AAED;;AAEG;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAsC,KAAtC,EAAqD,IAArD,EAAqE;AACnE,IAAA,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,QAAN,IAAkB,MAAnC;AACA,IAAA,KAAK,CAAC,GAAN,GAAS,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,KAAK,CAAC,GADF,CAAA,EACK;AACZ,MAAA,IAAI,EAAE,QADM;AAEZ,MAAA,QAAQ,EAAA,QAAA,CACD,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,GAAN,CAAU,QAAxB,IAAqC,EADnC,EACsC,CAC5C;AACE,QAAA,IAAI,EAAE,kBADR;AAEE,QAAA,OAAO,EAAE;AAFX,OAD4C,CADtC,CAFI;AASZ,MAAA,OAAO,EAAE;AATG,KADL,CAAT;;AAaA,QAAI,KAAK,UAAL,GAAkB,UAAtB,EAAkC;AAChC,MAAA,KAAK,CAAC,WAAN,GAAoB,KAAK,UAAL,GAAkB,UAAtC;AACD;;AAED,WAAO,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,IAAlC,CAAP;AACD,GApBS;;AAqBZ,SAAA,UAAA;AAAC,CAjCD,CAAgC,UAAhC,CAAA","sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\n\nimport { NodeBackend, NodeOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeOptions) {\n    super(NodeBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'node';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/node',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    if (this.getOptions().serverName) {\n      event.server_name = this.getOptions().serverName;\n    }\n\n    return super._prepareEvent(event, scope, hint);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}