{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w10te\\\\Documents\\\\dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json';\nimport Moment from 'react-moment'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatorAddress = \"0x4b4Ad00020cbC32033db33859343596aDb621c06\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state\n  const [data, setData] = useState(0);\n  const [user, setUser] = useState(0); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function async_solveLastInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.solveLastInstance(data);\n      await transaction.wait();\n    }\n  }\n\n  async function async_regResearcher() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.regResearcher(user);\n      await transaction.wait();\n    }\n  } // -----------------------------------------\n\n\n  async function async_createInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createInstance({\n        gasLimit: 10000000\n      });\n      await transaction.wait();\n    }\n  }\n\n  async function async_getInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getInstance();\n        let startDate = new Date(parseInt(result[2]._hex.slice(2), 16) * 1000);\n        let endDate = new Date(parseInt(result[4]._hex.slice(2), 16) * 1000);\n        let arrayString = [result[0]._hex.slice(2), result[1], startDate.getFullYear() + \"/\" + startDate.getMonth() + \"/\" + startDate.getDate() + \" \" + startDate.getHours() + \":\" + startDate.getMinutes() + \":\" + startDate.getSeconds(), result[3], endDate.getFullYear() + \"/\" + endDate.getMonth() + \"/\" + endDate.getDate() + \" \" + endDate.getHours() + \":\" + endDate.getMinutes() + \":\" + endDate.getSeconds()];\n        setData(arrayString);\n        console.log(arrayString);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  function getDate() {\n    const date = new Date(parseInt(\"1635119135\", 16) * 1000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Researcher information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async_regResearcher,\n      children: \"Set orcid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setUser(e.target.value),\n      placeholder: \"orcid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Instance information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async_createInstance,\n      children: \"Create instance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async_getInstance,\n      children: \"Get instance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async_solveLastInstance,\n      children: \"Set hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lnrUU/J5+2UgYTqR6g10yTGCzu0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/w10te/Documents/dapp/src/App.js"],"names":["useState","ethers","Generator","Moment","generatorAddress","App","data","setData","user","setUser","requestAccount","window","ethereum","request","method","async_solveLastInstance","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","solveLastInstance","wait","async_regResearcher","regResearcher","async_createInstance","createInstance","gasLimit","async_getInstance","result","connect","getInstance","startDate","Date","parseInt","_hex","slice","endDate","arrayString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","console","log","err","date","e","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'\nimport Moment from 'react-moment'\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0x4b4Ad00020cbC32033db33859343596aDb621c06\"\n\nfunction App() {\n  // store greeting in local state\n  const [data, setData] = useState(0)\n  const [user, setUser] = useState(0)\n\n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n    async function async_solveLastInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.solveLastInstance(data)\n        await transaction.wait()\n      }\n    }\n\n    async function async_regResearcher() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.regResearcher(user)\n        await transaction.wait()\n      }\n    }\n\n    // -----------------------------------------\n    async function async_createInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.createInstance({\n          gasLimit: 10000000\n        })\n        await transaction.wait()\n      }\n    }\n\n    async function async_getInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getInstance()\n          let startDate = new Date(parseInt(result[2]._hex.slice(2), 16)*1000);\n          let endDate = new Date(parseInt(result[4]._hex.slice(2), 16)*1000);         \n\n          let arrayString = [\n            result[0]._hex.slice(2), \n            result[1], \n            startDate.getFullYear() + \"/\" + startDate.getMonth() + \"/\" + startDate.getDate()  + \" \" + startDate.getHours() + \":\" + startDate.getMinutes() + \":\" + startDate.getSeconds(),\n            result[3], \n            endDate.getFullYear() + \"/\" + endDate.getMonth() + \"/\" + endDate.getDate()  + \" \" + endDate.getHours() + \":\" + endDate.getMinutes() + \":\" + endDate.getSeconds()\n          ]\n          setData(arrayString)\n          console.log(arrayString)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n    function getDate(){\n      const date = new Date(parseInt(\"1635119135\", 16)*1000);\n    }\n\n  return (\n    <div className=\"App\">\n      <h5>Researcher information</h5>\n      <button onClick={async_regResearcher}>Set orcid</button>\n      <input onChange={e => setUser(e.target.value)} placeholder=\"orcid\" />\n      <h5>Instance information</h5>\n      <button onClick={async_createInstance}>Create instance</button>\n      <button onClick={async_getInstance}>Get instance</button>\n      <button onClick={async_solveLastInstance}>Set hash</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}