{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable max-lines */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData } from '@sentry/tracing';\nimport { extractNodeRequestData, forget, isPlainObject, isString, logger, stripUrlQueryAndFragment } from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as os from 'os';\nimport { flush } from './sdk';\nvar DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\n\nexport function tracingHandler() {\n  return function sentryTracingMiddleware(req, res, next) {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    var traceparentData;\n\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace']);\n    }\n\n    var transaction = startTransaction(__assign({\n      name: extractExpressTransactionName(req, {\n        path: true,\n        method: true\n      }),\n      op: 'http.server'\n    }, traceparentData)); // We put the transaction on the scope so users can attach children to it\n\n    getCurrentHub().configureScope(function (scope) {\n      scope.setSpan(transaction);\n    }); // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    res.__sentry_transaction = transaction;\n    res.once('finish', function () {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(function () {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n    next();\n  };\n}\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\n\nfunction addExpressReqToTransaction(transaction, req) {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, {\n    path: true,\n    method: true\n  });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\n\n\nfunction extractExpressTransactionName(req, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a;\n\n  var method = (_a = req.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n  var path = '';\n\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = \"\" + req.baseUrl + req.route.path;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  var info = '';\n\n  if (options.method && method) {\n    info += method;\n  }\n\n  if (options.method && options.path) {\n    info += \" \";\n  }\n\n  if (options.path && path) {\n    info += path;\n  }\n\n  return info;\n}\n/** JSDoc */\n\n\nfunction extractTransaction(req, type) {\n  var _a;\n\n  switch (type) {\n    case 'path':\n      {\n        return extractExpressTransactionName(req, {\n          path: true\n        });\n      }\n\n    case 'handler':\n      {\n        return ((_a = req.route) === null || _a === void 0 ? void 0 : _a.stack[0].name) || '<anonymous>';\n      }\n\n    case 'methodPath':\n    default:\n      {\n        return extractExpressTransactionName(req, {\n          path: true,\n          method: true\n        });\n      }\n  }\n}\n/** Default user keys that'll be used to extract data from the request */\n\n\nvar DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n/** JSDoc */\n\nfunction extractUserData(user, keys) {\n  var extractedUser = {};\n  var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n  attributes.forEach(function (key) {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\n\n\nexport function parseRequest(event, req, options) {\n  // eslint-disable-next-line no-param-reassign\n  options = __assign({\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true\n  }, options);\n\n  if (options.version) {\n    event.contexts = __assign(__assign({}, event.contexts), {\n      runtime: {\n        name: 'node',\n        version: global.process.version\n      }\n    });\n  }\n\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    var extractedRequestData = Array.isArray(options.request) ? extractNodeRequestData(req, options.request) : extractNodeRequestData(req);\n    event.request = __assign(__assign({}, event.request), extractedRequestData);\n  }\n\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user) {\n    var extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n\n    if (Object.keys(extractedUser)) {\n      event.user = __assign(__assign({}, event.user), extractedUser);\n    }\n  } // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n\n\n  if (options.ip) {\n    var ip = req.ip || req.connection && req.connection.remoteAddress;\n\n    if (ip) {\n      event.user = __assign(__assign({}, event.user), {\n        ip_address: ip\n      });\n    }\n  }\n\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n\n  return event;\n}\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\n\nexport function requestHandler(options) {\n  return function sentryRequestMiddleware(req, res, next) {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      var _end_1 = res.end;\n\n      res.end = function (chunk, encoding, cb) {\n        var _this = this;\n\n        flush(options.flushTimeout).then(function () {\n          _end_1.call(_this, chunk, encoding, cb);\n        }).then(null, function (e) {\n          logger.error(e);\n        });\n      };\n    }\n\n    var local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(function () {\n      getCurrentHub().configureScope(function (scope) {\n        return scope.addEventProcessor(function (event) {\n          return parseRequest(event, req, options);\n        });\n      });\n      next();\n    });\n  };\n}\n/** JSDoc */\n\nfunction getStatusCodeFromResponse(error) {\n  var statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;\n  return statusCode ? parseInt(statusCode, 10) : 500;\n}\n/** Returns true if response code is internal server error */\n\n\nfunction defaultShouldHandleError(error) {\n  var status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\n\n\nexport function errorHandler(options) {\n  return function sentryErrorMiddleware(error, _req, res, next) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var shouldHandleError = options && options.shouldHandleError || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(function (_scope) {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        var transaction = res.__sentry_transaction;\n\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n\n        var eventId = captureException(error); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        res.sentry = eventId;\n        next(error);\n      });\n      return;\n    }\n\n    next(error);\n  };\n}\n/**\n * @hidden\n */\n\nexport function logAndExitProcess(error) {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n  var client = getCurrentHub().getClient();\n\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  var options = client.getOptions();\n  var timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(client.close(timeout).then(function (result) {\n    if (!result) {\n      logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n    }\n\n    global.process.exit(1);\n  }));\n}","map":{"version":3,"sources":["../src/handlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData, Span } from '@sentry/tracing';\nimport { Event, Transaction } from '@sentry/types';\nimport {\n  extractNodeRequestData,\n  forget,\n  isPlainObject,\n  isString,\n  logger,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as http from 'http';\nimport * as os from 'os';\n\nimport { NodeClient } from './client';\nimport { flush } from './sdk';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\nexport interface ExpressRequest extends http.IncomingMessage {\n  [key: string]: any;\n  baseUrl?: string;\n  ip?: string;\n  originalUrl?: string;\n  route?: {\n    path: string;\n    stack: [\n      {\n        name: string;\n      },\n    ];\n  };\n  user?: {\n    [key: string]: any;\n  };\n}\n\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nexport function tracingHandler(): (\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error?: any) => void,\n) => void {\n  return function sentryTracingMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    let traceparentData;\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace'] as string);\n    }\n\n    const transaction = startTransaction({\n      name: extractExpressTransactionName(req, { path: true, method: true }),\n      op: 'http.server',\n      ...traceparentData,\n    });\n\n    // We put the transaction on the scope so users can attach children to it\n    getCurrentHub().configureScope(scope => {\n      scope.setSpan(transaction);\n    });\n\n    // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (res as any).__sentry_transaction = transaction;\n\n    res.once('finish', () => {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(() => {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n\n    next();\n  };\n}\n\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction: Transaction | undefined, req: ExpressRequest): void {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, { path: true, method: true });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\nfunction extractExpressTransactionName(\n  req: ExpressRequest,\n  options: { path?: boolean; method?: boolean } = {},\n): string {\n  const method = req.method?.toUpperCase();\n\n  let path = '';\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = `${req.baseUrl}${req.route.path}`;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let info = '';\n  if (options.method && method) {\n    info += method;\n  }\n  if (options.method && options.path) {\n    info += ` `;\n  }\n  if (options.path && path) {\n    info += path;\n  }\n\n  return info;\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: ExpressRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractExpressTransactionName(req, { path: true });\n    }\n    case 'handler': {\n      return req.route?.stack[0].name || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractExpressTransactionName(req, { path: true, method: true });\n    }\n  }\n}\n\n/** Default user keys that'll be used to extract data from the request */\nconst DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface ParseRequestOptions {\n  ip?: boolean;\n  request?: boolean | string[];\n  serverName?: boolean;\n  transaction?: boolean | TransactionNamingScheme;\n  user?: boolean | string[];\n  version?: boolean;\n}\n\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nexport function parseRequest(event: Event, req: ExpressRequest, options?: ParseRequestOptions): Event {\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true,\n    ...options,\n  };\n\n  if (options.version) {\n    event.contexts = {\n      ...event.contexts,\n      runtime: {\n        name: 'node',\n        version: global.process.version,\n      },\n    };\n  }\n\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    const extractedRequestData = Array.isArray(options.request)\n      ? extractNodeRequestData(req, options.request)\n      : extractNodeRequestData(req);\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n\n    if (Object.keys(extractedUser)) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n  if (options.ip) {\n    const ip = req.ip || (req.connection && req.connection.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n\n  return event;\n}\n\nexport type RequestHandlerOptions = ParseRequestOptions & {\n  flushTimeout?: number;\n};\n\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nexport function requestHandler(\n  options?: RequestHandlerOptions,\n): (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: any) => void) => void {\n  return function sentryRequestMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _end = res.end;\n      res.end = function(chunk?: any | (() => void), encoding?: string | (() => void), cb?: () => void): void {\n        flush(options.flushTimeout)\n          .then(() => {\n            _end.call(this, chunk, encoding, cb);\n          })\n          .then(null, e => {\n            logger.error(e);\n          });\n      };\n    }\n    const local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(() => {\n      getCurrentHub().configureScope(scope =>\n        scope.addEventProcessor((event: Event) => parseRequest(event, req, options)),\n      );\n      next();\n    });\n  };\n}\n\n/** JSDoc */\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\n/** JSDoc */\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error: MiddlewareError): boolean {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nexport function errorHandler(options?: {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   * @param error Captured middleware error\n   */\n  shouldHandleError?(error: MiddlewareError): boolean;\n}): (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const shouldHandleError = (options && options.shouldHandleError) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(_scope => {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const transaction = (res as any).__sentry_transaction as Span;\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n        const eventId = captureException(error);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (res as any).sentry = eventId;\n        next(error);\n      });\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * @hidden\n */\nexport function logAndExitProcess(error: Error): void {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n\n  const client = getCurrentHub().getClient<NodeClient>();\n\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(\n    client.close(timeout).then((result: boolean) => {\n      if (!result) {\n        logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    }),\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}