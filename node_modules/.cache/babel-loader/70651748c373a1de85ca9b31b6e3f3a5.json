{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nvar moduleCache;\n/** Extract information about paths */\n\nfunction getPaths() {\n  try {\n    return require.cache ? Object.keys(require.cache) : [];\n  } catch (e) {\n    return [];\n  }\n}\n/** Extract information about package.json modules */\n\n\nfunction collectModules() {\n  var mainPaths = require.main && require.main.paths || [];\n  var paths = getPaths();\n  var infos = {};\n  var seen = {};\n  paths.forEach(function (path) {\n    var dir = path;\n    /** Traverse directories upward in the search of package.json file */\n\n    var updir = function () {\n      var orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      var pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        var info = JSON.parse(readFileSync(pkgfile, 'utf8'));\n        infos[info.name] = info.version;\n      } catch (_oO) {// no-empty\n      }\n    };\n\n    updir();\n  });\n  return infos;\n}\n/** Add node modules / packages to the event */\n\n\nvar Modules =\n/** @class */\nfunction () {\n  function Modules() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Modules.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Modules.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    var _this = this;\n\n    addGlobalEventProcessor(function (event) {\n      if (!getCurrentHub().getIntegration(Modules)) {\n        return event;\n      }\n\n      return __assign(__assign({}, event), {\n        modules: _this._getModules()\n      });\n    });\n  };\n  /** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\n\n\n  Modules.prototype._getModules = function () {\n    if (!moduleCache) {\n      moduleCache = collectModules();\n    }\n\n    return moduleCache;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Modules.id = 'Modules';\n  return Modules;\n}();\n\nexport { Modules };","map":{"version":3,"sources":["../../src/integrations/modules.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,EAAqB,YAArB,QAAyC,IAAzC;AACA,SAAS,OAAT,EAAkB,IAAlB,QAA8B,MAA9B;AAEA,IAAI,WAAJ;AAEA;;AACA,SAAS,QAAT,GAAiB;AACf,MAAI;AACF,WAAO,OAAO,CAAC,KAAR,GAAgB,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,KAApB,CAAhB,GAAwE,EAA/E;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF;AAED;;;AACA,SAAS,cAAT,GAAuB;AAGrB,MAAM,SAAS,GAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAAR,CAAa,KAA9B,IAAwC,EAA1D;AACA,MAAM,KAAK,GAAG,QAAQ,EAAtB;AACA,MAAM,KAAK,GAEP,EAFJ;AAGA,MAAM,IAAI,GAEN,EAFJ;AAIA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAA,IAAA,EAAI;AAChB,QAAI,GAAG,GAAG,IAAV;AAEA;;AACA,QAAM,KAAK,GAAG,YAAA;AACZ,UAAM,IAAI,GAAG,GAAb;AACA,MAAA,GAAG,GAAG,OAAO,CAAC,IAAD,CAAb;;AAEA,UAAI,CAAC,GAAD,IAAQ,IAAI,KAAK,GAAjB,IAAwB,IAAI,CAAC,IAAD,CAAhC,EAAwC;AACtC,eAAO,SAAP;AACD;;AACD,UAAI,SAAS,CAAC,OAAV,CAAkB,GAAlB,IAAyB,CAA7B,EAAgC;AAC9B,eAAO,KAAK,EAAZ;AACD;;AAED,UAAM,OAAO,GAAG,IAAI,CAAC,IAAD,EAAO,cAAP,CAApB;AACA,MAAA,IAAI,CAAC,IAAD,CAAJ,GAAa,IAAb;;AAEA,UAAI,CAAC,UAAU,CAAC,OAAD,CAAf,EAA0B;AACxB,eAAO,KAAK,EAAZ;AACD;;AAED,UAAI;AACF,YAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,YAAY,CAAC,OAAD,EAAU,MAAV,CAAvB,CAAb;AAIA,QAAA,KAAK,CAAC,IAAI,CAAC,IAAN,CAAL,GAAmB,IAAI,CAAC,OAAxB;AACD,OAND,CAME,OAAO,GAAP,EAAY,CACZ;AACD;AACF,KA3BD;;AA6BA,IAAA,KAAK;AACN,GAlCD;AAoCA,SAAO,KAAP;AACD;AAED;;;AACA,IAAA,OAAA;AAAA;AAAA,YAAA;AAAA,WAAA,OAAA,GAAA;AAME;;AAEG;AACI,SAAA,IAAA,GAAe,OAAO,CAAC,EAAvB;AAwBR;AAtBC;;AAEG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,uBAAjB,EAA8E,aAA9E,EAAsG;AAAtG,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,uBAAuB,CAAC,UAAA,KAAA,EAAK;AAC3B,UAAI,CAAC,aAAa,GAAG,cAAhB,CAA+B,OAA/B,CAAL,EAA8C;AAC5C,eAAO,KAAP;AACD;;AACD,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,QAAA,OAAO,EAAE,KAAI,CAAC,WAAL;AADD,OADV,CAAA;AAID,KARsB,CAAvB;AASD,GAVM;AAYP;;;AACQ,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAR,YAAA;AACE,QAAI,CAAC,WAAL,EAAkB;AAChB,MAAA,WAAW,GAAG,cAAc,EAA5B;AACD;;AACD,WAAO,WAAP;AACD,GALO;AA1BR;;AAEG;;;AACW,EAAA,OAAA,CAAA,EAAA,GAAa,SAAb;AA6BhB,SAAA,OAAA;AAAC,CAjCD,EAAA;;SAAa,O","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\n\nlet moduleCache: { [key: string]: string };\n\n/** Extract information about paths */\nfunction getPaths(): string[] {\n  try {\n    return require.cache ? Object.keys(require.cache as Record<string, unknown>) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules(): {\n  [name: string]: string;\n} {\n  const mainPaths = (require.main && require.main.paths) || [];\n  const paths = getPaths();\n  const infos: {\n    [name: string]: string;\n  } = {};\n  const seen: {\n    [path: string]: boolean;\n  } = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = (): void | (() => void) => {\n      const orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8')) as {\n          name: string;\n          version: string;\n        };\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Add node modules / packages to the event */\nexport class Modules implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Modules';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Modules.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      if (!getCurrentHub().getIntegration(Modules)) {\n        return event;\n      }\n      return {\n        ...event,\n        modules: this._getModules(),\n      };\n    });\n  }\n\n  /** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\n  private _getModules(): { [key: string]: string } {\n    if (!moduleCache) {\n      moduleCache = collectModules();\n    }\n    return moduleCache;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}