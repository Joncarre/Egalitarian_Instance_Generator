{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\DApp Versiones\\\\my_v9\\\\Generator-DApp\\\\src\\\\components\\\\Instance\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\nimport { Container, Wrap, TableSection, FormWrap1, FormInput, FormH1, Form, FormButton } from './InstanceElements';\nimport './messagesInfo.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Instance = () => {\n  _s();\n\n  const location = useLocation();\n  const [rowData, setRowData] = useState({});\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n  useEffect(() => {\n    if (location.state) {\n      setRowData(location.state.rowData);\n    }\n  }, [location.state]);\n  const headerItems = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"chain\",\n    label: \"Chain\"\n  }, {\n    name: \"size\",\n    label: \"Size\"\n  }, {\n    name: \"created\",\n    label: \"Date Created\"\n  }, {\n    name: \"solution\",\n    label: \"Solution\"\n  }, {\n    name: \"solved\",\n    label: \"Solved\"\n  }, {\n    name: \"ended\",\n    label: \"Date Solution\"\n  }];\n  /*async function async_solveInstance(data) {\n  if (typeof window.ethereum !== 'undefined') {\n  await requestAccount()\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner()\n  const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n  const transaction = await contract.solveInstance(\n  secret,\n  name,\n  data.solution_hash,\n  data.algorithm_hash,\n              data.hash_method,\n  { gasLimit: 12000000 })\n  await transaction.wait()\n  }\n      reset({ solution_hash: \"\", algorithm_hash: \"\", hash_method: \"\" });\n  }*/\n\n  const handleResolve = data => {\n    console.log(data);\n    reset({\n      solution_hash: \"\",\n      algorithm_hash: \"\",\n      hash_method: \"\"\n    }); // delete the line below and import resolve instance API\n    // setRowData({ ...rowData, solved: true });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Wrap, {\n      children: /*#__PURE__*/_jsxDEV(TableSection, {\n        children: /*#__PURE__*/_jsxDEV(ColumnHeaderTable, {\n          headerItems: headerItems,\n          data: rowData,\n          footer: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), Object.keys(rowData).length > 0 && !rowData.solved && /*#__PURE__*/_jsxDEV(FormWrap1, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(handleResolve),\n        children: [/*#__PURE__*/_jsxDEV(FormH1, {\n          children: \"Resolve the instance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the file containing the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"solution_hash\"),\n            type: \"text\",\n            name: \"solution_hash\",\n            placeholder: \"Solution hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the algorithm file used to find the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"algorithm_hash\"),\n            type: \"text\",\n            name: \"algorithm_hash\",\n            placeholder: \"Algorithm hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Method used to obtain the hash (MD5, SHA256, Keccak-512...)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"hash_method\"),\n            type: \"text\",\n            name: \"hash_method\",\n            placeholder: \"Hash method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n          id: \"submit1\",\n          type: \"submit\",\n          value: \"Submit data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, 1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Instance, \"Nf/UixuLS1p29sjSAO1qZlclCZo=\", false, function () {\n  return [useLocation, useForm];\n});\n\n_c = Instance;\nexport default Instance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instance\");","map":{"version":3,"sources":["C:/Users/Jonathan/Desktop/DApp Versiones/my_v9/Generator-DApp/src/components/Instance/index.js"],"names":["useState","useEffect","ethers","Generator","generatorAddress","requestAccount","useLocation","useForm","ColumnHeaderTable","Container","Wrap","TableSection","FormWrap1","FormInput","FormH1","Form","FormButton","Instance","location","rowData","setRowData","register","handleSubmit","reset","state","headerItems","name","label","handleResolve","data","console","log","solution_hash","algorithm_hash","hash_method","Object","keys","length","solved"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\nimport {\n    Container,\n    Wrap,\n    TableSection,\n    FormWrap1,\n    FormInput,\n    FormH1,\n    Form,\n    FormButton\n} from './InstanceElements'\nimport './messagesInfo.css';\n\n\nconst Instance = () => {\n    const location = useLocation();\n    const [rowData, setRowData] = useState({});\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n    } = useForm();\n\n    useEffect(() => {\n        if (location.state) {\n            setRowData(location.state.rowData);\n        }\n    }, [location.state])\n\n    const headerItems = [\n        { name: \"id\", label: \"ID\" },\n        { name: \"chain\", label: \"Chain\" },\n        { name: \"size\", label: \"Size\" },\n        { name: \"created\", label: \"Date Created\" },\n        { name: \"solution\", label: \"Solution\" },\n        { name: \"solved\", label: \"Solved\" },\n        { name: \"ended\", label: \"Date Solution\" },\n    ]\n\n    /*async function async_solveInstance(data) {\n\t\tif (typeof window.ethereum !== 'undefined') {\n\t\t\tawait requestAccount()\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst signer = provider.getSigner()\n\t\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n\t\t\tconst transaction = await contract.solveInstance(\n\t\t\t\tsecret,\n\t\t\t\tname,\n\t\t\t\tdata.solution_hash,\n\t\t\t\tdata.algorithm_hash,\n                data.hash_method,\n\t\t\t\t{ gasLimit: 12000000 })\n\t\t\tawait transaction.wait()\n\t\t}\n        reset({ solution_hash: \"\", algorithm_hash: \"\", hash_method: \"\" });\n\t}*/\n\n    const handleResolve = (data) => {\n        console.log(data);\n        reset({ solution_hash: \"\", algorithm_hash: \"\", hash_method: \"\" });\n        // delete the line below and import resolve instance API\n        // setRowData({ ...rowData, solved: true });\n    }\n\n    return (\n        <Container>\n            <Wrap>\n                <TableSection>\n                    <ColumnHeaderTable headerItems={headerItems} data={rowData} footer></ColumnHeaderTable>\n                </TableSection>\n            </Wrap>\n            {/* solved === false */}\n            {Object.keys(rowData).length > 0 && !rowData.solved &&\n                <FormWrap1>\n                    <Form key={1} onSubmit={handleSubmit(handleResolve)}>\n                        <FormH1>Resolve the instance</FormH1>\n                        <span className=\"field-tip\">\n                            <span className=\"tip-content\">Hash of the file containing the solution</span>\n                            <FormInput {...register(\"solution_hash\")} type=\"text\" name=\"solution_hash\" placeholder=\"Solution hash\" />\n                        </span>\n                        <span className=\"field-tip\">\n                            <span className=\"tip-content\">Hash of the algorithm file used to find the solution</span>\n\n                            <FormInput {...register(\"algorithm_hash\")} type=\"text\" name=\"algorithm_hash\" placeholder=\"Algorithm hash\" />\n                        </span>\n                        <span className=\"field-tip\">\n                            <span className=\"tip-content\">Method used to obtain the hash (MD5, SHA256, Keccak-512...)</span>\n\n                            <FormInput {...register(\"hash_method\")} type=\"text\" name=\"hash_method\" placeholder=\"Hash method\" />\n                        </span>\n                        <FormButton id=\"submit1\" type=\"submit\" value=\"Submit data\" />\n                    </Form>\n                </FormWrap1>\n            }\n        </Container>\n    );\n}\n\nexport default Instance;"]},"metadata":{},"sourceType":"module"}