{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst types = __importStar(require(\"../params/argumentTypes\"));\n\nconst hardhat_params_1 = require(\"../params/hardhat-params\");\n\nfunction isCLIArgumentType(type) {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\n\n\nclass SimpleTaskDefinition {\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  constructor(name, isSubtask = false) {\n    this.name = name;\n    this.isSubtask = isSubtask;\n    this.paramDefinitions = {};\n    this.positionalParamDefinitions = [];\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n\n    this.action = () => {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name\n      });\n    };\n  }\n\n  get description() {\n    return this._description;\n  }\n  /**\n   * Sets the task's description.\n   * @param description The description.\n   */\n\n\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Sets the task's action.\n   * @param action The action.\n   */\n\n\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this.action = action;\n    return this;\n  }\n  /**\n   * Adds a paramater to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isOptional,\n      isFlag: false,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds an optional paramater to the task's definition.\n   *\n   * @see addParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalParam(name, description, defaultValue, type) {\n    return this.addParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a boolean paramater or flag to the task's definition.\n   *\n   * Flags are params with default value set to `false`, and that don't expect\n   * values to be set in the CLI. A normal boolean param must be called with\n   * `--param true`, while a flag is called with `--flag`.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   */\n\n\n  addFlag(name, description) {\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue: false,\n      type: types.boolean,\n      description,\n      isFlag: true,\n      isOptional: true,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds a positional paramater to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   * @remarks This will throw if `isOptional` is `false` and an optional positional\n   * param was already set.\n   * @remarks This will throw if a variadic positional param is already set.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNotAfterVariadicParam(name);\n\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: false,\n      isOptional,\n      isFlag: false\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n  /**\n   * Adds an optional positional paramater to the task's definition.\n   *\n   * @see addPositionalParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalPositionalParam(name, description, defaultValue, type) {\n    return this.addPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a variadic positional paramater to the task's definition. Variadic\n   * positional params act as `...rest` parameters in JavaScript.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n\n\n  addVariadicPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n    if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n      defaultValue = [defaultValue];\n    }\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n\n      if (!this._isStringArray(defaultValue)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n\n      return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n\n    this._validateParamNameCasing(name);\n\n    this._validateNameNotUsed(name);\n\n    this._validateNotAfterVariadicParam(name);\n\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: true,\n      isOptional,\n      isFlag: false\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n  /**\n   * Adds a positional paramater to the task's definition.\n   *\n   * This will check if the `name` is already used and\n   * if the parameter is being added after a varidic argument.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n\n\n  addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n    return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a positional paramater to the task's definition.\n   *\n   * @param definition the param's definition\n   */\n\n\n  _addPositionalParamDefinition(definition) {\n    if (definition.isVariadic) {\n      this._hasVariadicParam = true;\n    }\n\n    if (definition.isOptional) {\n      this._hasOptionalPositionalParam = true;\n    }\n\n    this._positionalParamNames.add(definition.name);\n\n    this.positionalParamDefinitions.push(definition);\n  }\n  /**\n   * Validates if the given param's name is after a variadic parameter.\n   * @param name the param's name.\n   * @throws HH200\n   */\n\n\n  _validateNotAfterVariadicParam(name) {\n    if (this._hasVariadicParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Validates if the param's name is already used.\n   * @param name the param's name.\n   *\n   * @throws HH201 if `name` is already used as a param.\n   * @throws HH202 if `name` is already used as a param by Hardhat\n   */\n\n\n  _validateNameNotUsed(name) {\n    if (this._hasParamDefined(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n\n    if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Checks if the given name is already used.\n   * @param name the param's name.\n   */\n\n\n  _hasParamDefined(name) {\n    return this.paramDefinitions[name] !== undefined || this._positionalParamNames.has(name);\n  }\n  /**\n   * Validates if a mandatory param is being added after optional params.\n   *\n   * @param name the param's name to be added.\n   * @param isOptional true if the new param is optional, false otherwise.\n   *\n   * @throws HH203 if validation fail\n   */\n\n\n  _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n    if (!isOptional && this._hasOptionalPositionalParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _validateParamNameCasing(name) {\n    const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n    const match = name.match(pattern);\n\n    if (match === null) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n    if (defaultValue !== undefined && !isOptional) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n\n  _isStringArray(values) {\n    return Array.isArray(values) && values.every(v => typeof v === \"string\");\n  }\n\n  _validateCLIArgumentTypesForExternalTasks(type) {\n    if (this.isSubtask) {\n      return;\n    }\n\n    if (!isCLIArgumentType(type)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n        task: this.name,\n        type: type.name\n      });\n    }\n  }\n\n}\n\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\n\nclass OverriddenTaskDefinition {\n  constructor(parentTaskDefinition, isSubtask = false) {\n    this.parentTaskDefinition = parentTaskDefinition;\n    this.isSubtask = isSubtask;\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Overrides the parent task's action.\n   * @param action the action.\n   */\n\n\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this._action = action;\n    return this;\n  }\n  /**\n   * Retrieves the parent task's name.\n   */\n\n\n  get name() {\n    return this.parentTaskDefinition.name;\n  }\n  /**\n   * Retrieves, if defined, the description of the overriden task,\n   * otherwise retrieves the description of the parent task.\n   */\n\n\n  get description() {\n    if (this._description !== undefined) {\n      return this._description;\n    }\n\n    return this.parentTaskDefinition.description;\n  }\n  /**\n   * Retrieves, if defined, the action of the overriden task,\n   * otherwise retrieves the action of the parent task.\n   */\n\n\n  get action() {\n    if (this._action !== undefined) {\n      return this._action;\n    }\n\n    return this.parentTaskDefinition.action;\n  }\n  /**\n   * Retrieves the parent task's param definitions.\n   */\n\n\n  get paramDefinitions() {\n    return this.parentTaskDefinition.paramDefinitions;\n  }\n  /**\n   * Retrieves the parent task's positional param definitions.\n   */\n\n\n  get positionalParamDefinitions() {\n    return this.parentTaskDefinition.positionalParamDefinitions;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addParam(name, description, defaultValue, type, isOptional) {\n    if (isOptional === undefined || !isOptional) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n    }\n\n    return this.addOptionalParam(name, description, defaultValue, type);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalParam(name, description, defaultValue, type) {\n    this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n    return this;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n\n\n  addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Add a flag param to the overridden task.\n   * @throws HH201 if param name was already defined in any parent task.\n   * @throws HH209 if param name is not in camelCase.\n   */\n\n\n  addFlag(name, description) {\n    this.parentTaskDefinition.addFlag(name, description);\n    return this;\n  }\n\n  _throwNoParamsOverrideError(errorDescriptor) {\n    throw new errors_1.HardhatError(errorDescriptor, {\n      taskName: this.name\n    });\n  }\n\n}\n\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;","map":{"version":3,"sources":["../../../src/internal/core/tasks/task-definitions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst types = __importStar(require(\"../params/argumentTypes\"));\nconst hardhat_params_1 = require(\"../params/hardhat-params\");\nfunction isCLIArgumentType(type) {\n    return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\nclass SimpleTaskDefinition {\n    /**\n     * Creates an empty task definition.\n     *\n     * This definition will have no params, and will throw a HH205 if executed.\n     *\n     * @param name The task's name.\n     * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n     */\n    constructor(name, isSubtask = false) {\n        this.name = name;\n        this.isSubtask = isSubtask;\n        this.paramDefinitions = {};\n        this.positionalParamDefinitions = [];\n        this._positionalParamNames = new Set();\n        this._hasVariadicParam = false;\n        this._hasOptionalPositionalParam = false;\n        this.action = () => {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n                taskName: name,\n            });\n        };\n    }\n    get description() {\n        return this._description;\n    }\n    /**\n     * Sets the task's description.\n     * @param description The description.\n     */\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n    /**\n     * Sets the task's action.\n     * @param action The action.\n     */\n    setAction(action) {\n        // TODO: There's probably something bad here. See types.ts for more info.\n        this.action = action;\n        return this;\n    }\n    /**\n     * Adds a paramater to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addParam(name, description, undefined, types.string, isOptional);\n            }\n            if (typeof defaultValue !== \"string\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        this.paramDefinitions[name] = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isOptional,\n            isFlag: false,\n            isVariadic: false,\n        };\n        return this;\n    }\n    /**\n     * Adds an optional paramater to the task's definition.\n     *\n     * @see addParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalParam(name, description, defaultValue, type) {\n        return this.addParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a boolean paramater or flag to the task's definition.\n     *\n     * Flags are params with default value set to `false`, and that don't expect\n     * values to be set in the CLI. A normal boolean param must be called with\n     * `--param true`, while a flag is called with `--flag`.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     */\n    addFlag(name, description) {\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this.paramDefinitions[name] = {\n            name,\n            defaultValue: false,\n            type: types.boolean,\n            description,\n            isFlag: true,\n            isOptional: true,\n            isVariadic: false,\n        };\n        return this;\n    }\n    /**\n     * Adds a positional paramater to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     * @remarks This will throw if `isOptional` is `false` and an optional positional\n     * param was already set.\n     * @remarks This will throw if a variadic positional param is already set.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n            }\n            if (typeof defaultValue !== \"string\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNotAfterVariadicParam(name);\n        this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        const definition = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isVariadic: false,\n            isOptional,\n            isFlag: false,\n        };\n        this._addPositionalParamDefinition(definition);\n        return this;\n    }\n    /**\n     * Adds an optional positional paramater to the task's definition.\n     *\n     * @see addPositionalParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalPositionalParam(name, description, defaultValue, type) {\n        return this.addPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a variadic positional paramater to the task's definition. Variadic\n     * positional params act as `...rest` parameters in JavaScript.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addVariadicPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n            defaultValue = [defaultValue];\n        }\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n            }\n            if (!this._isStringArray(defaultValue)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNotAfterVariadicParam(name);\n        this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        const definition = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isVariadic: true,\n            isOptional,\n            isFlag: false,\n        };\n        this._addPositionalParamDefinition(definition);\n        return this;\n    }\n    /**\n     * Adds a positional paramater to the task's definition.\n     *\n     * This will check if the `name` is already used and\n     * if the parameter is being added after a varidic argument.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n        return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a positional paramater to the task's definition.\n     *\n     * @param definition the param's definition\n     */\n    _addPositionalParamDefinition(definition) {\n        if (definition.isVariadic) {\n            this._hasVariadicParam = true;\n        }\n        if (definition.isOptional) {\n            this._hasOptionalPositionalParam = true;\n        }\n        this._positionalParamNames.add(definition.name);\n        this.positionalParamDefinitions.push(definition);\n    }\n    /**\n     * Validates if the given param's name is after a variadic parameter.\n     * @param name the param's name.\n     * @throws HH200\n     */\n    _validateNotAfterVariadicParam(name) {\n        if (this._hasVariadicParam) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    /**\n     * Validates if the param's name is already used.\n     * @param name the param's name.\n     *\n     * @throws HH201 if `name` is already used as a param.\n     * @throws HH202 if `name` is already used as a param by Hardhat\n     */\n    _validateNameNotUsed(name) {\n        if (this._hasParamDefined(name)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n        if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    /**\n     * Checks if the given name is already used.\n     * @param name the param's name.\n     */\n    _hasParamDefined(name) {\n        return (this.paramDefinitions[name] !== undefined ||\n            this._positionalParamNames.has(name));\n    }\n    /**\n     * Validates if a mandatory param is being added after optional params.\n     *\n     * @param name the param's name to be added.\n     * @param isOptional true if the new param is optional, false otherwise.\n     *\n     * @throws HH203 if validation fail\n     */\n    _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n        if (!isOptional && this._hasOptionalPositionalParam) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _validateParamNameCasing(name) {\n        const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n        const match = name.match(pattern);\n        if (match === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n        if (defaultValue !== undefined && !isOptional) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _isStringArray(values) {\n        return Array.isArray(values) && values.every((v) => typeof v === \"string\");\n    }\n    _validateCLIArgumentTypesForExternalTasks(type) {\n        if (this.isSubtask) {\n            return;\n        }\n        if (!isCLIArgumentType(type)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n                task: this.name,\n                type: type.name,\n            });\n        }\n    }\n}\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\nclass OverriddenTaskDefinition {\n    constructor(parentTaskDefinition, isSubtask = false) {\n        this.parentTaskDefinition = parentTaskDefinition;\n        this.isSubtask = isSubtask;\n        this.isSubtask = isSubtask;\n        this.parentTaskDefinition = parentTaskDefinition;\n    }\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n    /**\n     * Overrides the parent task's action.\n     * @param action the action.\n     */\n    setAction(action) {\n        // TODO: There's probably something bad here. See types.ts for more info.\n        this._action = action;\n        return this;\n    }\n    /**\n     * Retrieves the parent task's name.\n     */\n    get name() {\n        return this.parentTaskDefinition.name;\n    }\n    /**\n     * Retrieves, if defined, the description of the overriden task,\n     * otherwise retrieves the description of the parent task.\n     */\n    get description() {\n        if (this._description !== undefined) {\n            return this._description;\n        }\n        return this.parentTaskDefinition.description;\n    }\n    /**\n     * Retrieves, if defined, the action of the overriden task,\n     * otherwise retrieves the action of the parent task.\n     */\n    get action() {\n        if (this._action !== undefined) {\n            return this._action;\n        }\n        return this.parentTaskDefinition.action;\n    }\n    /**\n     * Retrieves the parent task's param definitions.\n     */\n    get paramDefinitions() {\n        return this.parentTaskDefinition.paramDefinitions;\n    }\n    /**\n     * Retrieves the parent task's positional param definitions.\n     */\n    get positionalParamDefinitions() {\n        return this.parentTaskDefinition.positionalParamDefinitions;\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addParam(name, description, defaultValue, type, isOptional) {\n        if (isOptional === undefined || !isOptional) {\n            return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n        }\n        return this.addOptionalParam(name, description, defaultValue, type);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalParam(name, description, defaultValue, type) {\n        this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n        return this;\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Add a flag param to the overridden task.\n     * @throws HH201 if param name was already defined in any parent task.\n     * @throws HH209 if param name is not in camelCase.\n     */\n    addFlag(name, description) {\n        this.parentTaskDefinition.addFlag(name, description);\n        return this;\n    }\n    _throwNoParamsOverrideError(errorDescriptor) {\n        throw new errors_1.HardhatError(errorDescriptor, {\n            taskName: this.name,\n        });\n    }\n}\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;\n//# sourceMappingURL=task-definitions.js.map"]},"metadata":{},"sourceType":"script"}