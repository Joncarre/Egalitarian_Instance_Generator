{"ast":null,"code":"const clausesLength = 3; // Builds the instance(s) into a friendly way\n\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1]),\n      size: hexToDecimal(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6])\n    };\n    result.push(info);\n  }\n\n  return result;\n} // Builds the chain as a string\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n} // Converts a hexadecimal number to decimal number\n\n\nfunction hexToDecimal(_hexNumber) {\n  let number = _hexNumber;\n  return number;\n} // Builds the date as date format\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n} // Returns 'true' or 'false' with 50% probability\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n} // Builds an array of date as date format\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Desktop/DApp Versiones/my_v9/Generator-DApp/src/components/UserSection/supportFunctions.js"],"names":["clausesLength","buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","size","created","buildDate","solution","solved","ended","push","_oldChain","array","Array","from","Math","random","shift","_hexNumber","number","_oldDate","newDate","Date","parseInt","_hex","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","buildDateArray","_arrayRandoms"],"mappings":"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","sourcesContent":["const clausesLength = 3;\r\n\r\n// Builds the instance(s) into a friendly way\r\nexport function buildInstance(arr) {\r\n    let result = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let info = {\r\n            id: hexToDecimal(arr[i][0]),\r\n            chain: buildChain(arr[i][1]),\r\n            size: hexToDecimal(arr[i][2]),\r\n            created: buildDate(arr[i][3]),\r\n            solution: arr[i][4],\r\n            solved: arr[i][5],\r\n            ended: buildDate(arr[i][6])\r\n        };\r\n        result.push(info);\r\n    }\r\n    return result;\r\n}\r\n\r\n// Builds the chain as a string\r\nfunction buildChain(_oldChain) {\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while (array.length > 1) {\r\n        result += \"(\";\r\n        for (let i = 0; i < clausesLength; i++) {\r\n            if (Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if (i < clausesLength - 1)\r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if (array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n// Converts a hexadecimal number to decimal number\r\nfunction hexToDecimal(_hexNumber) {\r\n    let number = _hexNumber;\r\n    return number;\r\n}\r\n\r\n// Builds the date as date format\r\nfunction buildDate(_oldDate) {\r\n    let result, newDate;\r\n    if (hexToDecimal(_oldDate) !== 0) {\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\r\n        result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    } else\r\n        result = \"Date unavailable\";\r\n    return result;\r\n}\r\n\r\n// Returns 'true' or 'false' with 50% probability\r\nfunction getBoolean() {\r\n    if (Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\n// Builds an array of date as date format\r\nexport function buildDateArray(_arrayRandoms) {\r\n    let result = [];\r\n    for (let i = 0; i < _arrayRandoms.length; i++)\r\n        result.push(buildDate(_arrayRandoms[i]));\r\n    return result;\r\n} "]},"metadata":{},"sourceType":"module"}