{"ast":null,"code":"var _jsxFileName = \"/Users/tao-sen/generator-dapp/Generator-DApp/src/components/Instance/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"../ColumnHeaderTable\";\nimport { Container, Wrap, TableSection, FormWrap1, FormH1, Form, ButtonWrap, FormButton } from './InstanceElements';\nimport '../messagesInfo.css';\nimport { FormContent, FormLabel, FormInput, FormError } from '../FormElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Instance = props => {\n  _s();\n\n  var _errors$s_hash, _errors$s_hash2, _errors$a_hash, _errors$a_hash2, _errors$hash_method, _errors$hash_method2;\n\n  const location = useLocation();\n  const [rowData, setRowData] = useState({});\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm();\n  useEffect(() => {\n    if (location.state) {\n      setRowData(location.state.rowData);\n    }\n  }, [location.state]);\n  const headerItems = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"chain\",\n    label: \"Chain\"\n  }, {\n    name: \"size\",\n    label: \"Size\"\n  }, {\n    name: \"created\",\n    label: \"Date Created\"\n  }, {\n    name: \"solution\",\n    label: \"Solution\"\n  }, {\n    name: \"solved\",\n    label: \"Solved\"\n  }, {\n    name: \"ended\",\n    label: \"Date Solution\"\n  }];\n\n  const handleResolve = () => {\n    // delete the line below and import resolve instance API\n    setRowData({ ...rowData,\n      solution: \"Resolved\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Wrap, {\n      children: /*#__PURE__*/_jsxDEV(TableSection, {\n        children: /*#__PURE__*/_jsxDEV(ColumnHeaderTable, {\n          headerItems: headerItems,\n          data: rowData,\n          footer: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormWrap1, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: () => handleResolve,\n        children: [/*#__PURE__*/_jsxDEV(FormH1, {\n          children: \"Resolve the instance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"The \\\"p\\\" value indicates the probability of generating a new proposition symbol\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"s_hash\", {\n            required: true,\n            pattern: /^[0-9\\b]+$/\n          }),\n          type: \"text\",\n          name: \"s_hash\",\n          placeholder: \"Solution hash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$s_hash = errors.s_hash) === null || _errors$s_hash === void 0 ? void 0 : _errors$s_hash.type) === \"required\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Field required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 61\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$s_hash2 = errors.s_hash) === null || _errors$s_hash2 === void 0 ? void 0 : _errors$s_hash2.type) === \"pattern\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Numerical characters only\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"The \\\"q\\\" value indicates the probability of generating a new clause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"a_hash\", {\n            required: true,\n            pattern: /^[0-9\\b]+$/\n          }),\n          type: \"text\",\n          name: \"a_hash\",\n          placeholder: \"Algorithm hash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$a_hash = errors.a_hash) === null || _errors$a_hash === void 0 ? void 0 : _errors$a_hash.type) === \"required\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Field required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 61\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$a_hash2 = errors.a_hash) === null || _errors$a_hash2 === void 0 ? void 0 : _errors$a_hash2.type) === \"pattern\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Numerical characters only\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Enter the number of instances you would like to generate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"hash_method\", {\n            required: true,\n            pattern: /^[0-9\\b]+$/\n          }),\n          type: \"text\",\n          name: \"Hash method\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$hash_method = errors.hash_method) === null || _errors$hash_method === void 0 ? void 0 : _errors$hash_method.type) === \"required\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Field required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 66\n        }, this), (errors === null || errors === void 0 ? void 0 : (_errors$hash_method2 = errors.hash_method) === null || _errors$hash_method2 === void 0 ? void 0 : _errors$hash_method2.type) === \"pattern\" && /*#__PURE__*/_jsxDEV(FormError, {\n          children: \"Numerical characters only\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 65\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(FormButton, {\n            left: true,\n            id: \"submit1\",\n            type: \"submit\",\n            value: \"A generator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, 1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Instance, \"owqiPVN/d+1EoCS/LjazcMBz9cU=\", false, function () {\n  return [useLocation, useForm];\n});\n\n_c = Instance;\nexport default Instance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instance\");","map":{"version":3,"sources":["/Users/tao-sen/generator-dapp/Generator-DApp/src/components/Instance/index.js"],"names":["useState","useEffect","useLocation","useForm","ColumnHeaderTable","Container","Wrap","TableSection","FormWrap1","FormH1","Form","ButtonWrap","FormButton","FormContent","FormLabel","FormInput","FormError","Instance","props","location","rowData","setRowData","register","handleSubmit","reset","formState","errors","state","headerItems","name","label","handleResolve","solution","required","pattern","s_hash","type","a_hash","hash_method"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"../ColumnHeaderTable\";\nimport {\n    Container,\n    Wrap,\n    TableSection,\n    FormWrap1,\n    FormH1,\n    Form,\n    ButtonWrap,\n    FormButton\n} from './InstanceElements'\nimport '../messagesInfo.css';\n\nimport {\n    FormContent,\n    FormLabel,\n    FormInput,\n    FormError\n} from '../FormElements';\n\nconst Instance = props => {\n    const location = useLocation();\n    const [rowData, setRowData] = useState({});\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors }\n    } = useForm();\n\n    useEffect(() => {\n        if (location.state) {\n            setRowData(location.state.rowData);\n        }\n    }, [location.state])\n\n    const headerItems = [\n        { name: \"id\", label: \"ID\" },\n        { name: \"chain\", label: \"Chain\" },\n        { name: \"size\", label: \"Size\" },\n        { name: \"created\", label: \"Date Created\" },\n        { name: \"solution\", label: \"Solution\" },\n        { name: \"solved\", label: \"Solved\" },\n        { name: \"ended\", label: \"Date Solution\" },\n    ]\n\n    const handleResolve = () => {\n        // delete the line below and import resolve instance API\n        setRowData({ ...rowData, solution: \"Resolved\" });\n    }\n\n    return (\n        <Container>\n            <Wrap>\n                <TableSection>\n                    <ColumnHeaderTable headerItems={headerItems} data={rowData} footer></ColumnHeaderTable>\n                </TableSection>\n            </Wrap>\n            {/* {Object.keys(rowData).length > 0 && rowData.solution === \"Unresolved\" &&\n                < ButtonWrap >\n                    <FormButton type=\"submit\" value=\"Resolve\" onClick={() => handleResolve()} />\n                </ButtonWrap>\n            } */}\n            <FormWrap1>\n                <Form key={1} onSubmit={() => handleResolve}>\n                    <FormH1>Resolve the instance</FormH1>\n                    <span className=\"field-tip\">\n                        <span className=\"tip-content\">The \"p\" value indicates the probability of generating a new proposition symbol</span>\n                    </span>\n                    <FormInput {...register(\"s_hash\", {\n                        required: true,\n                        pattern: /^[0-9\\b]+$/\n                    })} type=\"text\" name=\"s_hash\" placeholder=\"Solution hash\" />\n                    {errors?.s_hash?.type === \"required\" && <FormError>Field required</FormError>}\n                    {errors?.s_hash?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n                    <span className=\"field-tip\">\n                        <span className=\"tip-content\">The \"q\" value indicates the probability of generating a new clause</span>\n                    </span>\n                    <FormInput {...register(\"a_hash\", {\n                        required: true,\n                        pattern: /^[0-9\\b]+$/\n                    })} type=\"text\" name=\"a_hash\" placeholder=\"Algorithm hash\" />\n                    {errors?.a_hash?.type === \"required\" && <FormError>Field required</FormError>}\n                    {errors?.a_hash?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n                    <span className=\"field-tip\">\n                        <span className=\"tip-content\">Enter the number of instances you would like to generate</span>\n                    </span>\n                    <FormInput {...register(\"hash_method\", {\n                        required: true,\n                        pattern: /^[0-9\\b]+$/\n                    })} type=\"text\" name=\"Hash method\" />\n                    {errors?.hash_method?.type === \"required\" && <FormError>Field required</FormError>}\n                    {errors?.hash_method?.type === \"pattern\" && <FormError>Numerical characters only</FormError>}\n                    <div>\n                        <FormButton left id=\"submit1\" type=\"submit\" value=\"A generator\" />\n                    </div>\n                </Form>\n            </FormWrap1>\n        </Container >\n    );\n}\n\nexport default Instance;"]},"metadata":{},"sourceType":"module"}