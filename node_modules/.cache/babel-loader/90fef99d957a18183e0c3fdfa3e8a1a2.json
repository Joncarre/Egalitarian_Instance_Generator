{"ast":null,"code":"const clausesLength = 3;\n/*\n* Builds the instance(s) into a friendly way\n*/\n\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1]),\n      size: hexToDecimal(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6])\n    };\n    result.push(info);\n  }\n\n  return result;\n}\n/*\n* Builds the chain as a string\n*/\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n}\n/*\n* Converts a hexadecimal number to decimal number\n*/\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber._hex, 16);\n}\n/*\n* Builds the date as date format\n*/\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n}\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n/*\n* Builds an array of date as date format\n*/\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/Egalitarian_Instance_Generator/src/components/UserSection/supportFunctions.js"],"names":["clausesLength","buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","size","created","buildDate","solution","solved","ended","push","_oldChain","array","Array","from","Math","random","shift","_hexNumber","parseInt","_hex","_oldDate","newDate","Date","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","buildDateArray","_arrayRandoms"],"mappings":"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","sourcesContent":["const clausesLength = 3;\n\n/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let info = {\n            id: hexToDecimal(arr[i][0]),\n            chain: buildChain(arr[i][1]),\n            size: hexToDecimal(arr[i][2]),\n            created: buildDate(arr[i][3]),\n            solution: arr[i][4],\n            solved: arr[i][5],\n            ended: buildDate(arr[i][6])\n        };\n        result.push(info);\n    }\n    return result;\n}\n\n/*\n* Builds the chain as a string\n*/\nfunction buildChain(_oldChain) {\n    let result = \"\";\n    let array = Array.from(_oldChain);\n    while (array.length > 1) {\n        result += \"(\";\n        for (let i = 0; i < clausesLength; i++) {\n            if (Math.random() < 0.5)\n                result += \"x\" + array.shift();\n            else\n                result += \"¬\" + \"x\" + array.shift();\n            if (i < clausesLength - 1)\n                result += \" v \";\n        }\n        result += \")\";\n        if (array.length > 1)\n            result += \" ^ \";\n    }\n    return result;\n}\n\n/*\n* Converts a hexadecimal number to decimal number\n*/\nfunction hexToDecimal(_hexNumber) {\n    return parseInt(_hexNumber._hex, 16);\n}\n\n/*\n* Builds the date as date format\n*/\nfunction buildDate(_oldDate) {\n    let result, newDate;\n    if (hexToDecimal(_oldDate) !== 0) {\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n    } else\n        result = \"Date unavailable\";\n    return result;\n}\n\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\nfunction getBoolean() {\n    if (Math.random() >= 50)\n        return true;\n    else\n        return false;\n}\n\n/*\n* Builds an array of date as date format\n*/\nexport function buildDateArray(_arrayRandoms) {\n    let result = [];\n    for (let i = 0; i < _arrayRandoms.length; i++)\n        result.push(buildDate(_arrayRandoms[i]));\n    return result;\n} "]},"metadata":{},"sourceType":"module"}