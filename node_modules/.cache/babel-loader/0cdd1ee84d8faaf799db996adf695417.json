{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnvHardhatArguments = exports.getEnvVariablesMap = exports.paramNameToEnvVariable = void 0;\n\nconst ArgumentsParser_1 = require(\"../../cli/ArgumentsParser\");\n\nconst unsafe_1 = require(\"../../util/unsafe\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\n\nfunction paramNameToEnvVariable(paramName) {\n  // We create it starting from the result of ArgumentsParser.paramNameToCLA\n  // so it's easier to explain and understand their equivalences.\n  return ArgumentsParser_1.ArgumentsParser.paramNameToCLA(paramName).replace(ArgumentsParser_1.ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX).replace(/-/g, \"_\").toUpperCase();\n}\n\nexports.paramNameToEnvVariable = paramNameToEnvVariable;\n\nfunction getEnvVariablesMap(hardhatArguments) {\n  const values = {};\n\n  for (const [name, value] of Object.entries(hardhatArguments)) {\n    if (value === undefined) {\n      continue;\n    }\n\n    values[paramNameToEnvVariable(name)] = value.toString();\n  }\n\n  return values;\n}\n\nexports.getEnvVariablesMap = getEnvVariablesMap;\n\nfunction getEnvHardhatArguments(paramDefinitions, envVariables) {\n  const envArgs = {};\n\n  for (const paramName of unsafe_1.unsafeObjectKeys(paramDefinitions)) {\n    const definition = paramDefinitions[paramName];\n    const envVarName = paramNameToEnvVariable(paramName);\n    const rawValue = envVariables[envVarName];\n\n    if (rawValue !== undefined) {\n      try {\n        envArgs[paramName] = definition.type.parse(paramName, rawValue);\n      } catch (error) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n          varName: envVarName,\n          value: rawValue\n        }, error);\n      }\n    } else {\n      envArgs[paramName] = definition.defaultValue;\n    }\n  } // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n\n\n  return envArgs;\n}\n\nexports.getEnvHardhatArguments = getEnvHardhatArguments;","map":{"version":3,"sources":["../../../src/internal/core/params/env-variables.ts"],"names":[],"mappings":";;;;;;;AAGA,MAAA,iBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAM,2BAA2B,GAAG,UAApC;;AAEA,SAAgB,sBAAhB,CAAuC,SAAvC,EAAwD;AACtD;AACA;AACA,SAAO,iBAAA,CAAA,eAAA,CAAgB,cAAhB,CAA+B,SAA/B,EACJ,OADI,CACI,iBAAA,CAAA,eAAA,CAAgB,YADpB,EACkC,2BADlC,EAEJ,OAFI,CAEI,IAFJ,EAEU,GAFV,EAGJ,WAHI,EAAP;AAID;;AAPD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AASA,SAAgB,kBAAhB,CAAmC,gBAAnC,EAAqE;AAGnE,QAAM,MAAM,GAAiC,EAA7C;;AAEA,OAAK,MAAM,CAAC,IAAD,EAAO,KAAP,CAAX,IAA4B,MAAM,CAAC,OAAP,CAAe,gBAAf,CAA5B,EAA8D;AAC5D,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB;AACD;;AAED,IAAA,MAAM,CAAC,sBAAsB,CAAC,IAAD,CAAvB,CAAN,GAAuC,KAAK,CAAC,QAAN,EAAvC;AACD;;AAED,SAAO,MAAP;AACD;;AAdD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAgBA,SAAgB,sBAAhB,CACE,gBADF,EAEE,YAFF,EAE0B;AAExB,QAAM,OAAO,GAAQ,EAArB;;AAEA,OAAK,MAAM,SAAX,IAAwB,QAAA,CAAA,gBAAA,CAAiB,gBAAjB,CAAxB,EAA4D;AAC1D,UAAM,UAAU,GAAG,gBAAgB,CAAC,SAAD,CAAnC;AACA,UAAM,UAAU,GAAG,sBAAsB,CAAC,SAAD,CAAzC;AACA,UAAM,QAAQ,GAAG,YAAY,CAAC,UAAD,CAA7B;;AAEA,QAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,UAAI;AACF,QAAA,OAAO,CAAC,SAAD,CAAP,GAAqB,UAAU,CAAC,IAAX,CAAgB,KAAhB,CAAsB,SAAtB,EAAiC,QAAjC,CAArB;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,cAAM,IAAI,QAAA,CAAA,YAAJ,CACJ,aAAA,CAAA,MAAA,CAAO,SAAP,CAAiB,qBADb,EAEJ;AACE,UAAA,OAAO,EAAE,UADX;AAEE,UAAA,KAAK,EAAE;AAFT,SAFI,EAMJ,KANI,CAAN;AAQD;AACF,KAbD,MAaO;AACL,MAAA,OAAO,CAAC,SAAD,CAAP,GAAqB,UAAU,CAAC,YAAhC;AACD;AACF,GAzBuB,CA2BxB;;;AACA,SAAO,OAAP;AACD;;AA/BD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnvHardhatArguments = exports.getEnvVariablesMap = exports.paramNameToEnvVariable = void 0;\nconst ArgumentsParser_1 = require(\"../../cli/ArgumentsParser\");\nconst unsafe_1 = require(\"../../util/unsafe\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\nfunction paramNameToEnvVariable(paramName) {\n    // We create it starting from the result of ArgumentsParser.paramNameToCLA\n    // so it's easier to explain and understand their equivalences.\n    return ArgumentsParser_1.ArgumentsParser.paramNameToCLA(paramName)\n        .replace(ArgumentsParser_1.ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX)\n        .replace(/-/g, \"_\")\n        .toUpperCase();\n}\nexports.paramNameToEnvVariable = paramNameToEnvVariable;\nfunction getEnvVariablesMap(hardhatArguments) {\n    const values = {};\n    for (const [name, value] of Object.entries(hardhatArguments)) {\n        if (value === undefined) {\n            continue;\n        }\n        values[paramNameToEnvVariable(name)] = value.toString();\n    }\n    return values;\n}\nexports.getEnvVariablesMap = getEnvVariablesMap;\nfunction getEnvHardhatArguments(paramDefinitions, envVariables) {\n    const envArgs = {};\n    for (const paramName of unsafe_1.unsafeObjectKeys(paramDefinitions)) {\n        const definition = paramDefinitions[paramName];\n        const envVarName = paramNameToEnvVariable(paramName);\n        const rawValue = envVariables[envVarName];\n        if (rawValue !== undefined) {\n            try {\n                envArgs[paramName] = definition.type.parse(paramName, rawValue);\n            }\n            catch (error) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n                    varName: envVarName,\n                    value: rawValue,\n                }, error);\n            }\n        }\n        else {\n            envArgs[paramName] = definition.defaultValue;\n        }\n    }\n    // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n    return envArgs;\n}\nexports.getEnvHardhatArguments = getEnvHardhatArguments;\n//# sourceMappingURL=env-variables.js.map"]},"metadata":{},"sourceType":"script"}