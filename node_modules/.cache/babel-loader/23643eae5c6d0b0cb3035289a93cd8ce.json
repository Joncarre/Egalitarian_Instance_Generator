{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Desktop\\\\DApp Versiones\\\\v11\\\\Generator-DApp\\\\src\\\\components\\\\Instance\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\nimport { Container, Wrap, TableSection, FormWrap1, FormInput, FormH1, Form, FormButton } from './InstanceElements';\nimport './messagesInfo.css';\nimport { secureStorage } from 'components/secureSession';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Instance = () => {\n  _s();\n\n  const location = useLocation();\n  const [rowData, setRowData] = useState({});\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n  useEffect(() => {\n    if (location.state) {\n      setRowData(location.state.rowData);\n    }\n  }, [location.state]);\n  const headerItems = [{\n    name: \"id\",\n    label: \"ID\"\n  }, {\n    name: \"chain\",\n    label: \"Chain\"\n  }, {\n    name: \"size\",\n    label: \"Size\"\n  }, {\n    name: \"created\",\n    label: \"Date Created\"\n  }, {\n    name: \"solution\",\n    label: \"Solution hash\"\n  }, {\n    name: \"solved\",\n    label: \"Solved\"\n  }, {\n    name: \"ended\",\n    label: \"Date Solution\"\n  }];\n\n  async function async_solveInstance({\n    solution_hash,\n    algorithm_hash,\n    hash_method\n  }) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.solveInstance(secureStorage.getItem('password'), rowData.id, solution_hash, algorithm_hash, hash_method, {\n        gasLimit: 12000000\n      });\n      await transaction.wait();\n    }\n\n    reset({\n      solution_hash: \"\",\n      algorithm_hash: \"\",\n      hash_method: \"\"\n    });\n  }\n\n  const handleResolve = data => {\n    console.log(data);\n    async_solveInstance(data); // delete the line below and import resolve instance API\n    // setRowData({ ...rowData, solved: true });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Wrap, {\n      children: /*#__PURE__*/_jsxDEV(TableSection, {\n        children: /*#__PURE__*/_jsxDEV(ColumnHeaderTable, {\n          headerItems: headerItems,\n          data: rowData,\n          footer: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), Object.keys(rowData).length > 0 && !rowData.solved && /*#__PURE__*/_jsxDEV(FormWrap1, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(handleResolve),\n        children: [/*#__PURE__*/_jsxDEV(FormH1, {\n          children: \"Resolve the instance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the file containing the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"solution_hash\"),\n            type: \"text\",\n            name: \"solution_hash\",\n            placeholder: \"Solution hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Hash of the algorithm file used to find the solution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"algorithm_hash\"),\n            type: \"text\",\n            name: \"algorithm_hash\",\n            placeholder: \"Algorithm hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"field-tip\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tip-content\",\n            children: \"Method used to obtain the hash (MD5, SHA256, Keccak-512...)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, { ...register(\"hash_method\"),\n            type: \"text\",\n            name: \"hash_method\",\n            placeholder: \"Hash method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n          id: \"submit1\",\n          type: \"submit\",\n          value: \"Submit data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this)]\n      }, 1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Instance, \"QK15eelE2eQLbHHyGRwO5rJ/6Jo=\", false, function () {\n  return [useLocation, useForm];\n});\n\n_c = Instance;\nexport default Instance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instance\");","map":{"version":3,"sources":["C:/Users/Jonathan/Desktop/DApp Versiones/v11/Generator-DApp/src/components/Instance/index.js"],"names":["useState","useEffect","ethers","Generator","generatorAddress","requestAccount","useLocation","useForm","ColumnHeaderTable","Container","Wrap","TableSection","FormWrap1","FormInput","FormH1","Form","FormButton","secureStorage","Instance","location","rowData","setRowData","register","handleSubmit","reset","state","headerItems","name","label","async_solveInstance","solution_hash","algorithm_hash","hash_method","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","solveInstance","getItem","id","gasLimit","wait","handleResolve","data","console","log","Object","keys","length","solved"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from 'ethers';\nimport Generator from '../../artifacts/contracts/Generator.sol/Generator.json';\nimport { generatorAddress, requestAccount } from '../../App.js';\nimport { useLocation } from \"react-router-dom\";\nimport { useForm } from 'react-hook-form';\nimport ColumnHeaderTable from \"components/ColumnHeaderTable\";\nimport {\n\tContainer,\n\tWrap,\n\tTableSection,\n\tFormWrap1,\n\tFormInput,\n\tFormH1,\n\tForm,\n\tFormButton\n} from './InstanceElements'\nimport './messagesInfo.css';\n\nimport { secureStorage } from 'components/secureSession';\n\n\nconst Instance = () => {\n\tconst location = useLocation();\n\tconst [rowData, setRowData] = useState({});\n\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\treset,\n\t} = useForm();\n\n\tuseEffect(() => {\n\t\tif (location.state) {\n\t\t\tsetRowData(location.state.rowData);\n\t\t}\n\t}, [location.state])\n\n\tconst headerItems = [\n\t\t{ name: \"id\", label: \"ID\" },\n\t\t{ name: \"chain\", label: \"Chain\" },\n\t\t{ name: \"size\", label: \"Size\" },\n\t\t{ name: \"created\", label: \"Date Created\" },\n\t\t{ name: \"solution\", label: \"Solution hash\" },\n\t\t{ name: \"solved\", label: \"Solved\" },\n\t\t{ name: \"ended\", label: \"Date Solution\" },\n\t]\n\n\tasync function async_solveInstance({ solution_hash, algorithm_hash, hash_method }) {\n\t\tif (typeof window.ethereum !== 'undefined') {\n\t\t\tawait requestAccount()\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tconst signer = provider.getSigner()\n\t\t\tconst contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n\t\t\tconst transaction = await contract.solveInstance(\n\t\t\t\tsecureStorage.getItem('password'),\n\t\t\t\trowData.id,\n\t\t\t\tsolution_hash,\n\t\t\t\talgorithm_hash,\n\t\t\t\thash_method,\n\t\t\t\t{ gasLimit: 12000000 })\n\t\t\tawait transaction.wait()\n\t\t}\n\t\treset({ solution_hash: \"\", algorithm_hash: \"\", hash_method: \"\" });\n\t}\n\n\tconst handleResolve = (data) => {\n\t\tconsole.log(data);\n\t\tasync_solveInstance(data);\n\t\t// delete the line below and import resolve instance API\n\t\t// setRowData({ ...rowData, solved: true });\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Wrap>\n\t\t\t\t<TableSection>\n\t\t\t\t\t<ColumnHeaderTable headerItems={headerItems} data={rowData} footer></ColumnHeaderTable>\n\t\t\t\t</TableSection>\n\t\t\t</Wrap>\n\t\t\t{/* solved === false */}\n\t\t\t{Object.keys(rowData).length > 0 && !rowData.solved &&\n\t\t\t\t<FormWrap1>\n\t\t\t\t\t<Form key={1} onSubmit={handleSubmit(handleResolve)}>\n\t\t\t\t\t\t<FormH1>Resolve the instance</FormH1>\n\t\t\t\t\t\t<span className=\"field-tip\">\n\t\t\t\t\t\t\t<span className=\"tip-content\">Hash of the file containing the solution</span>\n\t\t\t\t\t\t\t<FormInput {...register(\"solution_hash\")} type=\"text\" name=\"solution_hash\" placeholder=\"Solution hash\" />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"field-tip\">\n\t\t\t\t\t\t\t<span className=\"tip-content\">Hash of the algorithm file used to find the solution</span>\n\n\t\t\t\t\t\t\t<FormInput {...register(\"algorithm_hash\")} type=\"text\" name=\"algorithm_hash\" placeholder=\"Algorithm hash\" />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"field-tip\">\n\t\t\t\t\t\t\t<span className=\"tip-content\">Method used to obtain the hash (MD5, SHA256, Keccak-512...)</span>\n\n\t\t\t\t\t\t\t<FormInput {...register(\"hash_method\")} type=\"text\" name=\"hash_method\" placeholder=\"Hash method\" />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<FormButton id=\"submit1\" type=\"submit\" value=\"Submit data\" />\n\t\t\t\t\t</Form>\n\t\t\t\t</FormWrap1>\n\t\t\t}\n\t\t</Container>\n\t);\n}\n\nexport default Instance;"]},"metadata":{},"sourceType":"module"}