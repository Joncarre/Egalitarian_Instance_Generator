{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSubprocessTransport = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst path = __importStar(require(\"path\")); // This class is wrapped in a function to avoid having to\n// import @sentry/node just for the BaseTransport base class\n\n\nfunction getSubprocessTransport() {\n  const {\n    Status,\n    Transports\n  } = require(\"@sentry/node\");\n\n  class SubprocessTransport extends Transports.BaseTransport {\n    async sendEvent(event) {\n      var _a, _b, _c;\n\n      const extra = (_a = event.extra) !== null && _a !== void 0 ? _a : {};\n      const {\n        verbose = false,\n        configPath\n      } = extra; // don't send user's full config path for privacy reasons\n\n      (_b = event.extra) === null || _b === void 0 ? true : delete _b.configPath; // we don't care about the verbose setting\n\n      (_c = event.extra) === null || _c === void 0 ? true : delete _c.verbose;\n      const serializedEvent = JSON.stringify(event);\n      const env = {\n        HARDHAT_SENTRY_EVENT: serializedEvent,\n        HARDHAT_SENTRY_VERBOSE: verbose.toString()\n      };\n\n      if (configPath !== undefined) {\n        env.HARDHAT_SENTRY_CONFIG_PATH = configPath;\n      }\n\n      const subprocessPath = path.join(__dirname, \"subprocess\");\n      const subprocess = child_process_1.spawn(process.execPath, [subprocessPath], {\n        detached: true,\n        env,\n        stdio: verbose ? \"inherit\" : \"ignore\"\n      });\n      subprocess.unref();\n      return {\n        status: Status.Success\n      };\n    }\n\n  }\n\n  return SubprocessTransport;\n}\n\nexports.getSubprocessTransport = getSubprocessTransport;","map":{"version":3,"sources":["../../src/internal/sentry/transport.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,C,CAEA;AACA;;;AACA,SAAgB,sBAAhB,GAAsC;AACpC,QAAM;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAyB,OAAO,CAAC,cAAD,CAAtC;;AAEA,QAAM,mBAAN,SAAkC,UAAU,CAAC,aAA7C,CAA0D;AAClC,UAAT,SAAS,CAAC,KAAD,EAAa;;;AACjC,YAAM,KAAK,GAAA,CAAA,EAAA,GACT,KAAK,CAAC,KADG,MACE,IADF,IACE,EAAA,KAAA,KAAA,CADF,GACE,EADF,GACM,EADjB;AAEA,YAAM;AAAE,QAAA,OAAO,GAAG,KAAZ;AAAmB,QAAA;AAAnB,UAAkC,KAAxC,CAHiC,CAKjC;;AACA,OAAA,EAAA,GAAO,KAAK,CAAC,KAAb,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,IAAlB,GAAkB,OAAA,EAAA,CAAE,UAApB,CANiC,CAQjC;;AACA,OAAA,EAAA,GAAO,KAAK,CAAC,KAAb,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,IAAlB,GAAkB,OAAA,EAAA,CAAE,OAApB;AAEA,YAAM,eAAe,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAxB;AAEA,YAAM,GAAG,GAA2B;AAClC,QAAA,oBAAoB,EAAE,eADY;AAElC,QAAA,sBAAsB,EAAE,OAAO,CAAC,QAAR;AAFU,OAApC;;AAKA,UAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,QAAA,GAAG,CAAC,0BAAJ,GAAiC,UAAjC;AACD;;AAED,YAAM,cAAc,GAAG,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,YAArB,CAAvB;AAEA,YAAM,UAAU,GAAG,eAAA,CAAA,KAAA,CAAM,OAAO,CAAC,QAAd,EAAwB,CAAC,cAAD,CAAxB,EAA0C;AAC3D,QAAA,QAAQ,EAAE,IADiD;AAE3D,QAAA,GAF2D;AAG3D,QAAA,KAAK,EAAG,OAAO,GAAG,SAAH,GAAe;AAH6B,OAA1C,CAAnB;AAMA,MAAA,UAAU,CAAC,KAAX;AAEA,aAAO;AACL,QAAA,MAAM,EAAE,MAAM,CAAC;AADV,OAAP;AAGD;;AApCuD;;AAuC1D,SAAO,mBAAP;AACD;;AA3CD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSubprocessTransport = void 0;\nconst child_process_1 = require(\"child_process\");\nconst path = __importStar(require(\"path\"));\n// This class is wrapped in a function to avoid having to\n// import @sentry/node just for the BaseTransport base class\nfunction getSubprocessTransport() {\n    const { Status, Transports } = require(\"@sentry/node\");\n    class SubprocessTransport extends Transports.BaseTransport {\n        async sendEvent(event) {\n            var _a, _b, _c;\n            const extra = (_a = event.extra) !== null && _a !== void 0 ? _a : {};\n            const { verbose = false, configPath } = extra;\n            // don't send user's full config path for privacy reasons\n            (_b = event.extra) === null || _b === void 0 ? true : delete _b.configPath;\n            // we don't care about the verbose setting\n            (_c = event.extra) === null || _c === void 0 ? true : delete _c.verbose;\n            const serializedEvent = JSON.stringify(event);\n            const env = {\n                HARDHAT_SENTRY_EVENT: serializedEvent,\n                HARDHAT_SENTRY_VERBOSE: verbose.toString(),\n            };\n            if (configPath !== undefined) {\n                env.HARDHAT_SENTRY_CONFIG_PATH = configPath;\n            }\n            const subprocessPath = path.join(__dirname, \"subprocess\");\n            const subprocess = child_process_1.spawn(process.execPath, [subprocessPath], {\n                detached: true,\n                env,\n                stdio: (verbose ? \"inherit\" : \"ignore\"),\n            });\n            subprocess.unref();\n            return {\n                status: Status.Success,\n            };\n        }\n    }\n    return SubprocessTransport;\n}\nexports.getSubprocessTransport = getSubprocessTransport;\n//# sourceMappingURL=transport.js.map"]},"metadata":{},"sourceType":"script"}