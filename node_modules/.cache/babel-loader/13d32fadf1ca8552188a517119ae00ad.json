{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hardforkGte = exports.getHardforkName = exports.HardforkName = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nvar HardforkName;\n\n(function (HardforkName) {\n  HardforkName[\"FRONTIER\"] = \"chainstart\";\n  HardforkName[\"HOMESTEAD\"] = \"homestead\";\n  HardforkName[\"DAO\"] = \"dao\";\n  HardforkName[\"TANGERINE_WHISTLE\"] = \"tangerineWhistle\";\n  HardforkName[\"SPURIOUS_DRAGON\"] = \"spuriousDragon\";\n  HardforkName[\"BYZANTIUM\"] = \"byzantium\";\n  HardforkName[\"CONSTANTINOPLE\"] = \"constantinople\";\n  HardforkName[\"PETERSBURG\"] = \"petersburg\";\n  HardforkName[\"ISTANBUL\"] = \"istanbul\";\n  HardforkName[\"MUIR_GLACIER\"] = \"muirGlacier\";\n  HardforkName[\"BERLIN\"] = \"berlin\";\n  HardforkName[\"LONDON\"] = \"london\";\n})(HardforkName = exports.HardforkName || (exports.HardforkName = {}));\n\nconst HARDFORKS_ORDER = [HardforkName.FRONTIER, HardforkName.HOMESTEAD, HardforkName.DAO, HardforkName.TANGERINE_WHISTLE, HardforkName.SPURIOUS_DRAGON, HardforkName.BYZANTIUM, HardforkName.CONSTANTINOPLE, HardforkName.PETERSBURG, HardforkName.ISTANBUL, HardforkName.MUIR_GLACIER, HardforkName.BERLIN, HardforkName.LONDON];\n\nfunction getHardforkName(name) {\n  const hardforkName = Object.values(HardforkName)[Object.values(HardforkName).indexOf(name)];\n  errors_1.assertHardhatInvariant(hardforkName !== undefined, `Invalid harfork name ${name}`);\n  return hardforkName;\n}\n\nexports.getHardforkName = getHardforkName;\n/**\n * Check if `hardforkA` is greater than or equal to `hardforkB`,\n * that is, if it includes all its changes.\n */\n\nfunction hardforkGte(hardforkA, hardforkB) {\n  // This function should not load any ethereumjs library, as it's used during\n  // the Hardhat initialization, and that would make it too slow.\n  const indexA = HARDFORKS_ORDER.lastIndexOf(hardforkA);\n  const indexB = HARDFORKS_ORDER.lastIndexOf(hardforkB);\n  return indexA >= indexB;\n}\n\nexports.hardforkGte = hardforkGte;","map":{"version":3,"sources":["../../src/internal/util/hardforks.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAY,YAAZ;;AAAA,CAAA,UAAY,YAAZ,EAAwB;AACtB,EAAA,YAAA,CAAA,UAAA,CAAA,GAAA,YAAA;AACA,EAAA,YAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,YAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,YAAA,CAAA,mBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,YAAA,CAAA,iBAAA,CAAA,GAAA,gBAAA;AACA,EAAA,YAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,YAAA,CAAA,gBAAA,CAAA,GAAA,gBAAA;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,GAAA,YAAA;AACA,EAAA,YAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,YAAA,CAAA,cAAA,CAAA,GAAA,aAAA;AACA,EAAA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,YAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAbD,EAAY,YAAY,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAZ;;AAeA,MAAM,eAAe,GAAmB,CACtC,YAAY,CAAC,QADyB,EAEtC,YAAY,CAAC,SAFyB,EAGtC,YAAY,CAAC,GAHyB,EAItC,YAAY,CAAC,iBAJyB,EAKtC,YAAY,CAAC,eALyB,EAMtC,YAAY,CAAC,SANyB,EAOtC,YAAY,CAAC,cAPyB,EAQtC,YAAY,CAAC,UARyB,EAStC,YAAY,CAAC,QATyB,EAUtC,YAAY,CAAC,YAVyB,EAWtC,YAAY,CAAC,MAXyB,EAYtC,YAAY,CAAC,MAZyB,CAAxC;;AAeA,SAAgB,eAAhB,CAAgC,IAAhC,EAA4C;AAC1C,QAAM,YAAY,GAChB,MAAM,CAAC,MAAP,CAAc,YAAd,EACE,MAAM,CAAC,MAAP,CAAsB,YAAtB,EAAoC,OAApC,CAA4C,IAA5C,CADF,CADF;AAKA,EAAA,QAAA,CAAA,sBAAA,CACE,YAAY,KAAK,SADnB,EAEE,wBAAwB,IAAI,EAF9B;AAKA,SAAO,YAAP;AACD;;AAZD,OAAA,CAAA,eAAA,GAAA,eAAA;AAcA;;;AAGG;;AACH,SAAgB,WAAhB,CACE,SADF,EAEE,SAFF,EAEyB;AAEvB;AACA;AACA,QAAM,MAAM,GAAG,eAAe,CAAC,WAAhB,CAA4B,SAA5B,CAAf;AACA,QAAM,MAAM,GAAG,eAAe,CAAC,WAAhB,CAA4B,SAA5B,CAAf;AAEA,SAAO,MAAM,IAAI,MAAjB;AACD;;AAVD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforkGte = exports.getHardforkName = exports.HardforkName = void 0;\nconst errors_1 = require(\"../core/errors\");\nvar HardforkName;\n(function (HardforkName) {\n    HardforkName[\"FRONTIER\"] = \"chainstart\";\n    HardforkName[\"HOMESTEAD\"] = \"homestead\";\n    HardforkName[\"DAO\"] = \"dao\";\n    HardforkName[\"TANGERINE_WHISTLE\"] = \"tangerineWhistle\";\n    HardforkName[\"SPURIOUS_DRAGON\"] = \"spuriousDragon\";\n    HardforkName[\"BYZANTIUM\"] = \"byzantium\";\n    HardforkName[\"CONSTANTINOPLE\"] = \"constantinople\";\n    HardforkName[\"PETERSBURG\"] = \"petersburg\";\n    HardforkName[\"ISTANBUL\"] = \"istanbul\";\n    HardforkName[\"MUIR_GLACIER\"] = \"muirGlacier\";\n    HardforkName[\"BERLIN\"] = \"berlin\";\n    HardforkName[\"LONDON\"] = \"london\";\n})(HardforkName = exports.HardforkName || (exports.HardforkName = {}));\nconst HARDFORKS_ORDER = [\n    HardforkName.FRONTIER,\n    HardforkName.HOMESTEAD,\n    HardforkName.DAO,\n    HardforkName.TANGERINE_WHISTLE,\n    HardforkName.SPURIOUS_DRAGON,\n    HardforkName.BYZANTIUM,\n    HardforkName.CONSTANTINOPLE,\n    HardforkName.PETERSBURG,\n    HardforkName.ISTANBUL,\n    HardforkName.MUIR_GLACIER,\n    HardforkName.BERLIN,\n    HardforkName.LONDON,\n];\nfunction getHardforkName(name) {\n    const hardforkName = Object.values(HardforkName)[Object.values(HardforkName).indexOf(name)];\n    errors_1.assertHardhatInvariant(hardforkName !== undefined, `Invalid harfork name ${name}`);\n    return hardforkName;\n}\nexports.getHardforkName = getHardforkName;\n/**\n * Check if `hardforkA` is greater than or equal to `hardforkB`,\n * that is, if it includes all its changes.\n */\nfunction hardforkGte(hardforkA, hardforkB) {\n    // This function should not load any ethereumjs library, as it's used during\n    // the Hardhat initialization, and that would make it too slow.\n    const indexA = HARDFORKS_ORDER.lastIndexOf(hardforkA);\n    const indexB = HARDFORKS_ORDER.lastIndexOf(hardforkB);\n    return indexA >= indexB;\n}\nexports.hardforkGte = hardforkGte;\n//# sourceMappingURL=hardforks.js.map"]},"metadata":{},"sourceType":"script"}