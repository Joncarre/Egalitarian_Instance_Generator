{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getClosestCallerPackage = void 0;\n\nconst find_up_1 = __importDefault(require(\"find-up\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nfunction findClosestPackageJson(file) {\n  return find_up_1.default.sync(\"package.json\", {\n    cwd: path_1.default.dirname(file)\n  });\n}\n/**\n * Returns the name of the closest package in the callstack that isn't this.\n */\n\n\nfunction getClosestCallerPackage() {\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n\n  Error.prepareStackTrace = (e, s) => s;\n\n  const error = new Error();\n  const stack = error.stack;\n  Error.prepareStackTrace = previousPrepareStackTrace;\n  const currentPackage = findClosestPackageJson(__filename);\n\n  for (const callSite of stack) {\n    const fileName = callSite.getFileName();\n\n    if (fileName !== null && path_1.default.isAbsolute(fileName)) {\n      const callerPackage = findClosestPackageJson(fileName);\n\n      if (callerPackage === currentPackage) {\n        continue;\n      }\n\n      if (callerPackage === null) {\n        return undefined;\n      }\n\n      return require(callerPackage).name;\n    }\n  }\n\n  return undefined;\n}\n\nexports.getClosestCallerPackage = getClosestCallerPackage;","map":{"version":3,"sources":["../../src/internal/util/caller-package.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,SAAS,sBAAT,CAAgC,IAAhC,EAA4C;AAC1C,SAAO,SAAA,CAAA,OAAA,CAAO,IAAP,CAAY,cAAZ,EAA4B;AAAE,IAAA,GAAG,EAAE,MAAA,CAAA,OAAA,CAAK,OAAL,CAAa,IAAb;AAAP,GAA5B,CAAP;AACD;AAED;;AAEG;;;AACH,SAAgB,uBAAhB,GAAuC;AACrC,QAAM,yBAAyB,GAAG,KAAK,CAAC,iBAAxC;;AAEA,EAAA,KAAK,CAAC,iBAAN,GAA0B,CAAC,CAAD,EAAI,CAAJ,KAAU,CAApC;;AAEA,QAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,QAAM,KAAK,GAAsB,KAAK,CAAC,KAAvC;AAEA,EAAA,KAAK,CAAC,iBAAN,GAA0B,yBAA1B;AAEA,QAAM,cAAc,GAAG,sBAAsB,CAAC,UAAD,CAA7C;;AAEA,OAAK,MAAM,QAAX,IAAuB,KAAvB,EAA8B;AAC5B,UAAM,QAAQ,GAAG,QAAQ,CAAC,WAAT,EAAjB;;AACA,QAAI,QAAQ,KAAK,IAAb,IAAqB,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,QAAhB,CAAzB,EAAoD;AAClD,YAAM,aAAa,GAAG,sBAAsB,CAAC,QAAD,CAA5C;;AAEA,UAAI,aAAa,KAAK,cAAtB,EAAsC;AACpC;AACD;;AAED,UAAI,aAAa,KAAK,IAAtB,EAA4B;AAC1B,eAAO,SAAP;AACD;;AAED,aAAO,OAAO,CAAC,aAAD,CAAP,CAAuB,IAA9B;AACD;AACF;;AAED,SAAO,SAAP;AACD;;AA9BD,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getClosestCallerPackage = void 0;\nconst find_up_1 = __importDefault(require(\"find-up\"));\nconst path_1 = __importDefault(require(\"path\"));\nfunction findClosestPackageJson(file) {\n    return find_up_1.default.sync(\"package.json\", { cwd: path_1.default.dirname(file) });\n}\n/**\n * Returns the name of the closest package in the callstack that isn't this.\n */\nfunction getClosestCallerPackage() {\n    const previousPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (e, s) => s;\n    const error = new Error();\n    const stack = error.stack;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    const currentPackage = findClosestPackageJson(__filename);\n    for (const callSite of stack) {\n        const fileName = callSite.getFileName();\n        if (fileName !== null && path_1.default.isAbsolute(fileName)) {\n            const callerPackage = findClosestPackageJson(fileName);\n            if (callerPackage === currentPackage) {\n                continue;\n            }\n            if (callerPackage === null) {\n                return undefined;\n            }\n            return require(callerPackage).name;\n        }\n    }\n    return undefined;\n}\nexports.getClosestCallerPackage = getClosestCallerPackage;\n//# sourceMappingURL=caller-package.js.map"]},"metadata":{},"sourceType":"script"}