{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceAll = exports.pluralize = void 0;\n/**\n * Returns the plural form of a word.\n *\n * @param n The number of things to represent. This dictates whether to return\n * the singular or plural form of the word.\n * @param singular The singular form of the word.\n * @param plural An optional plural form of the word. If non is given, the\n * plural form is constructed by appending an \"s\" to the singular form.\n */\n\nfunction pluralize(n, singular, plural) {\n  if (n === 1) {\n    return singular;\n  }\n\n  if (plural !== undefined) {\n    return plural;\n  }\n\n  return `${singular}s`;\n}\n\nexports.pluralize = pluralize;\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\n\nfunction replaceAll(str, toReplace, replacement) {\n  return str.split(toReplace).join(replacement);\n}\n\nexports.replaceAll = replaceAll;","map":{"version":3,"sources":["../../src/internal/util/strings.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;AAQG;;AACH,SAAgB,SAAhB,CAA0B,CAA1B,EAAqC,QAArC,EAAuD,MAAvD,EAAsE;AACpE,MAAI,CAAC,KAAK,CAAV,EAAa;AACX,WAAO,QAAP;AACD;;AAED,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,MAAP;AACD;;AAED,SAAO,GAAG,QAAQ,GAAlB;AACD;;AAVD,OAAA,CAAA,SAAA,GAAA,SAAA;AAYA;;AAEG;;AACH,SAAgB,UAAhB,CACE,GADF,EAEE,SAFF,EAGE,WAHF,EAGqB;AAEnB,SAAO,GAAG,CAAC,KAAJ,CAAU,SAAV,EAAqB,IAArB,CAA0B,WAA1B,CAAP;AACD;;AAND,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceAll = exports.pluralize = void 0;\n/**\n * Returns the plural form of a word.\n *\n * @param n The number of things to represent. This dictates whether to return\n * the singular or plural form of the word.\n * @param singular The singular form of the word.\n * @param plural An optional plural form of the word. If non is given, the\n * plural form is constructed by appending an \"s\" to the singular form.\n */\nfunction pluralize(n, singular, plural) {\n    if (n === 1) {\n        return singular;\n    }\n    if (plural !== undefined) {\n        return plural;\n    }\n    return `${singular}s`;\n}\nexports.pluralize = pluralize;\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\nfunction replaceAll(str, toReplace, replacement) {\n    return str.split(toReplace).join(replacement);\n}\nexports.replaceAll = replaceAll;\n//# sourceMappingURL=strings.js.map"]},"metadata":{},"sourceType":"script"}