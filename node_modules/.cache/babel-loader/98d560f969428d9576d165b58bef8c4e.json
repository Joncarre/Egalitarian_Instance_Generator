{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchCompilerOutput = void 0;\n\nconst chalk_1 = __importDefault(require(\"chalk\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst constants_1 = require(\"../../internal/constants\");\n\nconst reporter_1 = require(\"../../internal/sentry/reporter\");\n\nconst log = debug_1.default(\"hardhat:core:compilation-watcher\");\n\nasync function watchCompilerOutput(provider, paths) {\n  const chokidar = await Promise.resolve().then(() => __importStar(require(\"chokidar\")));\n  const buildInfoDir = path.join(paths.artifacts, constants_1.BUILD_INFO_DIR_NAME);\n\n  const addCompilationResult = async buildInfo => {\n    try {\n      log(\"Adding new compilation result to the node\");\n      const {\n        input,\n        output,\n        solcVersion\n      } = await fs_extra_1.default.readJSON(buildInfo, {\n        encoding: \"utf8\"\n      });\n      await provider.request({\n        method: \"hardhat_addCompilationResult\",\n        params: [solcVersion, input, output]\n      });\n    } catch (error) {\n      console.warn(chalk_1.default.yellow(\"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"));\n      log(\"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\", error);\n      reporter_1.Reporter.reportError(error);\n    }\n  };\n\n  log(`Watching changes on '${buildInfoDir}'`);\n  chokidar.watch(buildInfoDir, {\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 250,\n      pollInterval: 50\n    }\n  }).on(\"add\", addCompilationResult);\n}\n\nexports.watchCompilerOutput = watchCompilerOutput;","map":{"version":3,"sources":["../../src/builtin-tasks/utils/watch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,MAAA,IAAA,GAAA,YAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AAGA,MAAM,GAAG,GAAG,OAAA,CAAA,OAAA,CAAM,kCAAN,CAAZ;;AAEO,eAAe,mBAAf,CACL,QADK,EAEL,KAFK,EAEoB;AAEzB,QAAM,QAAQ,GAAG,MAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,MAAA,YAAA,CAAA,OAAA,CAAa,UAAb,CAAA,CAAA,CAAjB;AAEA,QAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,SAAhB,EAA2B,WAAA,CAAA,mBAA3B,CAArB;;AAEA,QAAM,oBAAoB,GAAG,MAAO,SAAP,IAA4B;AACvD,QAAI;AACF,MAAA,GAAG,CAAC,2CAAD,CAAH;AAEA,YAAM;AAAE,QAAA,KAAF;AAAS,QAAA,MAAT;AAAiB,QAAA;AAAjB,UAAiC,MAAM,UAAA,CAAA,OAAA,CAAQ,QAAR,CAAiB,SAAjB,EAA4B;AACvE,QAAA,QAAQ,EAAE;AAD6D,OAA5B,CAA7C;AAIA,YAAM,QAAQ,CAAC,OAAT,CAAiB;AACrB,QAAA,MAAM,EAAE,8BADa;AAErB,QAAA,MAAM,EAAE,CAAC,WAAD,EAAc,KAAd,EAAqB,MAArB;AAFa,OAAjB,CAAN;AAID,KAXD,CAWE,OAAO,KAAP,EAAc;AACd,MAAA,OAAO,CAAC,IAAR,CACE,OAAA,CAAA,OAAA,CAAM,MAAN,CACE,+FADF,CADF;AAMA,MAAA,GAAG,CACD,6FADC,EAED,KAFC,CAAH;AAKA,MAAA,UAAA,CAAA,QAAA,CAAS,WAAT,CAAqB,KAArB;AACD;AACF,GA1BD;;AA4BA,EAAA,GAAG,CAAC,wBAAwB,YAAY,GAArC,CAAH;AAEA,EAAA,QAAQ,CACL,KADH,CACS,YADT,EACuB;AACnB,IAAA,aAAa,EAAE,IADI;AAEnB,IAAA,gBAAgB,EAAE;AAChB,MAAA,kBAAkB,EAAE,GADJ;AAEhB,MAAA,YAAY,EAAE;AAFE;AAFC,GADvB,EAQG,EARH,CAQM,KARN,EAQa,oBARb;AASD;;AA/CD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.watchCompilerOutput = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path = __importStar(require(\"path\"));\nconst constants_1 = require(\"../../internal/constants\");\nconst reporter_1 = require(\"../../internal/sentry/reporter\");\nconst log = debug_1.default(\"hardhat:core:compilation-watcher\");\nasync function watchCompilerOutput(provider, paths) {\n    const chokidar = await Promise.resolve().then(() => __importStar(require(\"chokidar\")));\n    const buildInfoDir = path.join(paths.artifacts, constants_1.BUILD_INFO_DIR_NAME);\n    const addCompilationResult = async (buildInfo) => {\n        try {\n            log(\"Adding new compilation result to the node\");\n            const { input, output, solcVersion } = await fs_extra_1.default.readJSON(buildInfo, {\n                encoding: \"utf8\",\n            });\n            await provider.request({\n                method: \"hardhat_addCompilationResult\",\n                params: [solcVersion, input, output],\n            });\n        }\n        catch (error) {\n            console.warn(chalk_1.default.yellow(\"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"));\n            log(\"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\", error);\n            reporter_1.Reporter.reportError(error);\n        }\n    };\n    log(`Watching changes on '${buildInfoDir}'`);\n    chokidar\n        .watch(buildInfoDir, {\n        ignoreInitial: true,\n        awaitWriteFinish: {\n            stabilityThreshold: 250,\n            pollInterval: 50,\n        },\n    })\n        .on(\"add\", addCompilationResult);\n}\nexports.watchCompilerOutput = watchCompilerOutput;\n//# sourceMappingURL=watch.js.map"]},"metadata":{},"sourceType":"script"}