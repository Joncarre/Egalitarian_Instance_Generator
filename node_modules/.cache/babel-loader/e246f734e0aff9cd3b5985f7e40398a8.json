{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValidationErrors = exports.validateConfig = exports.decimalString = exports.hexString = exports.DotPathReporter = exports.success = exports.failure = void 0;\n\nconst t = __importStar(require(\"io-ts\"));\n\nconst lib_1 = require(\"io-ts/lib\");\n\nconst constants_1 = require(\"../../constants\");\n\nconst io_ts_1 = require(\"../../util/io-ts\");\n\nconst lang_1 = require(\"../../util/lang\");\n\nconst errors_1 = require(\"../errors\");\n\nconst errors_list_1 = require(\"../errors-list\");\n\nconst hardforks_1 = require(\"../../util/hardforks\");\n\nconst default_config_1 = require(\"./default-config\");\n\nfunction stringify(v) {\n  if (typeof v === \"function\") {\n    return lib_1.getFunctionName(v);\n  }\n\n  if (typeof v === \"number\" && !isFinite(v)) {\n    if (isNaN(v)) {\n      return \"NaN\";\n    }\n\n    return v > 0 ? \"Infinity\" : \"-Infinity\";\n  }\n\n  return JSON.stringify(v);\n}\n\nfunction getContextPath(context) {\n  const keysPath = context.slice(1).map(c => c.key).join(\".\");\n  return `${context[0].type.name}.${keysPath}`;\n}\n\nfunction getMessage(e) {\n  const lastContext = e.context[e.context.length - 1];\n  return e.message !== undefined ? e.message : getErrorMessage(getContextPath(e.context), e.value, lastContext.type.name);\n}\n\nfunction getErrorMessage(path, value, expectedType) {\n  return `Invalid value ${stringify(value)} for ${path} - Expected a value of type ${expectedType}.`;\n}\n\nfunction failure(es) {\n  return es.map(getMessage);\n}\n\nexports.failure = failure;\n\nfunction success() {\n  return [];\n}\n\nexports.success = success;\nexports.DotPathReporter = {\n  report: validation => validation.fold(failure, success)\n};\nconst HEX_STRING_REGEX = /^(0x)?([0-9a-f]{2})+$/gi;\nconst DEC_STRING_REGEX = /^(0|[1-9][0-9]*)$/g;\n\nfunction isHexString(v) {\n  if (typeof v !== \"string\") {\n    return false;\n  }\n\n  return v.trim().match(HEX_STRING_REGEX) !== null;\n}\n\nfunction isDecimalString(v) {\n  if (typeof v !== \"string\") {\n    return false;\n  }\n\n  return v.match(DEC_STRING_REGEX) !== null;\n}\n\nexports.hexString = new t.Type(\"hex string\", isHexString, (u, c) => isHexString(u) ? t.success(u) : t.failure(u, c), t.identity);\nexports.decimalString = new t.Type(\"decimal string\", isDecimalString, (u, c) => isDecimalString(u) ? t.success(u) : t.failure(u, c), t.identity); // TODO: These types have outdated name. They should match the UserConfig types.\n// IMPORTANT: This t.types MUST be kept in sync with the actual types.\n\nconst HardhatNetworkAccount = t.type({\n  privateKey: exports.hexString,\n  balance: exports.decimalString\n});\nconst commonHDAccountsFields = {\n  initialIndex: io_ts_1.optional(t.number),\n  count: io_ts_1.optional(t.number),\n  path: io_ts_1.optional(t.string)\n};\nconst HardhatNetworkHDAccountsConfig = t.type(Object.assign({\n  mnemonic: io_ts_1.optional(t.string),\n  accountsBalance: io_ts_1.optional(exports.decimalString)\n}, commonHDAccountsFields));\nconst HardhatNetworkForkingConfig = t.type({\n  enabled: io_ts_1.optional(t.boolean),\n  url: t.string,\n  blockNumber: io_ts_1.optional(t.number)\n});\nconst commonNetworkConfigFields = {\n  chainId: io_ts_1.optional(t.number),\n  from: io_ts_1.optional(t.string),\n  gas: io_ts_1.optional(t.union([t.literal(\"auto\"), t.number])),\n  gasPrice: io_ts_1.optional(t.union([t.literal(\"auto\"), t.number])),\n  gasMultiplier: io_ts_1.optional(t.number)\n};\nconst HardhatNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), {\n  hardfork: io_ts_1.optional(t.keyof(lang_1.fromEntries(constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.map(hf => [hf, null])))),\n  accounts: io_ts_1.optional(t.union([t.array(HardhatNetworkAccount), HardhatNetworkHDAccountsConfig])),\n  blockGasLimit: io_ts_1.optional(t.number),\n  minGasPrice: io_ts_1.optional(t.union([t.number, t.string])),\n  throwOnTransactionFailures: io_ts_1.optional(t.boolean),\n  throwOnCallFailures: io_ts_1.optional(t.boolean),\n  allowUnlimitedContractSize: io_ts_1.optional(t.boolean),\n  initialDate: io_ts_1.optional(t.string),\n  loggingEnabled: io_ts_1.optional(t.boolean),\n  forking: io_ts_1.optional(HardhatNetworkForkingConfig)\n}));\nconst HDAccountsConfig = t.type(Object.assign({\n  mnemonic: t.string\n}, commonHDAccountsFields));\nconst NetworkConfigAccounts = t.union([t.literal(\"remote\"), t.array(exports.hexString), HDAccountsConfig]);\nconst HttpHeaders = t.record(t.string, t.string, \"httpHeaders\");\nconst HttpNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), {\n  url: io_ts_1.optional(t.string),\n  accounts: io_ts_1.optional(NetworkConfigAccounts),\n  httpHeaders: io_ts_1.optional(HttpHeaders),\n  timeout: io_ts_1.optional(t.number)\n}));\nconst NetworkConfig = t.union([HardhatNetworkConfig, HttpNetworkConfig]);\nconst Networks = t.record(t.string, NetworkConfig);\nconst ProjectPaths = t.type({\n  root: io_ts_1.optional(t.string),\n  cache: io_ts_1.optional(t.string),\n  artifacts: io_ts_1.optional(t.string),\n  sources: io_ts_1.optional(t.string),\n  tests: io_ts_1.optional(t.string)\n});\nconst SingleSolcConfig = t.type({\n  version: t.string,\n  settings: io_ts_1.optional(t.any)\n});\nconst MultiSolcConfig = t.type({\n  compilers: t.array(SingleSolcConfig),\n  overrides: io_ts_1.optional(t.record(t.string, SingleSolcConfig))\n});\nconst SolidityConfig = t.union([t.string, SingleSolcConfig, MultiSolcConfig]);\nconst HardhatConfig = t.type({\n  defaultNetwork: io_ts_1.optional(t.string),\n  networks: io_ts_1.optional(Networks),\n  paths: io_ts_1.optional(ProjectPaths),\n  solidity: io_ts_1.optional(SolidityConfig)\n}, \"HardhatConfig\");\n/**\n * Validates the config, throwing a HardhatError if invalid.\n * @param config\n */\n\nfunction validateConfig(config) {\n  const errors = getValidationErrors(config);\n\n  if (errors.length === 0) {\n    return;\n  }\n\n  let errorList = errors.join(\"\\n  * \");\n  errorList = `  * ${errorList}`;\n  throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_CONFIG, {\n    errors: errorList\n  });\n}\n\nexports.validateConfig = validateConfig;\n\nfunction getValidationErrors(config) {\n  var _a;\n\n  const errors = []; // These can't be validated with io-ts\n\n  if (config !== undefined && typeof config.networks === \"object\") {\n    const hardhatNetwork = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n\n    if (hardhatNetwork !== undefined && typeof hardhatNetwork === \"object\") {\n      if (\"url\" in hardhatNetwork) {\n        errors.push(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME} can't have an url`);\n      } // Validating the accounts with io-ts leads to very confusing errors messages\n\n\n      const configExceptAccounts = Object.assign({}, hardhatNetwork);\n      delete configExceptAccounts.accounts;\n      const netConfigResult = HardhatNetworkConfig.decode(configExceptAccounts);\n\n      if (netConfigResult.isLeft()) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}`, hardhatNetwork, \"HardhatNetworkConfig\"));\n      }\n\n      if (Array.isArray(hardhatNetwork.accounts)) {\n        for (const account of hardhatNetwork.accounts) {\n          if (typeof account.privateKey !== \"string\") {\n            errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].privateKey`, account.privateKey, \"string\"));\n          }\n\n          if (typeof account.balance !== \"string\") {\n            errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, account.balance, \"string\"));\n          } else if (exports.decimalString.decode(account.balance).isLeft()) {\n            errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, account.balance, \"decimal(wei)\"));\n          }\n        }\n      } else if (typeof hardhatNetwork.accounts === \"object\") {\n        const hdConfigResult = HardhatNetworkHDAccountsConfig.decode(hardhatNetwork.accounts);\n\n        if (hdConfigResult.isLeft()) {\n          errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n        }\n      } else if (hardhatNetwork.accounts !== undefined) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n      }\n\n      const hardfork = (_a = hardhatNetwork.hardfork) !== null && _a !== void 0 ? _a : default_config_1.defaultHardhatNetworkParams.hardfork;\n\n      if (hardforks_1.hardforkGte(hardfork, hardforks_1.HardforkName.LONDON)) {\n        if (hardhatNetwork.minGasPrice !== undefined) {\n          errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.minGasPrice found - This field is not valid for networks with EIP-1559. Try an older hardfork or remove it.`);\n        }\n      } else {\n        if (hardhatNetwork.initialBaseFeePerGas !== undefined) {\n          errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.initialBaseFeePerGas found - This field is only valid for networks with EIP-1559. Try a newer hardfork or remove it.`);\n        }\n      }\n    }\n\n    for (const [networkName, netConfig] of Object.entries(config.networks)) {\n      if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n        continue;\n      }\n\n      if (networkName !== \"localhost\" || netConfig.url !== undefined) {\n        if (typeof netConfig.url !== \"string\") {\n          errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.url`, netConfig.url, \"string\"));\n        }\n      }\n\n      const netConfigResult = HttpNetworkConfig.decode(netConfig);\n\n      if (netConfigResult.isLeft()) {\n        errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, netConfig, \"HttpNetworkConfig\"));\n      }\n    }\n  } // io-ts can get confused if there are errors that it can't understand.\n  // Especially around Hardhat Network's config. It will treat it as an HTTPConfig,\n  // and may give a loot of errors.\n\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const result = HardhatConfig.decode(config);\n\n  if (result.isRight()) {\n    return errors;\n  }\n\n  const ioTsErrors = exports.DotPathReporter.report(result);\n  return [...errors, ...ioTsErrors];\n}\n\nexports.getValidationErrors = getValidationErrors;","map":{"version":3,"sources":["../../../src/internal/core/config/config-validation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValidationErrors = exports.validateConfig = exports.decimalString = exports.hexString = exports.DotPathReporter = exports.success = exports.failure = void 0;\nconst t = __importStar(require(\"io-ts\"));\nconst lib_1 = require(\"io-ts/lib\");\nconst constants_1 = require(\"../../constants\");\nconst io_ts_1 = require(\"../../util/io-ts\");\nconst lang_1 = require(\"../../util/lang\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst hardforks_1 = require(\"../../util/hardforks\");\nconst default_config_1 = require(\"./default-config\");\nfunction stringify(v) {\n    if (typeof v === \"function\") {\n        return lib_1.getFunctionName(v);\n    }\n    if (typeof v === \"number\" && !isFinite(v)) {\n        if (isNaN(v)) {\n            return \"NaN\";\n        }\n        return v > 0 ? \"Infinity\" : \"-Infinity\";\n    }\n    return JSON.stringify(v);\n}\nfunction getContextPath(context) {\n    const keysPath = context\n        .slice(1)\n        .map((c) => c.key)\n        .join(\".\");\n    return `${context[0].type.name}.${keysPath}`;\n}\nfunction getMessage(e) {\n    const lastContext = e.context[e.context.length - 1];\n    return e.message !== undefined\n        ? e.message\n        : getErrorMessage(getContextPath(e.context), e.value, lastContext.type.name);\n}\nfunction getErrorMessage(path, value, expectedType) {\n    return `Invalid value ${stringify(value)} for ${path} - Expected a value of type ${expectedType}.`;\n}\nfunction failure(es) {\n    return es.map(getMessage);\n}\nexports.failure = failure;\nfunction success() {\n    return [];\n}\nexports.success = success;\nexports.DotPathReporter = {\n    report: (validation) => validation.fold(failure, success),\n};\nconst HEX_STRING_REGEX = /^(0x)?([0-9a-f]{2})+$/gi;\nconst DEC_STRING_REGEX = /^(0|[1-9][0-9]*)$/g;\nfunction isHexString(v) {\n    if (typeof v !== \"string\") {\n        return false;\n    }\n    return v.trim().match(HEX_STRING_REGEX) !== null;\n}\nfunction isDecimalString(v) {\n    if (typeof v !== \"string\") {\n        return false;\n    }\n    return v.match(DEC_STRING_REGEX) !== null;\n}\nexports.hexString = new t.Type(\"hex string\", isHexString, (u, c) => (isHexString(u) ? t.success(u) : t.failure(u, c)), t.identity);\nexports.decimalString = new t.Type(\"decimal string\", isDecimalString, (u, c) => (isDecimalString(u) ? t.success(u) : t.failure(u, c)), t.identity);\n// TODO: These types have outdated name. They should match the UserConfig types.\n// IMPORTANT: This t.types MUST be kept in sync with the actual types.\nconst HardhatNetworkAccount = t.type({\n    privateKey: exports.hexString,\n    balance: exports.decimalString,\n});\nconst commonHDAccountsFields = {\n    initialIndex: io_ts_1.optional(t.number),\n    count: io_ts_1.optional(t.number),\n    path: io_ts_1.optional(t.string),\n};\nconst HardhatNetworkHDAccountsConfig = t.type(Object.assign({ mnemonic: io_ts_1.optional(t.string), accountsBalance: io_ts_1.optional(exports.decimalString) }, commonHDAccountsFields));\nconst HardhatNetworkForkingConfig = t.type({\n    enabled: io_ts_1.optional(t.boolean),\n    url: t.string,\n    blockNumber: io_ts_1.optional(t.number),\n});\nconst commonNetworkConfigFields = {\n    chainId: io_ts_1.optional(t.number),\n    from: io_ts_1.optional(t.string),\n    gas: io_ts_1.optional(t.union([t.literal(\"auto\"), t.number])),\n    gasPrice: io_ts_1.optional(t.union([t.literal(\"auto\"), t.number])),\n    gasMultiplier: io_ts_1.optional(t.number),\n};\nconst HardhatNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), { hardfork: io_ts_1.optional(t.keyof(lang_1.fromEntries(constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.map((hf) => [hf, null])))), accounts: io_ts_1.optional(t.union([t.array(HardhatNetworkAccount), HardhatNetworkHDAccountsConfig])), blockGasLimit: io_ts_1.optional(t.number), minGasPrice: io_ts_1.optional(t.union([t.number, t.string])), throwOnTransactionFailures: io_ts_1.optional(t.boolean), throwOnCallFailures: io_ts_1.optional(t.boolean), allowUnlimitedContractSize: io_ts_1.optional(t.boolean), initialDate: io_ts_1.optional(t.string), loggingEnabled: io_ts_1.optional(t.boolean), forking: io_ts_1.optional(HardhatNetworkForkingConfig) }));\nconst HDAccountsConfig = t.type(Object.assign({ mnemonic: t.string }, commonHDAccountsFields));\nconst NetworkConfigAccounts = t.union([\n    t.literal(\"remote\"),\n    t.array(exports.hexString),\n    HDAccountsConfig,\n]);\nconst HttpHeaders = t.record(t.string, t.string, \"httpHeaders\");\nconst HttpNetworkConfig = t.type(Object.assign(Object.assign({}, commonNetworkConfigFields), { url: io_ts_1.optional(t.string), accounts: io_ts_1.optional(NetworkConfigAccounts), httpHeaders: io_ts_1.optional(HttpHeaders), timeout: io_ts_1.optional(t.number) }));\nconst NetworkConfig = t.union([HardhatNetworkConfig, HttpNetworkConfig]);\nconst Networks = t.record(t.string, NetworkConfig);\nconst ProjectPaths = t.type({\n    root: io_ts_1.optional(t.string),\n    cache: io_ts_1.optional(t.string),\n    artifacts: io_ts_1.optional(t.string),\n    sources: io_ts_1.optional(t.string),\n    tests: io_ts_1.optional(t.string),\n});\nconst SingleSolcConfig = t.type({\n    version: t.string,\n    settings: io_ts_1.optional(t.any),\n});\nconst MultiSolcConfig = t.type({\n    compilers: t.array(SingleSolcConfig),\n    overrides: io_ts_1.optional(t.record(t.string, SingleSolcConfig)),\n});\nconst SolidityConfig = t.union([t.string, SingleSolcConfig, MultiSolcConfig]);\nconst HardhatConfig = t.type({\n    defaultNetwork: io_ts_1.optional(t.string),\n    networks: io_ts_1.optional(Networks),\n    paths: io_ts_1.optional(ProjectPaths),\n    solidity: io_ts_1.optional(SolidityConfig),\n}, \"HardhatConfig\");\n/**\n * Validates the config, throwing a HardhatError if invalid.\n * @param config\n */\nfunction validateConfig(config) {\n    const errors = getValidationErrors(config);\n    if (errors.length === 0) {\n        return;\n    }\n    let errorList = errors.join(\"\\n  * \");\n    errorList = `  * ${errorList}`;\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_CONFIG, { errors: errorList });\n}\nexports.validateConfig = validateConfig;\nfunction getValidationErrors(config) {\n    var _a;\n    const errors = [];\n    // These can't be validated with io-ts\n    if (config !== undefined && typeof config.networks === \"object\") {\n        const hardhatNetwork = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n        if (hardhatNetwork !== undefined && typeof hardhatNetwork === \"object\") {\n            if (\"url\" in hardhatNetwork) {\n                errors.push(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME} can't have an url`);\n            }\n            // Validating the accounts with io-ts leads to very confusing errors messages\n            const configExceptAccounts = Object.assign({}, hardhatNetwork);\n            delete configExceptAccounts.accounts;\n            const netConfigResult = HardhatNetworkConfig.decode(configExceptAccounts);\n            if (netConfigResult.isLeft()) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}`, hardhatNetwork, \"HardhatNetworkConfig\"));\n            }\n            if (Array.isArray(hardhatNetwork.accounts)) {\n                for (const account of hardhatNetwork.accounts) {\n                    if (typeof account.privateKey !== \"string\") {\n                        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].privateKey`, account.privateKey, \"string\"));\n                    }\n                    if (typeof account.balance !== \"string\") {\n                        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, account.balance, \"string\"));\n                    }\n                    else if (exports.decimalString.decode(account.balance).isLeft()) {\n                        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, account.balance, \"decimal(wei)\"));\n                    }\n                }\n            }\n            else if (typeof hardhatNetwork.accounts === \"object\") {\n                const hdConfigResult = HardhatNetworkHDAccountsConfig.decode(hardhatNetwork.accounts);\n                if (hdConfigResult.isLeft()) {\n                    errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n                }\n            }\n            else if (hardhatNetwork.accounts !== undefined) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n            }\n            const hardfork = (_a = hardhatNetwork.hardfork) !== null && _a !== void 0 ? _a : default_config_1.defaultHardhatNetworkParams.hardfork;\n            if (hardforks_1.hardforkGte(hardfork, hardforks_1.HardforkName.LONDON)) {\n                if (hardhatNetwork.minGasPrice !== undefined) {\n                    errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.minGasPrice found - This field is not valid for networks with EIP-1559. Try an older hardfork or remove it.`);\n                }\n            }\n            else {\n                if (hardhatNetwork.initialBaseFeePerGas !== undefined) {\n                    errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.initialBaseFeePerGas found - This field is only valid for networks with EIP-1559. Try a newer hardfork or remove it.`);\n                }\n            }\n        }\n        for (const [networkName, netConfig] of Object.entries(config.networks)) {\n            if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n                continue;\n            }\n            if (networkName !== \"localhost\" || netConfig.url !== undefined) {\n                if (typeof netConfig.url !== \"string\") {\n                    errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.url`, netConfig.url, \"string\"));\n                }\n            }\n            const netConfigResult = HttpNetworkConfig.decode(netConfig);\n            if (netConfigResult.isLeft()) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, netConfig, \"HttpNetworkConfig\"));\n            }\n        }\n    }\n    // io-ts can get confused if there are errors that it can't understand.\n    // Especially around Hardhat Network's config. It will treat it as an HTTPConfig,\n    // and may give a loot of errors.\n    if (errors.length > 0) {\n        return errors;\n    }\n    const result = HardhatConfig.decode(config);\n    if (result.isRight()) {\n        return errors;\n    }\n    const ioTsErrors = exports.DotPathReporter.report(result);\n    return [...errors, ...ioTsErrors];\n}\nexports.getValidationErrors = getValidationErrors;\n//# sourceMappingURL=config-validation.js.map"]},"metadata":{},"sourceType":"script"}