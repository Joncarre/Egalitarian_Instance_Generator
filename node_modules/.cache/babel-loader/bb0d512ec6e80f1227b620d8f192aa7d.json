{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveProjectPaths = exports.resolveConfig = void 0;\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\n\nconst path_1 = __importDefault(require(\"path\"));\n\nconst constants_1 = require(\"../../constants\");\n\nconst lang_1 = require(\"../../util/lang\");\n\nconst errors_1 = require(\"../errors\");\n\nconst default_config_1 = require(\"./default-config\");\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\n\n\nfunction resolveConfig(userConfigPath, userConfig) {\n  var _a;\n\n  userConfig = cloneDeep_1.default(userConfig);\n  return Object.assign(Object.assign({}, userConfig), {\n    defaultNetwork: (_a = userConfig.defaultNetwork) !== null && _a !== void 0 ? _a : default_config_1.defaultDefaultNetwork,\n    paths: resolveProjectPaths(userConfigPath, userConfig.paths),\n    networks: resolveNetworksConfig(userConfig.networks),\n    solidity: resolveSolidityConfig(userConfig),\n    mocha: resolveMochaConfig(userConfig)\n  });\n}\n\nexports.resolveConfig = resolveConfig;\n\nfunction resolveNetworksConfig(networksConfig = {}) {\n  var _a;\n\n  const hardhatNetworkConfig = networksConfig[constants_1.HARDHAT_NETWORK_NAME];\n  const localhostNetworkConfig = (_a = networksConfig.localhost) !== null && _a !== void 0 ? _a : undefined;\n  const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n  const localhost = resolveHttpNetworkConfig(Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultLocalhostNetworkParams)), localhostNetworkConfig));\n  const otherNetworks = lang_1.fromEntries(Object.entries(networksConfig).filter(([name, config]) => name !== \"localhost\" && name !== \"hardhat\" && config !== undefined && isHttpNetworkConfig(config)).map(([name, config]) => [name, resolveHttpNetworkConfig(config)]));\n  return Object.assign({\n    hardhat,\n    localhost\n  }, otherNetworks);\n}\n\nfunction isHttpNetworkConfig(config) {\n  return \"url\" in config;\n}\n\nfunction normalizeHexString(str) {\n  const normalized = str.trim().toLowerCase();\n\n  if (normalized.startsWith(\"0x\")) {\n    return normalized;\n  }\n\n  return `0x${normalized}`;\n}\n\nfunction resolveHardhatNetworkConfig(hardhatNetworkConfig = {}) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const clonedDefaultHardhatNetworkParams = cloneDeep_1.default(default_config_1.defaultHardhatNetworkParams);\n  const accounts = hardhatNetworkConfig.accounts === undefined ? default_config_1.defaultHardhatNetworkHdAccountsConfigParams : Array.isArray(hardhatNetworkConfig.accounts) ? hardhatNetworkConfig.accounts.map(({\n    privateKey,\n    balance\n  }) => ({\n    privateKey: normalizeHexString(privateKey),\n    balance\n  })) : Object.assign(Object.assign({}, default_config_1.defaultHardhatNetworkHdAccountsConfigParams), hardhatNetworkConfig.accounts);\n  const forking = hardhatNetworkConfig.forking !== undefined ? {\n    url: hardhatNetworkConfig.forking.url,\n    enabled: (_a = hardhatNetworkConfig.forking.enabled) !== null && _a !== void 0 ? _a : true\n  } : undefined;\n  const blockNumber = (_b = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _b === void 0 ? void 0 : _b.blockNumber;\n\n  if (blockNumber !== undefined && forking !== undefined) {\n    forking.blockNumber = (_c = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _c === void 0 ? void 0 : _c.blockNumber;\n  }\n\n  const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n  const minGasPrice = new ethereumjs_util_1.BN((_d = hardhatNetworkConfig.minGasPrice) !== null && _d !== void 0 ? _d : clonedDefaultHardhatNetworkParams.minGasPrice);\n  const blockGasLimit = (_e = hardhatNetworkConfig.blockGasLimit) !== null && _e !== void 0 ? _e : clonedDefaultHardhatNetworkParams.blockGasLimit;\n  const gas = (_f = hardhatNetworkConfig.gas) !== null && _f !== void 0 ? _f : blockGasLimit;\n  const initialDate = (_g = hardhatNetworkConfig.initialDate) !== null && _g !== void 0 ? _g : new Date().toISOString();\n  const config = Object.assign(Object.assign(Object.assign({}, clonedDefaultHardhatNetworkParams), hardhatNetworkConfig), {\n    accounts,\n    forking,\n    mining,\n    blockGasLimit,\n    gas,\n    initialDate,\n    minGasPrice\n  }); // We do it this way because ts gets lost otherwise\n\n  if (config.forking === undefined) {\n    delete config.forking;\n  }\n\n  return config;\n}\n\nfunction isHdAccountsConfig(accounts) {\n  return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\n\nfunction resolveHttpNetworkConfig(networkConfig) {\n  const accounts = networkConfig.accounts === undefined ? default_config_1.defaultHttpNetworkParams.accounts : isHdAccountsConfig(networkConfig.accounts) ? Object.assign(Object.assign({}, default_config_1.defaultHdAccountsConfigParams), networkConfig.accounts) : Array.isArray(networkConfig.accounts) ? networkConfig.accounts.map(normalizeHexString) : \"remote\";\n  const url = networkConfig.url;\n  errors_1.assertHardhatInvariant(url !== undefined, \"Invalid http network config provided. URL missing.\");\n  return Object.assign(Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultHttpNetworkParams)), networkConfig), {\n    accounts,\n    url\n  });\n}\n\nfunction resolveMiningConfig(userConfig) {\n  if (userConfig === undefined) {\n    return {\n      auto: true,\n      interval: 0\n    };\n  }\n\n  const {\n    auto,\n    interval\n  } = userConfig;\n\n  if (auto === undefined && interval === undefined) {\n    return {\n      auto: true,\n      interval: 0\n    };\n  }\n\n  if (auto === undefined && interval !== undefined) {\n    return {\n      auto: false,\n      interval\n    };\n  }\n\n  if (auto !== undefined && interval === undefined) {\n    return {\n      auto,\n      interval: 0\n    };\n  } // ts can't infer it, but both values are defined here\n\n\n  return {\n    auto: auto,\n    interval: interval\n  };\n}\n\nfunction resolveSolidityConfig(userConfig) {\n  var _a, _b;\n\n  const userSolidityConfig = (_a = userConfig.solidity) !== null && _a !== void 0 ? _a : default_config_1.DEFAULT_SOLC_VERSION;\n  const multiSolcConfig = normalizeSolidityConfig(userSolidityConfig);\n  const overrides = (_b = multiSolcConfig.overrides) !== null && _b !== void 0 ? _b : {};\n  return {\n    compilers: multiSolcConfig.compilers.map(resolveCompiler),\n    overrides: lang_1.fromEntries(Object.entries(overrides).map(([name, config]) => [name, resolveCompiler(config)]))\n  };\n}\n\nfunction normalizeSolidityConfig(solidityConfig) {\n  if (typeof solidityConfig === \"string\") {\n    return {\n      compilers: [{\n        version: solidityConfig\n      }]\n    };\n  }\n\n  if (\"version\" in solidityConfig) {\n    return {\n      compilers: [solidityConfig]\n    };\n  }\n\n  return solidityConfig;\n}\n\nfunction resolveCompiler(compiler) {\n  var _a;\n\n  const resolved = {\n    version: compiler.version,\n    settings: (_a = compiler.settings) !== null && _a !== void 0 ? _a : {}\n  };\n  resolved.settings.optimizer = Object.assign({\n    enabled: false,\n    runs: 200\n  }, resolved.settings.optimizer);\n\n  if (resolved.settings.outputSelection === undefined) {\n    resolved.settings.outputSelection = {};\n  }\n\n  for (const [file, contractSelection] of Object.entries(default_config_1.defaultSolcOutputSelection)) {\n    if (resolved.settings.outputSelection[file] === undefined) {\n      resolved.settings.outputSelection[file] = {};\n    }\n\n    for (const [contract, outputs] of Object.entries(contractSelection)) {\n      if (resolved.settings.outputSelection[file][contract] === undefined) {\n        resolved.settings.outputSelection[file][contract] = [];\n      }\n\n      for (const output of outputs) {\n        if (!resolved.settings.outputSelection[file][contract].includes(output)) {\n          resolved.settings.outputSelection[file][contract].push(output);\n        }\n      }\n    }\n  }\n\n  return resolved;\n}\n\nfunction resolveMochaConfig(userConfig) {\n  return Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultMochaOptions)), userConfig.mocha);\n}\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\n\n\nfunction resolveProjectPaths(userConfigPath, userPaths = {}) {\n  const configFile = fs.realpathSync(userConfigPath);\n  const configDir = path_1.default.dirname(configFile);\n  const root = resolvePathFrom(configDir, \"\", userPaths.root);\n  return Object.assign(Object.assign({}, userPaths), {\n    root,\n    configFile,\n    sources: resolvePathFrom(root, \"contracts\", userPaths.sources),\n    cache: resolvePathFrom(root, \"cache\", userPaths.cache),\n    artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts),\n    tests: resolvePathFrom(root, \"test\", userPaths.tests)\n  });\n}\n\nexports.resolveProjectPaths = resolveProjectPaths;\n\nfunction resolvePathFrom(from, defaultPath, relativeOrAbsolutePath = defaultPath) {\n  if (path_1.default.isAbsolute(relativeOrAbsolutePath)) {\n    return relativeOrAbsolutePath;\n  }\n\n  return path_1.default.join(from, relativeOrAbsolutePath);\n}","map":{"version":3,"sources":["../../../src/internal/core/config/config-resolution.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveProjectPaths = exports.resolveConfig = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst fs = __importStar(require(\"fs\"));\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst constants_1 = require(\"../../constants\");\nconst lang_1 = require(\"../../util/lang\");\nconst errors_1 = require(\"../errors\");\nconst default_config_1 = require(\"./default-config\");\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\nfunction resolveConfig(userConfigPath, userConfig) {\n    var _a;\n    userConfig = cloneDeep_1.default(userConfig);\n    return Object.assign(Object.assign({}, userConfig), { defaultNetwork: (_a = userConfig.defaultNetwork) !== null && _a !== void 0 ? _a : default_config_1.defaultDefaultNetwork, paths: resolveProjectPaths(userConfigPath, userConfig.paths), networks: resolveNetworksConfig(userConfig.networks), solidity: resolveSolidityConfig(userConfig), mocha: resolveMochaConfig(userConfig) });\n}\nexports.resolveConfig = resolveConfig;\nfunction resolveNetworksConfig(networksConfig = {}) {\n    var _a;\n    const hardhatNetworkConfig = networksConfig[constants_1.HARDHAT_NETWORK_NAME];\n    const localhostNetworkConfig = (_a = networksConfig.localhost) !== null && _a !== void 0 ? _a : undefined;\n    const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n    const localhost = resolveHttpNetworkConfig(Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultLocalhostNetworkParams)), localhostNetworkConfig));\n    const otherNetworks = lang_1.fromEntries(Object.entries(networksConfig)\n        .filter(([name, config]) => name !== \"localhost\" &&\n        name !== \"hardhat\" &&\n        config !== undefined &&\n        isHttpNetworkConfig(config))\n        .map(([name, config]) => [\n        name,\n        resolveHttpNetworkConfig(config),\n    ]));\n    return Object.assign({ hardhat,\n        localhost }, otherNetworks);\n}\nfunction isHttpNetworkConfig(config) {\n    return \"url\" in config;\n}\nfunction normalizeHexString(str) {\n    const normalized = str.trim().toLowerCase();\n    if (normalized.startsWith(\"0x\")) {\n        return normalized;\n    }\n    return `0x${normalized}`;\n}\nfunction resolveHardhatNetworkConfig(hardhatNetworkConfig = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const clonedDefaultHardhatNetworkParams = cloneDeep_1.default(default_config_1.defaultHardhatNetworkParams);\n    const accounts = hardhatNetworkConfig.accounts === undefined\n        ? default_config_1.defaultHardhatNetworkHdAccountsConfigParams\n        : Array.isArray(hardhatNetworkConfig.accounts)\n            ? hardhatNetworkConfig.accounts.map(({ privateKey, balance }) => ({\n                privateKey: normalizeHexString(privateKey),\n                balance,\n            }))\n            : Object.assign(Object.assign({}, default_config_1.defaultHardhatNetworkHdAccountsConfigParams), hardhatNetworkConfig.accounts);\n    const forking = hardhatNetworkConfig.forking !== undefined\n        ? {\n            url: hardhatNetworkConfig.forking.url,\n            enabled: (_a = hardhatNetworkConfig.forking.enabled) !== null && _a !== void 0 ? _a : true,\n        }\n        : undefined;\n    const blockNumber = (_b = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _b === void 0 ? void 0 : _b.blockNumber;\n    if (blockNumber !== undefined && forking !== undefined) {\n        forking.blockNumber = (_c = hardhatNetworkConfig === null || hardhatNetworkConfig === void 0 ? void 0 : hardhatNetworkConfig.forking) === null || _c === void 0 ? void 0 : _c.blockNumber;\n    }\n    const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n    const minGasPrice = new ethereumjs_util_1.BN((_d = hardhatNetworkConfig.minGasPrice) !== null && _d !== void 0 ? _d : clonedDefaultHardhatNetworkParams.minGasPrice);\n    const blockGasLimit = (_e = hardhatNetworkConfig.blockGasLimit) !== null && _e !== void 0 ? _e : clonedDefaultHardhatNetworkParams.blockGasLimit;\n    const gas = (_f = hardhatNetworkConfig.gas) !== null && _f !== void 0 ? _f : blockGasLimit;\n    const initialDate = (_g = hardhatNetworkConfig.initialDate) !== null && _g !== void 0 ? _g : new Date().toISOString();\n    const config = Object.assign(Object.assign(Object.assign({}, clonedDefaultHardhatNetworkParams), hardhatNetworkConfig), { accounts,\n        forking,\n        mining,\n        blockGasLimit,\n        gas,\n        initialDate,\n        minGasPrice });\n    // We do it this way because ts gets lost otherwise\n    if (config.forking === undefined) {\n        delete config.forking;\n    }\n    return config;\n}\nfunction isHdAccountsConfig(accounts) {\n    return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\nfunction resolveHttpNetworkConfig(networkConfig) {\n    const accounts = networkConfig.accounts === undefined\n        ? default_config_1.defaultHttpNetworkParams.accounts\n        : isHdAccountsConfig(networkConfig.accounts)\n            ? Object.assign(Object.assign({}, default_config_1.defaultHdAccountsConfigParams), networkConfig.accounts) : Array.isArray(networkConfig.accounts)\n            ? networkConfig.accounts.map(normalizeHexString)\n            : \"remote\";\n    const url = networkConfig.url;\n    errors_1.assertHardhatInvariant(url !== undefined, \"Invalid http network config provided. URL missing.\");\n    return Object.assign(Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultHttpNetworkParams)), networkConfig), { accounts,\n        url });\n}\nfunction resolveMiningConfig(userConfig) {\n    if (userConfig === undefined) {\n        return {\n            auto: true,\n            interval: 0,\n        };\n    }\n    const { auto, interval } = userConfig;\n    if (auto === undefined && interval === undefined) {\n        return {\n            auto: true,\n            interval: 0,\n        };\n    }\n    if (auto === undefined && interval !== undefined) {\n        return {\n            auto: false,\n            interval,\n        };\n    }\n    if (auto !== undefined && interval === undefined) {\n        return {\n            auto,\n            interval: 0,\n        };\n    }\n    // ts can't infer it, but both values are defined here\n    return {\n        auto: auto,\n        interval: interval,\n    };\n}\nfunction resolveSolidityConfig(userConfig) {\n    var _a, _b;\n    const userSolidityConfig = (_a = userConfig.solidity) !== null && _a !== void 0 ? _a : default_config_1.DEFAULT_SOLC_VERSION;\n    const multiSolcConfig = normalizeSolidityConfig(userSolidityConfig);\n    const overrides = (_b = multiSolcConfig.overrides) !== null && _b !== void 0 ? _b : {};\n    return {\n        compilers: multiSolcConfig.compilers.map(resolveCompiler),\n        overrides: lang_1.fromEntries(Object.entries(overrides).map(([name, config]) => [\n            name,\n            resolveCompiler(config),\n        ])),\n    };\n}\nfunction normalizeSolidityConfig(solidityConfig) {\n    if (typeof solidityConfig === \"string\") {\n        return {\n            compilers: [\n                {\n                    version: solidityConfig,\n                },\n            ],\n        };\n    }\n    if (\"version\" in solidityConfig) {\n        return { compilers: [solidityConfig] };\n    }\n    return solidityConfig;\n}\nfunction resolveCompiler(compiler) {\n    var _a;\n    const resolved = {\n        version: compiler.version,\n        settings: (_a = compiler.settings) !== null && _a !== void 0 ? _a : {},\n    };\n    resolved.settings.optimizer = Object.assign({ enabled: false, runs: 200 }, resolved.settings.optimizer);\n    if (resolved.settings.outputSelection === undefined) {\n        resolved.settings.outputSelection = {};\n    }\n    for (const [file, contractSelection] of Object.entries(default_config_1.defaultSolcOutputSelection)) {\n        if (resolved.settings.outputSelection[file] === undefined) {\n            resolved.settings.outputSelection[file] = {};\n        }\n        for (const [contract, outputs] of Object.entries(contractSelection)) {\n            if (resolved.settings.outputSelection[file][contract] === undefined) {\n                resolved.settings.outputSelection[file][contract] = [];\n            }\n            for (const output of outputs) {\n                if (!resolved.settings.outputSelection[file][contract].includes(output)) {\n                    resolved.settings.outputSelection[file][contract].push(output);\n                }\n            }\n        }\n    }\n    return resolved;\n}\nfunction resolveMochaConfig(userConfig) {\n    return Object.assign(Object.assign({}, cloneDeep_1.default(default_config_1.defaultMochaOptions)), userConfig.mocha);\n}\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\nfunction resolveProjectPaths(userConfigPath, userPaths = {}) {\n    const configFile = fs.realpathSync(userConfigPath);\n    const configDir = path_1.default.dirname(configFile);\n    const root = resolvePathFrom(configDir, \"\", userPaths.root);\n    return Object.assign(Object.assign({}, userPaths), { root,\n        configFile, sources: resolvePathFrom(root, \"contracts\", userPaths.sources), cache: resolvePathFrom(root, \"cache\", userPaths.cache), artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts), tests: resolvePathFrom(root, \"test\", userPaths.tests) });\n}\nexports.resolveProjectPaths = resolveProjectPaths;\nfunction resolvePathFrom(from, defaultPath, relativeOrAbsolutePath = defaultPath) {\n    if (path_1.default.isAbsolute(relativeOrAbsolutePath)) {\n        return relativeOrAbsolutePath;\n    }\n    return path_1.default.join(from, relativeOrAbsolutePath);\n}\n//# sourceMappingURL=config-resolution.js.map"]},"metadata":{},"sourceType":"script"}