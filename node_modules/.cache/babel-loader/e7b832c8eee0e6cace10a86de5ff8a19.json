{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HardhatContext = void 0;\n\nconst extenders_1 = require(\"./core/config/extenders\");\n\nconst errors_1 = require(\"./core/errors\");\n\nconst errors_list_1 = require(\"./core/errors-list\");\n\nconst dsl_1 = require(\"./core/tasks/dsl\");\n\nconst platform_1 = require(\"./util/platform\");\n\nclass HardhatContext {\n  constructor() {\n    this.tasksDSL = new dsl_1.TasksDSL();\n    this.extendersManager = new extenders_1.ExtenderManager();\n    this.configExtenders = []; // NOTE: This is experimental and will be removed. Please contact our team if\n    // you are planning to use it.\n\n    this.experimentalHardhatNetworkMessageTraceHooks = [];\n  }\n\n  static isCreated() {\n    const globalWithHardhatContext = global;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n\n  static createHardhatContext() {\n    if (this.isCreated()) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n\n    const globalWithHardhatContext = global;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n\n  static getHardhatContext() {\n    const globalWithHardhatContext = global;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n\n    if (ctx === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n\n    return ctx;\n  }\n\n  static deleteHardhatContext() {\n    const globalAsAny = global;\n    globalAsAny.__hardhatContext = undefined;\n  }\n\n  setHardhatRuntimeEnvironment(env) {\n    if (this.environment !== undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n\n    this.environment = env;\n  }\n\n  getHardhatRuntimeEnvironment() {\n    if (this.environment === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n\n    return this.environment;\n  }\n\n  setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = platform_1.getRequireCachedFiles();\n  }\n\n  setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = platform_1.getRequireCachedFiles();\n  }\n\n  getFilesLoadedDuringConfig() {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n\n    errors_1.assertHardhatInvariant(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n    return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n  }\n\n}\n\nexports.HardhatContext = HardhatContext;\n\nfunction arraysDifference(a, b) {\n  return a.filter(e => !b.includes(e));\n}","map":{"version":3,"sources":["../src/internal/context.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HardhatContext = void 0;\nconst extenders_1 = require(\"./core/config/extenders\");\nconst errors_1 = require(\"./core/errors\");\nconst errors_list_1 = require(\"./core/errors-list\");\nconst dsl_1 = require(\"./core/tasks/dsl\");\nconst platform_1 = require(\"./util/platform\");\nclass HardhatContext {\n    constructor() {\n        this.tasksDSL = new dsl_1.TasksDSL();\n        this.extendersManager = new extenders_1.ExtenderManager();\n        this.configExtenders = [];\n        // NOTE: This is experimental and will be removed. Please contact our team if\n        // you are planning to use it.\n        this.experimentalHardhatNetworkMessageTraceHooks = [];\n    }\n    static isCreated() {\n        const globalWithHardhatContext = global;\n        return globalWithHardhatContext.__hardhatContext !== undefined;\n    }\n    static createHardhatContext() {\n        if (this.isCreated()) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n        }\n        const globalWithHardhatContext = global;\n        const ctx = new HardhatContext();\n        globalWithHardhatContext.__hardhatContext = ctx;\n        return ctx;\n    }\n    static getHardhatContext() {\n        const globalWithHardhatContext = global;\n        const ctx = globalWithHardhatContext.__hardhatContext;\n        if (ctx === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n        }\n        return ctx;\n    }\n    static deleteHardhatContext() {\n        const globalAsAny = global;\n        globalAsAny.__hardhatContext = undefined;\n    }\n    setHardhatRuntimeEnvironment(env) {\n        if (this.environment !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n        }\n        this.environment = env;\n    }\n    getHardhatRuntimeEnvironment() {\n        if (this.environment === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n        }\n        return this.environment;\n    }\n    setConfigLoadingAsStarted() {\n        this._filesLoadedBeforeConfig = platform_1.getRequireCachedFiles();\n    }\n    setConfigLoadingAsFinished() {\n        this._filesLoadedAfterConfig = platform_1.getRequireCachedFiles();\n    }\n    getFilesLoadedDuringConfig() {\n        // No config was loaded\n        if (this._filesLoadedBeforeConfig === undefined) {\n            return [];\n        }\n        errors_1.assertHardhatInvariant(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n        return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n    }\n}\nexports.HardhatContext = HardhatContext;\nfunction arraysDifference(a, b) {\n    return a.filter((e) => !b.includes(e));\n}\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}