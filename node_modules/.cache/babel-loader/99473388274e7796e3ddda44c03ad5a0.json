{"ast":null,"code":"const clausesLength = 3;\n/*\n* Builds the instance(s) into a friendly way\n*/\n\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1]),\n      agents: agentsInfo(arr[i][2]),\n      resources: resourcesInfo(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6]),\n      type: typeProblem(hexToDecimal(arr[i][0])),\n      mode: mode(arr[i][2])\n    };\n    result.push(info);\n  }\n\n  return result;\n}\n/*\n* Builds the chain as a string\n*/\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n}\n/*\n* Check if the instance is for auction or optimization problem\n*/\n\n\nfunction typeProblem(id) {\n  if (id % 2 === 0) return \"Auction problem\";else return \"Optimization problem\";\n}\n/*\n* Returns the number of agents\n*/\n\n\nfunction agentsInfo(setup) {\n  return hexToDecimal(setup[0]);\n}\n/*\n* Returns the number of resources\n*/\n\n\nfunction resourcesInfo(setup) {\n  return hexToDecimal(setup[1]);\n}\n/*\n* Check if the instance is unlimited or limited\n*/\n\n\nfunction mode(setup) {\n  var mode = hexToDecimal(setup[2]);\n  if (mode == 0) return \"Unlimited\";else return \"Limited\";\n}\n/*\n* Converts a hexadecimal number to decimal number\n*/\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber._hex, 16);\n}\n/*\n* Builds the date as date format\n*/\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n}\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n/*\n* Builds an array of date as date format\n*/\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/Egalitarian_Instance_Generator/src/components/UserSection/supportFunctions.js"],"names":["clausesLength","buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","agents","agentsInfo","resources","resourcesInfo","created","buildDate","solution","solved","ended","type","typeProblem","mode","push","_oldChain","array","Array","from","Math","random","shift","setup","_hexNumber","parseInt","_hex","_oldDate","newDate","Date","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","buildDateArray","_arrayRandoms"],"mappings":"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","sourcesContent":["const clausesLength = 3;\n\n/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let info = {\n            id: hexToDecimal(arr[i][0]),\n            chain: buildChain(arr[i][1]),\n            agents: agentsInfo(arr[i][2]),\n            resources: resourcesInfo(arr[i][2]),\n            created: buildDate(arr[i][3]),\n            solution: arr[i][4],\n            solved: arr[i][5],\n            ended: buildDate(arr[i][6]),\n            type: typeProblem(hexToDecimal(arr[i][0])),\n            mode: mode(arr[i][2])\n        };\n        result.push(info);\n    }\n    return result;\n}\n\n/*\n* Builds the chain as a string\n*/\nfunction buildChain(_oldChain) {\n    let result = \"\";\n    let array = Array.from(_oldChain);\n    while (array.length > 1) {\n        result += \"(\";\n        for (let i = 0; i < clausesLength; i++) {\n            if (Math.random() < 0.5)\n                result += \"x\" + array.shift();\n            else\n                result += \"¬\" + \"x\" + array.shift();\n            if (i < clausesLength - 1)\n                result += \" v \";\n        }\n        result += \")\";\n        if (array.length > 1)\n            result += \" ^ \";\n    }\n    return result;\n}\n\n/*\n* Check if the instance is for auction or optimization problem\n*/\nfunction typeProblem(id){\n    if(id % 2 === 0)\n        return \"Auction problem\";\n    else\n        return \"Optimization problem\";\n}\n\n/*\n* Returns the number of agents\n*/\nfunction agentsInfo(setup){\n    return hexToDecimal(setup[0]);\n}\n\n/*\n* Returns the number of resources\n*/\nfunction resourcesInfo(setup){\n    return hexToDecimal(setup[1]);\n}\n\n/*\n* Check if the instance is unlimited or limited\n*/\nfunction mode(setup){\n    var mode = hexToDecimal(setup[2]);\n    if(mode == 0)\n        return \"Unlimited\";\n    else\n        return \"Limited\";\n}\n\n/*\n* Converts a hexadecimal number to decimal number\n*/\nfunction hexToDecimal(_hexNumber) {\n    return parseInt(_hexNumber._hex, 16);\n}\n\n/*\n* Builds the date as date format\n*/\nfunction buildDate(_oldDate) {\n    let result, newDate;\n    if (hexToDecimal(_oldDate) !== 0) {\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n    } else\n        result = \"Date unavailable\";\n    return result;\n}\n\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\nfunction getBoolean() {\n    if (Math.random() >= 50)\n        return true;\n    else\n        return false;\n}\n\n/*\n* Builds an array of date as date format\n*/\nexport function buildDateArray(_arrayRandoms) {\n    let result = [];\n    for (let i = 0; i < _arrayRandoms.length; i++)\n        result.push(buildDate(_arrayRandoms[i]));\n    return result;\n} "]},"metadata":{},"sourceType":"module"}