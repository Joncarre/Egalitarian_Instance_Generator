{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Reporter = exports.SENTRY_DSN = void 0;\n\nconst errors_1 = require(\"../core/errors\");\n\nconst execution_mode_1 = require(\"../core/execution-mode\");\n\nconst errors_2 = require(\"../core/providers/errors\");\n\nconst ci_detection_1 = require(\"../util/ci-detection\");\n\nconst global_dir_1 = require(\"../util/global-dir\");\n\nconst packageInfo_1 = require(\"../util/packageInfo\");\n\nconst transport_1 = require(\"./transport\");\n\nexports.SENTRY_DSN = \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\n\nclass Reporter {\n  constructor() {\n    this.initialized = false;\n    this.verbose = false;\n    this.enabled = true;\n\n    if (ci_detection_1.isRunningOnCiServer()) {\n      this.enabled = false;\n    } // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n\n\n    if (execution_mode_1.isLocalDev() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n      this.enabled = false;\n    }\n  }\n\n  static reportError(error) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled) {\n      return;\n    }\n\n    if (!Reporter.shouldReport(error)) {\n      return;\n    }\n\n    instance.init();\n\n    const Sentry = require(\"@sentry/node\");\n\n    Sentry.setExtra(\"verbose\", instance.verbose);\n    Sentry.setExtra(\"configPath\", instance.configPath);\n    Sentry.setExtra(\"nodeVersion\", process.version);\n    const hardhatVersion = packageInfo_1.getHardhatVersion();\n    Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n    Sentry.captureException(error);\n    return true;\n  }\n  /**\n   * Enable or disable reporting. When disabled, all calls to `reportError` are\n   * no-ops.\n   */\n\n\n  static setEnabled(enabled) {\n    const instance = Reporter._getInstance();\n\n    instance.enabled = enabled;\n  }\n  /**\n   * Enable or disable verbose output. This is necessary to pass the correct\n   * environment variable to the transport subprocess.\n   */\n\n\n  static setVerbose(verbose) {\n    const instance = Reporter._getInstance();\n\n    instance.verbose = verbose;\n  }\n  /**\n   * The path to the hardhat config file. We use this when files are anonymized,\n   * since the hardhat config is the only file in the user's project that is not\n   * anonymized.\n   */\n\n\n  static setConfigPath(configPath) {\n    const instance = Reporter._getInstance();\n\n    instance.configPath = configPath;\n  }\n  /**\n   * Wait until all Sentry events were sent or until `timeout` milliseconds are\n   * elapsed.\n   *\n   * This needs to be used before calling `process.exit`, otherwise some events\n   * might get lost.\n   */\n\n\n  static async close(timeout) {\n    const instance = Reporter._getInstance();\n\n    if (!instance.enabled || !instance.initialized) {\n      return true;\n    }\n\n    const Sentry = await Promise.resolve().then(() => __importStar(require(\"@sentry/node\")));\n    return Sentry.close(timeout);\n  }\n\n  static shouldReport(error) {\n    if (errors_1.HardhatError.isHardhatError(error) && !error.errorDescriptor.shouldBeReported) {\n      return false;\n    }\n\n    if (errors_1.HardhatPluginError.isHardhatPluginError(error)) {\n      if (errors_1.NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n        return error.shouldBeReported;\n      } // don't log errors from third-party plugins\n\n\n      return false;\n    } // We don't report network related errors\n\n\n    if (error instanceof errors_2.ProviderError) {\n      return false;\n    }\n\n    if (!Reporter._hasTelemetryConsent()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  static _getInstance() {\n    if (this._instance === undefined) {\n      this._instance = new Reporter();\n    }\n\n    return this._instance;\n  }\n\n  static _hasTelemetryConsent() {\n    const telemetryConsent = global_dir_1.hasConsentedTelemetry();\n    return telemetryConsent === true;\n  }\n\n  init() {\n    if (this.initialized) {\n      return;\n    }\n\n    const Sentry = require(\"@sentry/node\");\n\n    const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n      key: \"parent\"\n    });\n    Sentry.init({\n      dsn: exports.SENTRY_DSN,\n      transport: transport_1.getSubprocessTransport(),\n      integrations: () => [linkedErrorsIntegration]\n    });\n    this.initialized = true;\n  }\n\n}\n\nexports.Reporter = Reporter;","map":{"version":3,"sources":["../../src/internal/sentry/reporter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Reporter = exports.SENTRY_DSN = void 0;\nconst errors_1 = require(\"../core/errors\");\nconst execution_mode_1 = require(\"../core/execution-mode\");\nconst errors_2 = require(\"../core/providers/errors\");\nconst ci_detection_1 = require(\"../util/ci-detection\");\nconst global_dir_1 = require(\"../util/global-dir\");\nconst packageInfo_1 = require(\"../util/packageInfo\");\nconst transport_1 = require(\"./transport\");\nexports.SENTRY_DSN = \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\nclass Reporter {\n    constructor() {\n        this.initialized = false;\n        this.verbose = false;\n        this.enabled = true;\n        if (ci_detection_1.isRunningOnCiServer()) {\n            this.enabled = false;\n        }\n        // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n        if (execution_mode_1.isLocalDev() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n            this.enabled = false;\n        }\n    }\n    static reportError(error) {\n        const instance = Reporter._getInstance();\n        if (!instance.enabled) {\n            return;\n        }\n        if (!Reporter.shouldReport(error)) {\n            return;\n        }\n        instance.init();\n        const Sentry = require(\"@sentry/node\");\n        Sentry.setExtra(\"verbose\", instance.verbose);\n        Sentry.setExtra(\"configPath\", instance.configPath);\n        Sentry.setExtra(\"nodeVersion\", process.version);\n        const hardhatVersion = packageInfo_1.getHardhatVersion();\n        Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n        Sentry.captureException(error);\n        return true;\n    }\n    /**\n     * Enable or disable reporting. When disabled, all calls to `reportError` are\n     * no-ops.\n     */\n    static setEnabled(enabled) {\n        const instance = Reporter._getInstance();\n        instance.enabled = enabled;\n    }\n    /**\n     * Enable or disable verbose output. This is necessary to pass the correct\n     * environment variable to the transport subprocess.\n     */\n    static setVerbose(verbose) {\n        const instance = Reporter._getInstance();\n        instance.verbose = verbose;\n    }\n    /**\n     * The path to the hardhat config file. We use this when files are anonymized,\n     * since the hardhat config is the only file in the user's project that is not\n     * anonymized.\n     */\n    static setConfigPath(configPath) {\n        const instance = Reporter._getInstance();\n        instance.configPath = configPath;\n    }\n    /**\n     * Wait until all Sentry events were sent or until `timeout` milliseconds are\n     * elapsed.\n     *\n     * This needs to be used before calling `process.exit`, otherwise some events\n     * might get lost.\n     */\n    static async close(timeout) {\n        const instance = Reporter._getInstance();\n        if (!instance.enabled || !instance.initialized) {\n            return true;\n        }\n        const Sentry = await Promise.resolve().then(() => __importStar(require(\"@sentry/node\")));\n        return Sentry.close(timeout);\n    }\n    static shouldReport(error) {\n        if (errors_1.HardhatError.isHardhatError(error) &&\n            !error.errorDescriptor.shouldBeReported) {\n            return false;\n        }\n        if (errors_1.HardhatPluginError.isHardhatPluginError(error)) {\n            if (errors_1.NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n                return error.shouldBeReported;\n            }\n            // don't log errors from third-party plugins\n            return false;\n        }\n        // We don't report network related errors\n        if (error instanceof errors_2.ProviderError) {\n            return false;\n        }\n        if (!Reporter._hasTelemetryConsent()) {\n            return false;\n        }\n        return true;\n    }\n    static _getInstance() {\n        if (this._instance === undefined) {\n            this._instance = new Reporter();\n        }\n        return this._instance;\n    }\n    static _hasTelemetryConsent() {\n        const telemetryConsent = global_dir_1.hasConsentedTelemetry();\n        return telemetryConsent === true;\n    }\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        const Sentry = require(\"@sentry/node\");\n        const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n            key: \"parent\",\n        });\n        Sentry.init({\n            dsn: exports.SENTRY_DSN,\n            transport: transport_1.getSubprocessTransport(),\n            integrations: () => [linkedErrorsIntegration],\n        });\n        this.initialized = true;\n    }\n}\nexports.Reporter = Reporter;\n//# sourceMappingURL=reporter.js.map"]},"metadata":{},"sourceType":"script"}