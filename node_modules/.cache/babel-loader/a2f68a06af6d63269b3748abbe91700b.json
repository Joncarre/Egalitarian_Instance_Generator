{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { URL } from 'url';\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\n\nexport function isSentryRequest(url) {\n  var _a;\n\n  var dsn = (_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\n\nexport function extractUrl(requestOptions) {\n  var protocol = requestOptions.protocol || '';\n  var hostname = requestOptions.hostname || requestOptions.host || ''; // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n\n  var port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : \":\" + requestOptions.port;\n  var path = requestOptions.path ? requestOptions.path : '/';\n  return protocol + \"//\" + hostname + port + path;\n}\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\n\nexport function cleanSpanDescription(description, requestOptions, request) {\n  var _a, _b, _c; // nothing to clean\n\n\n  if (!description) {\n    return description;\n  } // eslint-disable-next-line prefer-const\n\n\n  var _d = __read(description.split(' '), 2),\n      method = _d[0],\n      requestUrl = _d[1]; // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n\n\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (_b = (_a = request) === null || _a === void 0 ? void 0 : _a.agent) === null || _b === void 0 ? void 0 : _b.protocol; // worst comes to worst, this is undefined and nothing changes\n\n    requestUrl = extractUrl(requestOptions);\n  } // internal routes can end up starting with a triple slash rather than a single one\n\n\n  if ((_c = requestUrl) === null || _c === void 0 ? void 0 : _c.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return method + \" \" + requestUrl;\n}\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\n\nexport function urlToOptions(url) {\n  var options = {\n    protocol: url.protocol,\n    hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: \"\" + (url.pathname || '') + (url.search || ''),\n    href: url.href\n  };\n\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n\n  if (url.username || url.password) {\n    options.auth = url.username + \":\" + url.password;\n  }\n\n  return options;\n}\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\n\nexport function normalizeRequestArgs(requestArgs) {\n  var callback, requestOptions; // pop off the callback, if there is one\n\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop();\n  } // create a RequestOptions object of whatever's at index 0\n\n\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  } // if the options were given separately from the URL, fold them in\n\n\n  if (requestArgs.length === 2) {\n    requestOptions = __assign(__assign({}, requestOptions), requestArgs[1]);\n  } // return args in standardized form\n\n\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}","map":{"version":3,"sources":["../../../src/integrations/utils/http.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport * as http from 'http';\nimport { URL } from 'url';\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nexport function isSentryRequest(url: string): boolean {\n  const dsn = getCurrentHub()\n    .getClient()\n    ?.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nexport function extractUrl(requestOptions: RequestOptions): string {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nexport function cleanSpanDescription(\n  description: string | undefined,\n  requestOptions: RequestOptions,\n  request: http.ClientRequest,\n): string | undefined {\n  // nothing to clean\n  if (!description) {\n    return description;\n  }\n\n  // eslint-disable-next-line prefer-const\n  let [method, requestUrl] = description.split(' ');\n\n  // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n  // we're likely dealing with an internal route and this doesn't apply)\n  if (requestOptions.host && !requestOptions.protocol) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    requestOptions.protocol = (request as any)?.agent?.protocol; // worst comes to worst, this is undefined and nothing changes\n    requestUrl = extractUrl(requestOptions);\n  }\n\n  // internal routes can end up starting with a triple slash rather than a single one\n  if (requestUrl?.startsWith('///')) {\n    requestUrl = requestUrl.slice(2);\n  }\n\n  return `${method} ${requestUrl}`;\n}\n\n// the node types are missing a few properties which node's `urlToOptions` function spits out\nexport type RequestOptions = http.RequestOptions & { hash?: string; search?: string; pathname?: string; href?: string };\ntype RequestCallback = (response: http.IncomingMessage) => void;\nexport type RequestMethodArgs =\n  | [RequestOptions | string | URL, RequestCallback?]\n  | [string | URL, RequestOptions, RequestCallback?];\nexport type RequestMethod = (...args: RequestMethodArgs) => http.ClientRequest;\n\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nexport function urlToOptions(url: URL): RequestOptions {\n  const options: RequestOptions = {\n    protocol: url.protocol,\n    hostname:\n      typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n    hash: url.hash,\n    search: url.search,\n    pathname: url.pathname,\n    path: `${url.pathname || ''}${url.search || ''}`,\n    href: url.href,\n  };\n  if (url.port !== '') {\n    options.port = Number(url.port);\n  }\n  if (url.username || url.password) {\n    options.auth = `${url.username}:${url.password}`;\n  }\n  return options;\n}\n\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nexport function normalizeRequestArgs(\n  requestArgs: RequestMethodArgs,\n): [RequestOptions] | [RequestOptions, RequestCallback] {\n  let callback, requestOptions;\n\n  // pop off the callback, if there is one\n  if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n    callback = requestArgs.pop() as RequestCallback;\n  }\n\n  // create a RequestOptions object of whatever's at index 0\n  if (typeof requestArgs[0] === 'string') {\n    requestOptions = urlToOptions(new URL(requestArgs[0]));\n  } else if (requestArgs[0] instanceof URL) {\n    requestOptions = urlToOptions(requestArgs[0]);\n  } else {\n    requestOptions = requestArgs[0];\n  }\n\n  // if the options were given separately from the URL, fold them in\n  if (requestArgs.length === 2) {\n    requestOptions = { ...requestOptions, ...requestArgs[1] };\n  }\n\n  // return args in standardized form\n  if (callback) {\n    return [requestOptions, callback];\n  } else {\n    return [requestOptions];\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}