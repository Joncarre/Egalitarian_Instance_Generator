{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\3SAT_Instance_Generator\\\\3SAT_Instance_Generator\\\\src\\\\components\\\\SubPages\\\\HowItWorks.js\";\nimport { Container, Wrap, NewH1, NewH2, NewP, NewLinkWithoutline, Img } from \"./SubpagesElements\";\nimport imag1 from 'images/development.png';\nimport imag2 from 'images/imag2.PNG';\nimport imag3 from 'images/imag3.PNG';\nimport imag4 from 'images/imag4.PNG';\nimport imag5 from 'images/imag5.PNG';\nimport imag6 from 'images/imag6.PNG';\nimport imag7 from 'images/imag7.PNG';\nimport imag8 from 'images/imag8.PNG';\nimport imag9 from 'images/imag9.PNG';\nimport imag10 from 'images/imag10.PNG';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HowItWorks = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Wrap, {\n      children: [/*#__PURE__*/_jsxDEV(NewH1, {\n        children: \"Preparing the environment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"Decentralised applications do not work in the same way as traditional web applications. For this reason, before explaining how this instance generator works, we need to take a few simple steps that will only take a few minutes.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Img, {\n        alt: \"dev\",\n        src: devImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewH2, {\n        children: /*#__PURE__*/_jsxDEV(NewLinkWithoutline, {\n          href: \"https://hardhat.org/\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Hardhat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: [\"First of all, we need to install a wallet with which we can make transactions to the blockchain. In our case we use Metamask, which is just a plugin available for Chrome, Brave and some other browsers. If this is the first time we use Metamask, we must select the option \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Create a wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 282\n        }, this), \". After creating a password and completing the secret backup phrase, we will see that our wallet will be ready to trade and connected to the main Ethereum network, although with 0 ethers. The first thing we are going to do is connect to the Kovan test network, which is where our smart contract is deployed. To do this, we select the drop-down menu of the main network and click on \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Show/hide test networks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 95\n        }, this), \". Then, we activate the option \\\"Show test networks\\\" and we will see how the different test networks appear, where we have to click on the Kovan test network. \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: [\"We can see that in this test network we also do not have enough ether to pay for the gas for the transactions. To obtain gas for the test networks we can visit the following link: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: /*#__PURE__*/_jsxDEV(NewLinkWithoutline, {\n            href: \"https://faucets.chain.link/\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"Chainlink faucet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 206\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 203\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: [\"At the top right you will see a button that says \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Connect wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 72\n        }, this), \". We must click it and connect our wallet to this site.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"We will then see that our wallet address has been connected to the website and, after completing the captcha, we will be able to request ether. By default, every time we make a request it will give us 0.1 ether and 10 LINK. This last token will not be necessary to operate within the DApp.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {\n        children: \"Now that we have all the previous preparations, we can start interacting with the DApp. In the main page there are some interesting links to learn more about this project, how it works, what is the 3-SAT problem or how Chainlink oracles work. If it is our first time, we must register by clicking on the Get started button. This will take you to the registration page where you will be asked for some information: your name, email and researcher ORCID.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewP, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_c = HowItWorks;\nexport default HowItWorks;\n\nvar _c;\n\n$RefreshReg$(_c, \"HowItWorks\");","map":{"version":3,"sources":["C:/Users/Jonathan/3SAT_Instance_Generator/3SAT_Instance_Generator/src/components/SubPages/HowItWorks.js"],"names":["Container","Wrap","NewH1","NewH2","NewP","NewLinkWithoutline","Img","imag1","imag2","imag3","imag4","imag5","imag6","imag7","imag8","imag9","imag10","HowItWorks","devImg"],"mappings":"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","sourcesContent":["import {\n    Container,\n    Wrap,\n    NewH1,\n    NewH2,\n    NewP,\n\tNewLinkWithoutline,\n    Img\n} from \"./SubpagesElements\";\n\nimport imag1 from 'images/development.png';\nimport imag2 from 'images/imag2.PNG';\nimport imag3 from 'images/imag3.PNG';\nimport imag4 from 'images/imag4.PNG';\nimport imag5 from 'images/imag5.PNG';\nimport imag6 from 'images/imag6.PNG';\nimport imag7 from 'images/imag7.PNG';\nimport imag8 from 'images/imag8.PNG';\nimport imag9 from 'images/imag9.PNG';\nimport imag10 from 'images/imag10.PNG';\n\nconst HowItWorks = () => {\n    return (\n        <Container>\n            <Wrap>\n                <NewH1>Preparing the environment</NewH1>\n\t\t\t\t<NewP>Decentralised applications do not work in the same way as traditional web applications. For this reason, before explaining how this instance generator works, we need to take a few simple steps that will only take a few minutes.</NewP>\n\t\t\t\t<Img alt=\"dev\" src={devImg}></Img>\n\n\t\t\t\t<NewH2>\n\t\t\t\t\t<NewLinkWithoutline href=\"https://hardhat.org/\" target=\"_blank\" rel=\"noreferrer\">Hardhat</NewLinkWithoutline>\n\t\t\t\t</NewH2>\n\t\t\t\n\t\t\t\t<NewP>First of all, we need to install a wallet with which we can make transactions to the blockchain. In our case we use Metamask, which is just a plugin available for Chrome, Brave and some other browsers. If this is the first time we use Metamask, we must select the option <b>Create a wallet</b>. \n                    After creating a password and completing the secret backup phrase, we will see that our wallet will be ready to trade and connected to the main Ethereum network, although with 0 ethers. The first thing we are going to do is connect to the Kovan test network, which is where our smart contract is deployed. \n                    To do this, we select the drop-down menu of the main network and click on <b>Show/hide test networks</b>. Then, we activate the option \"Show test networks\" and we will see how the different test networks appear, where we have to click on the Kovan test network. </NewP>\n                <NewP>We can see that in this test network we also do not have enough ether to pay for the gas for the transactions. To obtain gas for the test networks we can visit the following link: <b><NewLinkWithoutline href=\"https://faucets.chain.link/\" target=\"_blank\" rel=\"noreferrer\">Chainlink faucet</NewLinkWithoutline></b></NewP>\n                <NewP>At the top right you will see a button that says <b>Connect wallet</b>. We must click it and connect our wallet to this site.</NewP>\n                <NewP>We will then see that our wallet address has been connected to the website and, after completing the captcha, we will be able to request ether. By default, every time we make a request it will give us 0.1 ether and 10 LINK. This last token will not be necessary to operate within the DApp.</NewP>\n                <NewP>Now that we have all the previous preparations, we can start interacting with the DApp. In the main page there are some interesting links to learn more about this project, how it works, what is the 3-SAT problem or how Chainlink oracles work. If it is our first time, we must register by clicking on the Get started button. This will take you to the registration page where you will be asked for some information: your name, email and researcher ORCID.</NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n                <NewP></NewP>\n            </Wrap>\n        </Container>\n    );\n}\n\nexport default HowItWorks;"]},"metadata":{},"sourceType":"module"}