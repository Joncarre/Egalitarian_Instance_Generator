{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w10te\\\\Documents\\\\dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatorAddress = \"0x36f090DA787c9c5d50C758B616e6154decA995F1\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state\n  const [data, setData] = useState();\n  const [data2, setData2] = useState();\n  const [userInput, setUserInput] = useState();\n  const [userInput2, setUserInput2] = useState(); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // call the smart contract, read the current value\n\n\n  async function asyncFetchResearcher() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getResearcher();\n        setData(result);\n        console.log('data: ', result);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  } // call the smart contract, send a new researcher\n\n\n  async function asyncRegResearcher() {\n    if (!userInput) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.solveLastInstance(userInput);\n      await transaction.wait();\n    }\n  } // ------------------------------------------------------------------------------\n\n\n  async function asyncFetchHash() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getLastHash();\n        setData2(result);\n        console.log('data: ', result);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function asyncSetLastHash() {\n    if (!userInput2) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.regResearcher(userInput2);\n      await transaction.wait();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Name information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncFetchResearcher,\n      children: \"Fetch Researcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", data, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncRegResearcher,\n      children: \"Set researcher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setUserInput(e.target.value),\n      placeholder: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Hash information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncFetchHash,\n      children: \"Fetch hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", data2, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: asyncSetLastHash,\n      children: \"Set hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setUserInput2(e.target.value),\n      placeholder: \"hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"sTwRupiGD/J0T84P+FkA/aMo4DI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/w10te/Documents/dapp/src/App.js"],"names":["useState","ethers","Generator","generatorAddress","App","data","setData","data2","setData2","userInput","setUserInput","userInput2","setUserInput2","requestAccount","window","ethereum","request","method","asyncFetchResearcher","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","result","connect","getResearcher","console","log","err","asyncRegResearcher","transaction","solveLastInstance","wait","asyncFetchHash","getLastHash","asyncSetLastHash","regResearcher","e","target","value"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,oDAAtB,C,CAGA;;;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,EAA5C,CALa,CAOX;;AACA,iBAAea,cAAf,GAAgC;AAC9B,UAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAN;AACD,GAVU,CAYX;;;AACA,iBAAeC,oBAAf,GAAsC;AACpC,QAAI,OAAOJ,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMI,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAX,CAAoBpB,gBAApB,EAAsCD,SAAS,CAACsB,GAAhD,EAAqDL,QAArD,CAAjB;;AACA,UAAI;AACF,cAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,cAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBH,MAAjB,EAAyBI,aAAzB,EAArB;AACAvB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB;AACD,OALD,CAKE,OAAOK,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACD;AACF;AACF,GA1BU,CA4BX;;;AACA,iBAAeC,kBAAf,GAAoC;AAClC,QAAI,CAACxB,SAAL,EAAgB;;AAChB,QAAI,OAAOK,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,YAAMJ,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAX,CAAoBpB,gBAApB,EAAsCD,SAAS,CAACsB,GAAhD,EAAqDC,MAArD,CAAjB;AACA,YAAMS,WAAW,GAAG,MAAMZ,QAAQ,CAACa,iBAAT,CAA2B1B,SAA3B,CAA1B;AACA,YAAMyB,WAAW,CAACE,IAAZ,EAAN;AACD;AACF,GAvCU,CAyCX;;;AAEA,iBAAeC,cAAf,GAAgC;AAC9B,QAAI,OAAOvB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMI,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAX,CAAoBpB,gBAApB,EAAsCD,SAAS,CAACsB,GAAhD,EAAqDL,QAArD,CAAjB;;AACA,UAAI;AACF,cAAMM,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,cAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBH,MAAjB,EAAyBa,WAAzB,EAArB;AACA9B,QAAAA,QAAQ,CAACmB,MAAD,CAAR;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB;AACD,OALD,CAKE,OAAOK,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACD;AACF;AACF;;AAED,iBAAeO,gBAAf,GAAkC;AAChC,QAAI,CAAC5B,UAAL,EAAiB;;AACjB,QAAI,OAAOG,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACA,YAAMJ,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,QAAX,CAAoBpB,gBAApB,EAAsCD,SAAS,CAACsB,GAAhD,EAAqDC,MAArD,CAAjB;AACA,YAAMS,WAAW,GAAG,MAAMZ,QAAQ,CAACkB,aAAT,CAAuB7B,UAAvB,CAA1B;AACA,YAAMuB,WAAW,CAACE,IAAZ,EAAN;AACD;AACF;;AAEH,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAElB,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,sBAAMb,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAE4B,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAO,MAAA,QAAQ,EAAEQ,CAAC,IAAI/B,YAAY,CAAC+B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlC;AAAoD,MAAA,WAAW,EAAC;AAAhE;AAAA;AAAA;AAAA;AAAA,YALF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,OAAO,EAAEN,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA,sBAAM9B,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAQ,MAAA,OAAO,EAAEgC,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAO,MAAA,QAAQ,EAAEE,CAAC,IAAI7B,aAAa,CAAC6B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnC;AAAqD,MAAA,WAAW,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GArFQvC,G;;KAAAA,G;AAuFT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'\n\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0x36f090DA787c9c5d50C758B616e6154decA995F1\"\n\nfunction App() {\n  // store greeting in local state\n  const [data, setData] = useState()\n  const [data2, setData2] = useState()\n  const [userInput, setUserInput] = useState()\n  const [userInput2, setUserInput2] = useState()\n\n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n    // call the smart contract, read the current value\n    async function asyncFetchResearcher() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getResearcher()\n          setData(result)\n          console.log('data: ', result)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n    // call the smart contract, send a new researcher\n    async function asyncRegResearcher() {\n      if (!userInput) return\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.solveLastInstance(userInput)\n        await transaction.wait()\n      }\n    }\n\n    // ------------------------------------------------------------------------------\n\n    async function asyncFetchHash() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getLastHash()\n          setData2(result)\n          console.log('data: ', result)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n    async function asyncSetLastHash() {\n      if (!userInput2) return\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.regResearcher(userInput2)\n        await transaction.wait()\n      }\n    }\n    \n  return (\n    <div className=\"App\">\n      <h5>Name information</h5>\n      <button onClick={asyncFetchResearcher}>Fetch Researcher</button>\n      <p> { data } </p>\n      <button onClick={asyncRegResearcher}>Set researcher</button>\n      <input onChange={e => setUserInput(e.target.value)} placeholder=\"name\" />\n\n      <h5>Hash information</h5>\n      <button onClick={asyncFetchHash}>Fetch hash</button>\n      <p> { data2 } </p>\n      <button onClick={asyncSetLastHash}>Set hash</button>\n      <input onChange={e => setUserInput2(e.target.value)} placeholder=\"hash\" />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}