{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendConfig = exports.extendEnvironment = exports.types = exports.internalTask = exports.subtask = exports.task = void 0;\n\nconst context_1 = require(\"../../context\");\n\nconst argumentTypes = __importStar(require(\"../params/argumentTypes\"));\n\nfunction task(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\nexports.task = task;\n\nfunction subtask(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\nexports.subtask = subtask; // Backwards compatibility alias\n\nexports.internalTask = subtask;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\n\nfunction extendEnvironment(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\n\nexports.extendEnvironment = extendEnvironment;\n\nfunction extendConfig(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\nexports.extendConfig = extendConfig; // NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\n\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;","map":{"version":3,"sources":["../../../src/internal/core/config/config-env.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,aAAA,GAAA,YAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AAkCA,SAAgB,IAAhB,CACE,IADF,EAEE,mBAFF,EAGE,MAHF,EAG4B;AAE1B,QAAM,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAZ;AACA,QAAM,GAAG,GAAG,GAAG,CAAC,QAAhB;;AAEA,MAAI,mBAAmB,KAAK,SAA5B,EAAuC;AACrC,WAAO,GAAG,CAAC,IAAJ,CAAS,IAAT,CAAP;AACD;;AAED,MAAI,OAAO,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,WAAO,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAe,mBAAf,CAAP;AACD;;AAED,SAAO,GAAG,CAAC,IAAJ,CAAS,IAAT,EAAe,mBAAf,EAAoC,MAApC,CAAP;AACD;;AAjBD,OAAA,CAAA,IAAA,GAAA,IAAA;;AAoDA,SAAgB,OAAhB,CACE,IADF,EAEE,mBAFF,EAGE,MAHF,EAG4B;AAE1B,QAAM,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAZ;AACA,QAAM,GAAG,GAAG,GAAG,CAAC,QAAhB;;AAEA,MAAI,mBAAmB,KAAK,SAA5B,EAAuC;AACrC,WAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAP;AACD;;AAED,MAAI,OAAO,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,WAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,mBAAlB,CAAP;AACD;;AAED,SAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ,EAAkB,mBAAlB,EAAuC,MAAvC,CAAP;AACD;;AAjBD,OAAA,CAAA,OAAA,GAAA,OAAA,C,CAmBA;;AACa,OAAA,CAAA,YAAA,GAAe,OAAf;AAEA,OAAA,CAAA,KAAA,GAAQ,aAAR;AAEb;;;;;;AAMG;;AACH,SAAgB,iBAAhB,CAAkC,QAAlC,EAA+D;AAC7D,QAAM,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAZ;AACA,QAAM,eAAe,GAAG,GAAG,CAAC,gBAA5B;AACA,EAAA,eAAe,CAAC,GAAhB,CAAoB,QAApB;AACD;;AAJD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAMA,SAAgB,YAAhB,CAA6B,QAA7B,EAAqD;AACnD,QAAM,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAZ;AACA,EAAA,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAyB,QAAzB;AACD;;AAHD,OAAA,CAAA,YAAA,GAAA,YAAA,C,CAKA;AACA;;AACA,SAAgB,6CAAhB,CACE,IADF,EACkD;AAEhD,QAAM,GAAG,GAAG,SAAA,CAAA,cAAA,CAAe,iBAAf,EAAZ;AACA,EAAA,GAAG,CAAC,2CAAJ,CAAgD,IAAhD,CAAqD,IAArD;AACD;;AALD,OAAA,CAAA,6CAAA,GAAA,6CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendConfig = exports.extendEnvironment = exports.types = exports.internalTask = exports.subtask = exports.task = void 0;\nconst context_1 = require(\"../../context\");\nconst argumentTypes = __importStar(require(\"../params/argumentTypes\"));\nfunction task(name, descriptionOrAction, action) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const dsl = ctx.tasksDSL;\n    if (descriptionOrAction === undefined) {\n        return dsl.task(name);\n    }\n    if (typeof descriptionOrAction !== \"string\") {\n        return dsl.task(name, descriptionOrAction);\n    }\n    return dsl.task(name, descriptionOrAction, action);\n}\nexports.task = task;\nfunction subtask(name, descriptionOrAction, action) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const dsl = ctx.tasksDSL;\n    if (descriptionOrAction === undefined) {\n        return dsl.subtask(name);\n    }\n    if (typeof descriptionOrAction !== \"string\") {\n        return dsl.subtask(name, descriptionOrAction);\n    }\n    return dsl.subtask(name, descriptionOrAction, action);\n}\nexports.subtask = subtask;\n// Backwards compatibility alias\nexports.internalTask = subtask;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nfunction extendEnvironment(extender) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const extenderManager = ctx.extendersManager;\n    extenderManager.add(extender);\n}\nexports.extendEnvironment = extendEnvironment;\nfunction extendConfig(extender) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.configExtenders.push(extender);\n}\nexports.extendConfig = extendConfig;\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;\n//# sourceMappingURL=config-env.js.map"]},"metadata":{},"sourceType":"script"}