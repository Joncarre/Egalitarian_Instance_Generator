{"ast":null,"code":"import React from 'react';\nconst clausesLength = 3; // Builds the instance(s) into a friendly way\n\nexport function buildInstance(arr) {\n  let built = [];\n  let result = [];\n  console.log(arr.length);\n\n  for (let i = 0; i < arr.length; i++) {\n    // id\n    built[0] = hexToDecimal(arr[i][0]); // chain\n\n    built[1] = buildChain(arr[i][1]); // size\n\n    built[2] = hexToDecimal(arr[i][2]); // date created\n\n    built[3] = buildDate(arr[i][3]); // solution\n\n    built[4] = arr[i][4]; // solved\n\n    built[5] = arr[i][5]; // date resolved\n\n    built[6] = buildDate(arr[i][6]);\n    result[i] = built;\n  }\n\n  return result;\n} // Builds the chain as a string\n\nfunction buildChain(_oldChain) {\n  let result = \"\";\n  let array = Array.from(_oldChain);\n\n  while (array.length > 1) {\n    result += \"(\";\n\n    for (let i = 0; i < clausesLength; i++) {\n      if (Math.random() < 0.5) result += \"x\" + array.shift();else result += \"¬\" + \"x\" + array.shift();\n      if (i < clausesLength - 1) result += \" v \";\n    }\n\n    result += \")\";\n    if (array.length > 1) result += \" ^ \";\n  }\n\n  return result;\n} // Converts a hexadecimal number to decimal number\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber, 16);\n} // Builds the date as a date format\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n} // Return 'true' or 'false' with 50% probability\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n\nexport default buildInstance;","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/UCM/Doctorado/Investigaciones/Generator App/Generator-DApp/src/components/UserSection/supportFunctions.js"],"names":["React","clausesLength","buildInstance","arr","built","result","console","log","length","i","hexToDecimal","buildChain","buildDate","_oldChain","array","Array","from","Math","random","shift","_hexNumber","parseInt","_oldDate","newDate","Date","_hex","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst clausesLength = 3;\r\n\r\n// Builds the instance(s) into a friendly way\r\nexport function buildInstance(arr){\r\n    let built = [];\r\n    let result = [];\r\n    console.log(arr.length);\r\n    for(let i = 0; i < arr.length; i++){\r\n        // id\r\n        built[0] = hexToDecimal(arr[i][0]);\r\n        // chain\r\n        built[1] = buildChain(arr[i][1]);\r\n        // size\r\n        built[2] = hexToDecimal(arr[i][2]);\r\n        // date created\r\n        built[3] = buildDate(arr[i][3]);\r\n        // solution\r\n        built[4] = arr[i][4];\r\n        // solved\r\n        built[5] = arr[i][5];\r\n        // date resolved\r\n        built[6] = buildDate(arr[i][6]);\r\n        result[i] = built;\r\n    }\r\n    return result;\r\n}\r\n\r\n// Builds the chain as a string\r\nfunction buildChain(_oldChain){\r\n    let result = \"\";\r\n    let array = Array.from(_oldChain);\r\n    while(array.length > 1){\r\n        result += \"(\";\r\n        for(let i = 0; i < clausesLength; i++){\r\n            if(Math.random() < 0.5)\r\n                result += \"x\" + array.shift();\r\n            else\r\n                result += \"¬\" + \"x\" + array.shift();\r\n            if(i < clausesLength-1) \r\n                result += \" v \";\r\n        }\r\n        result += \")\";\r\n        if(array.length > 1)\r\n            result += \" ^ \";\r\n    }\r\n    return result;\r\n}\r\n\r\n// Converts a hexadecimal number to decimal number\r\nfunction hexToDecimal(_hexNumber){\r\n    return parseInt(_hexNumber, 16);\r\n}\r\n\r\n// Builds the date as a date format\r\nfunction buildDate(_oldDate){\r\n    let result, newDate;\r\n    if(hexToDecimal(_oldDate) !== 0){\r\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16)*1000);\r\n        result = newDate.getFullYear() + \"/\" + newDate.getMonth() + \"/\" + newDate.getDate()  + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\r\n    }else\r\n        result = \"Date unavailable\";\r\n    return result;\r\n}\r\n\r\n// Return 'true' or 'false' with 50% probability\r\nfunction getBoolean(){\r\n    if(Math.random() >= 50)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nexport default buildInstance;"]},"metadata":{},"sourceType":"module"}