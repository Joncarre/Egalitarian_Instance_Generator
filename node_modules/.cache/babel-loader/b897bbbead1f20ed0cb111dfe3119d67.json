{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRunningHardhatCoreTests = exports.isLocalDev = exports.isHardhatInstalledLocallyOrLinked = void 0;\n\nconst fs = __importStar(require(\"fs\"));\n\nconst packageInfo_1 = require(\"../util/packageInfo\");\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\n\n\nfunction isHardhatInstalledLocallyOrLinked(configPath) {\n  try {\n    const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n      paths: [configPath !== null && configPath !== void 0 ? configPath : process.cwd()]\n    });\n\n    const thisPackageJson = packageInfo_1.getPackageJsonPath(); // We need to get the realpaths here, as hardhat may be linked and\n    // running with `node --preserve-symlinks`\n\n    return fs.realpathSync(resolvedPackageJson) === fs.realpathSync(thisPackageJson);\n  } catch (_) {\n    return false;\n  }\n}\n\nexports.isHardhatInstalledLocallyOrLinked = isHardhatInstalledLocallyOrLinked;\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\n\nfunction isLocalDev() {\n  // TODO: This may give a false positive under yarn PnP\n  return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\n\nexports.isLocalDev = isLocalDev;\n\nfunction isRunningHardhatCoreTests() {\n  return __filename.endsWith(\".ts\");\n}\n\nexports.isRunningHardhatCoreTests = isRunningHardhatCoreTests;","map":{"version":3,"sources":["../../src/internal/core/execution-mode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,EAAA,GAAA,YAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AAEA;;;;;;AAMG;;;AACH,SAAgB,iCAAhB,CAAkD,UAAlD,EAAqE;AACnE,MAAI;AACF,UAAM,mBAAmB,GAAG,OAAO,CAAC,OAAR,CAAgB,sBAAhB,EAAwC;AAClE,MAAA,KAAK,EAAE,CAAC,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,OAAO,CAAC,GAAR,EAAf;AAD2D,KAAxC,CAA5B;;AAIA,UAAM,eAAe,GAAG,aAAA,CAAA,kBAAA,EAAxB,CALE,CAOF;AACA;;AACA,WACE,EAAE,CAAC,YAAH,CAAgB,mBAAhB,MAAyC,EAAE,CAAC,YAAH,CAAgB,eAAhB,CAD3C;AAGD,GAZD,CAYE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAhBD,OAAA,CAAA,iCAAA,GAAA,iCAAA;AAkBA;;AAEG;;AACH,SAAgB,UAAhB,GAA0B;AACxB;AACA,SAAO,yBAAyB,MAAM,CAAC,UAAU,CAAC,QAAX,CAAoB,cAApB,CAAvC;AACD;;AAHD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAKA,SAAgB,yBAAhB,GAAyC;AACvC,SAAO,UAAU,CAAC,QAAX,CAAoB,KAApB,CAAP;AACD;;AAFD,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isRunningHardhatCoreTests = exports.isLocalDev = exports.isHardhatInstalledLocallyOrLinked = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst packageInfo_1 = require(\"../util/packageInfo\");\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\nfunction isHardhatInstalledLocallyOrLinked(configPath) {\n    try {\n        const resolvedPackageJson = require.resolve(\"hardhat/package.json\", {\n            paths: [configPath !== null && configPath !== void 0 ? configPath : process.cwd()],\n        });\n        const thisPackageJson = packageInfo_1.getPackageJsonPath();\n        // We need to get the realpaths here, as hardhat may be linked and\n        // running with `node --preserve-symlinks`\n        return (fs.realpathSync(resolvedPackageJson) === fs.realpathSync(thisPackageJson));\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isHardhatInstalledLocallyOrLinked = isHardhatInstalledLocallyOrLinked;\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\nfunction isLocalDev() {\n    // TODO: This may give a false positive under yarn PnP\n    return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\nexports.isLocalDev = isLocalDev;\nfunction isRunningHardhatCoreTests() {\n    return __filename.endsWith(\".ts\");\n}\nexports.isRunningHardhatCoreTests = isRunningHardhatCoreTests;\n//# sourceMappingURL=execution-mode.js.map"]},"metadata":{},"sourceType":"script"}