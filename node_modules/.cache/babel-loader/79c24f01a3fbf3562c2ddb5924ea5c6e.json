{"ast":null,"code":"import { getCurrentHub } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nimport { logAndExitProcess } from '../handlers';\n/** Global Promise Rejection handler */\n\nvar OnUnhandledRejection =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function OnUnhandledRejection(_options) {\n    if (_options === void 0) {\n      _options = {\n        mode: 'warn'\n      };\n    }\n\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n\n    this.name = OnUnhandledRejection.id;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUnhandledRejection.prototype.setupOnce = function () {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  };\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n\n\n  OnUnhandledRejection.prototype.sendUnhandledPromise = function (reason, promise) {\n    var hub = getCurrentHub();\n\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n\n      return;\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n\n    var context = promise.domain && promise.domain.sentryContext || {};\n    hub.withScope(function (scope) {\n      scope.setExtra('unhandledPromiseRejection', true); // Preserve backwards compatibility with raven-node for now\n\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n\n      hub.captureException(reason, {\n        originalException: promise\n      });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n    this._handleRejection(reason);\n  };\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  OnUnhandledRejection.prototype._handleRejection = function (reason) {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    var rejectionWarning = 'This error originated either by ' + 'throwing inside of an async function without a catch block, ' + 'or by rejecting a promise which was not handled with .catch().' + ' The promise rejected with the reason:';\n    /* eslint-disable no-console */\n\n    if (this._options.mode === 'warn') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(function () {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  OnUnhandledRejection.id = 'OnUnhandledRejection';\n  return OnUnhandledRejection;\n}();\n\nexport { OnUnhandledRejection };","map":{"version":3,"sources":["../../src/integrations/onunhandledrejection.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAAqC,cAArC;AAEA,SAAS,cAAT,QAA+B,eAA/B;AAEA,SAAS,iBAAT,QAAkC,aAAlC;AAIA;;AACA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAWE;;AAEG;AACH,WAAA,oBAAA,CACmB,QADnB,EAOsB;AANH,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA;AAMX,QAAA,IAAI,EAAE;AANK,OAAA;AAMG;;AANH,SAAA,QAAA,GAAA,QAAA;AATnB;;AAEG;;AACI,SAAA,IAAA,GAAe,oBAAoB,CAAC,EAApC;AAaH;AAEJ;;AAEG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,IAAA,MAAM,CAAC,OAAP,CAAe,EAAf,CAAkB,oBAAlB,EAAwC,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B,CAAxC;AACD,GAFM;AAIP;;;;AAIG;AACH;;;AACO,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,MAA5B,EAAyC,OAAzC,EAAqD;AACnD,QAAM,GAAG,GAAG,aAAa,EAAzB;;AAEA,QAAI,CAAC,GAAG,CAAC,cAAJ,CAAmB,oBAAnB,CAAL,EAA+C;AAC7C,WAAK,gBAAL,CAAsB,MAAtB;;AACA;AACD;AAED;;;AACA,QAAM,OAAO,GAAI,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,MAAR,CAAe,aAAlC,IAAoD,EAApE;AAEA,IAAA,GAAG,CAAC,SAAJ,CAAc,UAAC,KAAD,EAAa;AACzB,MAAA,KAAK,CAAC,QAAN,CAAe,2BAAf,EAA4C,IAA5C,EADyB,CAGzB;;AACA,UAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,QAAA,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,IAAtB;AACD;;AACD,UAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,QAAA,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,IAAtB;AACD;;AACD,UAAI,OAAO,CAAC,KAAZ,EAAmB;AACjB,QAAA,KAAK,CAAC,SAAN,CAAgB,OAAO,CAAC,KAAxB;AACD;;AAED,MAAA,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B;AAAE,QAAA,iBAAiB,EAAE;AAArB,OAA7B;AACD,KAfD;AAgBA;;AAEA,SAAK,gBAAL,CAAsB,MAAtB;AACD,GA9BM;AAgCP;;AAEG;AACH;;;AACQ,EAAA,oBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAyB,MAAzB,EAAoC;AAClC;AACA,QAAM,gBAAgB,GACpB,qCACA,8DADA,GAEA,gEAFA,GAGA,wCAJF;AAMA;;AACA,QAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,MAA3B,EAAmC;AACjC,MAAA,cAAc,CAAC,YAAA;AACb,QAAA,OAAO,CAAC,IAAR,CAAa,gBAAb,EADa,CAEb;;AACA,QAAA,OAAO,CAAC,KAAR,CAAc,MAAM,IAAI,MAAM,CAAC,KAAjB,GAAyB,MAAM,CAAC,KAAhC,GAAwC,MAAtD;AACD,OAJa,CAAd;AAKD,KAND,MAMO,IAAI,KAAK,QAAL,CAAc,IAAd,KAAuB,QAA3B,EAAqC;AAC1C,MAAA,cAAc,CAAC,YAAA;AACb,QAAA,OAAO,CAAC,IAAR,CAAa,gBAAb;AACD,OAFa,CAAd;AAGA,MAAA,iBAAiB,CAAC,MAAD,CAAjB;AACD;AACD;;AACD,GAtBO;AAxER;;AAEG;;;AACW,EAAA,oBAAA,CAAA,EAAA,GAAa,sBAAb;AA4FhB,SAAA,oBAAA;AAAC,CAhGD,EAAA;;SAAa,oB","sourcesContent":["import { getCurrentHub, Scope } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nimport { logAndExitProcess } from '../handlers';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\n/** Global Promise Rejection handler */\nexport class OnUnhandledRejection implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'OnUnhandledRejection';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = OnUnhandledRejection.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      /**\n       * Option deciding what to do after capturing unhandledRejection,\n       * that mimicks behavior of node's --unhandled-rejection flag.\n       */\n      mode: UnhandledRejectionMode;\n    } = { mode: 'warn' },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n  }\n\n  /**\n   * Send an exception with reason\n   * @param reason string\n   * @param promise promise\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n  public sendUnhandledPromise(reason: any, promise: any): void {\n    const hub = getCurrentHub();\n\n    if (!hub.getIntegration(OnUnhandledRejection)) {\n      this._handleRejection(reason);\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const context = (promise.domain && promise.domain.sentryContext) || {};\n\n    hub.withScope((scope: Scope) => {\n      scope.setExtra('unhandledPromiseRejection', true);\n\n      // Preserve backwards compatibility with raven-node for now\n      if (context.user) {\n        scope.setUser(context.user);\n      }\n      if (context.tags) {\n        scope.setTags(context.tags);\n      }\n      if (context.extra) {\n        scope.setExtras(context.extra);\n      }\n\n      hub.captureException(reason, { originalException: promise });\n    });\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n    this._handleRejection(reason);\n  }\n\n  /**\n   * Handler for `mode` option\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _handleRejection(reason: any): void {\n    // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n    const rejectionWarning =\n      'This error originated either by ' +\n      'throwing inside of an async function without a catch block, ' +\n      'or by rejecting a promise which was not handled with .catch().' +\n      ' The promise rejected with the reason:';\n\n    /* eslint-disable no-console */\n    if (this._options.mode === 'warn') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        console.error(reason && reason.stack ? reason.stack : reason);\n      });\n    } else if (this._options.mode === 'strict') {\n      consoleSandbox(() => {\n        console.warn(rejectionWarning);\n      });\n      logAndExitProcess(reason);\n    }\n    /* eslint-enable no-console */\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}