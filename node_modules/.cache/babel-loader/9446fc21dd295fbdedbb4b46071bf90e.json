{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w10te\\\\Documents\\\\dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'; // Update with the contract address logged out to the CLI when it was deployed \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generatorAddress = \"0x4b4Ad00020cbC32033db33859343596aDb621c06\";\n\nfunction App() {\n  _s();\n\n  // store greeting in local state\n  const [data, setData] = useState(0);\n  const [user, setUser] = useState(0); // request access to the user's MetaMask account\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function async_solveLastInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.solveLastInstance(data);\n      await transaction.wait();\n    }\n  }\n\n  async function async_regResearcher() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.regResearcher(user);\n      await transaction.wait();\n    }\n  } // -----------------------------------------\n\n\n  async function async_createInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n      const transaction = await contract.createInstance({\n        gasLimit: 10000000\n      });\n      await transaction.wait();\n    }\n  }\n\n  async function async_getInstance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n\n      try {\n        const signer = provider.getSigner();\n        const result = await contract.connect(signer).getInstance(); // llamar funcion que conviertya todo en strings\n\n        setData(result);\n        console.log(result);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  function getDate() {\n    const date = new Date(parseInt(data[2]._hex, 16) * 1000);\n    console.log(date.toLocaleDateString(\"en-US\"));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: getDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lnrUU/J5+2UgYTqR6g10yTGCzu0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/w10te/Documents/dapp/src/App.js"],"names":["useState","ethers","Generator","generatorAddress","App","data","setData","user","setUser","requestAccount","window","ethereum","request","method","async_solveLastInstance","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","solveLastInstance","wait","async_regResearcher","regResearcher","async_createInstance","createInstance","gasLimit","async_getInstance","result","connect","getInstance","console","log","err","getDate","date","Date","parseInt","_hex","toLocaleDateString"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'\n\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0x4b4Ad00020cbC32033db33859343596aDb621c06\"\n\nfunction App() {\n  // store greeting in local state\n  const [data, setData] = useState(0)\n  const [user, setUser] = useState(0)\n\n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n    async function async_solveLastInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.solveLastInstance(data)\n        await transaction.wait()\n      }\n    }\n\n    async function async_regResearcher() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.regResearcher(user)\n        await transaction.wait()\n      }\n    }\n\n    // -----------------------------------------\n    async function async_createInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.createInstance({\n          gasLimit: 10000000\n        })\n        await transaction.wait()\n      }\n    }\n\n    async function async_getInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getInstance()\n          // llamar funcion que conviertya todo en strings\n          setData(result)\n          console.log(result)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n    function getDate(){\n      const date = new Date(parseInt(data[2]._hex, 16)*1000);\n      console.log(date.toLocaleDateString(\"en-US\"));\n    }\n\n  return (\n    <div className=\"App\">\n      <p>{getDate}</p>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}