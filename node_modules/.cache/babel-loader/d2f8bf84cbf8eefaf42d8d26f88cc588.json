{"ast":null,"code":"/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let info = {\n      id: hexToDecimal(arr[i][0]),\n      chain: buildChain(arr[i][1], arr[i][2]),\n      agents: agentsInfo(arr[i][2]),\n      resources: resourcesInfo(arr[i][2]),\n      created: buildDate(arr[i][3]),\n      solution: arr[i][4],\n      solved: arr[i][5],\n      ended: buildDate(arr[i][6]),\n      type: typeProblem(hexToDecimal(arr[i][0])),\n      mode: mode(arr[i][2])\n    };\n    result.push(info);\n  }\n\n  return result;\n}\n/*\n* Builds the chain as a string\n*/\n\nfunction buildChain(_oldChain, setup) {\n  var agents = hexToDecimal(setup[2]);\n  var resources = hexToDecimal(setup[2]);\n  var mode = hexToDecimal(setup[2]);\n\n  var newChain = _oldChain.substring(0, _oldChain.length - 1); // We remove the last space\n\n\n  var arrayChain = newChain.split(\" \");\n  console.log(\"step 1: \" + arrayChain);\n  var result = [];\n  var cont = 0;\n  var aux = 0;\n\n  if (mode === 1) {\n    for (var k = 0; k < agents * resources; k++) {\n      if (cont === resources) {\n        cont = 0;\n        aux = 0;\n      }\n\n      aux += arrayChain[k];\n      aux = 1000 / aux;\n      result[k] = arrayChain[k] * aux;\n      cont++;\n    }\n  }\n\n  console.log(\"step 2: \" + result);\n  return v;\n}\n/*\n* Check if the instance is for auction or optimization problem\n*/\n\n\nfunction typeProblem(id) {\n  if (id % 2 === 0) return \"Auction problem\";else return \"Optimization problem\";\n}\n/*\n* Returns the number of agents\n*/\n\n\nfunction agentsInfo(setup) {\n  return hexToDecimal(setup[0]);\n}\n/*\n* Returns the number of resources\n*/\n\n\nfunction resourcesInfo(setup) {\n  return hexToDecimal(setup[1]);\n}\n/*\n* Check if the instance is unlimited or limited\n*/\n\n\nfunction mode(setup) {\n  var mode = hexToDecimal(setup[2]);\n  if (mode === 0) return \"Unlimited\";else return \"Limited\";\n}\n/*\n* Converts a hexadecimal number to decimal number\n*/\n\n\nfunction hexToDecimal(_hexNumber) {\n  return parseInt(_hexNumber._hex, 16);\n}\n/*\n* Builds the date as date format\n*/\n\n\nfunction buildDate(_oldDate) {\n  let result, newDate;\n\n  if (hexToDecimal(_oldDate) !== 0) {\n    newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n    result = newDate.getFullYear() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n  } else result = \"Date unavailable\";\n\n  return result;\n}\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\n\n\nfunction getBoolean() {\n  if (Math.random() >= 50) return true;else return false;\n}\n/*\n* Builds an array of date as date format\n*/\n\n\nexport function buildDateArray(_arrayRandoms) {\n  let result = [];\n\n  for (let i = 0; i < _arrayRandoms.length; i++) result.push(buildDate(_arrayRandoms[i]));\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Jonathan/Documents/GitHub/Egalitarian_Instance_Generator/src/components/UserSection/supportFunctions.js"],"names":["buildInstance","arr","result","i","length","info","id","hexToDecimal","chain","buildChain","agents","agentsInfo","resources","resourcesInfo","created","buildDate","solution","solved","ended","type","typeProblem","mode","push","_oldChain","setup","newChain","substring","arrayChain","split","console","log","cont","aux","k","v","_hexNumber","parseInt","_hex","_oldDate","newDate","Date","slice","getFullYear","getMonth","getDate","getHours","getMinutes","getBoolean","Math","random","buildDateArray","_arrayRandoms"],"mappings":"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","sourcesContent":["\n/*\n* Builds the instance(s) into a friendly way\n*/\nexport function buildInstance(arr) {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let info = {\n            id: hexToDecimal(arr[i][0]),\n            chain: buildChain(arr[i][1], arr[i][2]),\n            agents: agentsInfo(arr[i][2]),\n            resources: resourcesInfo(arr[i][2]),\n            created: buildDate(arr[i][3]),\n            solution: arr[i][4],\n            solved: arr[i][5],\n            ended: buildDate(arr[i][6]),\n            type: typeProblem(hexToDecimal(arr[i][0])),\n            mode: mode(arr[i][2])\n        };\n        result.push(info);\n    }\n    return result;\n}\n\n/*\n* Builds the chain as a string\n*/\nfunction buildChain(_oldChain, setup) {\n    var agents = hexToDecimal(setup[2]);\n    var resources = hexToDecimal(setup[2]);\n    var mode = hexToDecimal(setup[2]);\n    var newChain = _oldChain.substring(0, _oldChain.length-1); // We remove the last space\n    var arrayChain = newChain.split(\" \");\n    console.log(\"step 1: \" + arrayChain);\n    var result =  [];\n    var cont = 0;\n    var aux = 0;\n    if(mode === 1){\n        for(var k = 0; k < agents*resources; k++){\n            if(cont === resources){\n                cont = 0;\n                aux = 0;\n            }\n            aux += arrayChain[k];\n            aux = 1000 / aux;\n            result[k] = arrayChain[k] * aux;\n            cont++;\n        }\n    }\n    console.log(\"step 2: \" + result);\n    return v;\n}\n\n/*\n* Check if the instance is for auction or optimization problem\n*/\nfunction typeProblem(id){\n    if(id % 2 === 0)\n        return \"Auction problem\";\n    else\n        return \"Optimization problem\";\n}\n\n/*\n* Returns the number of agents\n*/\nfunction agentsInfo(setup){\n    return hexToDecimal(setup[0]);\n}\n\n/*\n* Returns the number of resources\n*/\nfunction resourcesInfo(setup){\n    return hexToDecimal(setup[1]);\n}\n\n/*\n* Check if the instance is unlimited or limited\n*/\nfunction mode(setup){\n    var mode = hexToDecimal(setup[2]);\n    if(mode === 0)\n        return \"Unlimited\";\n    else\n        return \"Limited\";\n}\n\n/*\n* Converts a hexadecimal number to decimal number\n*/\nfunction hexToDecimal(_hexNumber) {\n    return parseInt(_hexNumber._hex, 16);\n}\n\n/*\n* Builds the date as date format\n*/\nfunction buildDate(_oldDate) {\n    let result, newDate;\n    if (hexToDecimal(_oldDate) !== 0) {\n        newDate = new Date(parseInt(_oldDate._hex.slice(2), 16) * 1000);\n        result = newDate.getFullYear() + \"/\" + (newDate.getMonth()+1) + \"/\" + newDate.getDate() + \" \" + newDate.getHours() + \":\" + newDate.getMinutes();\n    } else\n        result = \"Date unavailable\";\n    return result;\n}\n\n/*\n* Returns 'true' or 'false' with 50% probability\n*/\nfunction getBoolean() {\n    if (Math.random() >= 50)\n        return true;\n    else\n        return false;\n}\n\n/*\n* Builds an array of date as date format\n*/\nexport function buildDateArray(_arrayRandoms) {\n    let result = [];\n    for (let i = 0; i < _arrayRandoms.length; i++)\n        result.push(buildDate(_arrayRandoms[i]));\n    return result;\n} "]},"metadata":{},"sourceType":"module"}