{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { API, eventToSentryRequest } from '@sentry/core';\nimport { Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, PromiseBuffer, SentryError } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as url from 'url';\nimport { SDK_NAME, SDK_VERSION } from '../version';\n/** Base Transport class implementation */\n\nvar BaseTransport =\n/** @class */\nfunction () {\n  /** Create instance and set this.dsn */\n  function BaseTransport(options) {\n    this.options = options;\n    /** A simple buffer holding all requests. */\n\n    this._buffer = new PromiseBuffer(30);\n    /** Locks transport after receiving 429 response */\n\n    this._disabledUntil = new Date(Date.now());\n    this._api = new API(options.dsn);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.sendEvent = function (_) {\n    throw new SentryError('Transport Class has to implement `sendEvent` method.');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  BaseTransport.prototype.close = function (timeout) {\n    return this._buffer.drain(timeout);\n  };\n  /** Returns a build request option object used by request */\n\n\n  BaseTransport.prototype._getRequestOptions = function (uri) {\n    var headers = __assign(__assign({}, this._api.getRequestHeaders(SDK_NAME, SDK_VERSION)), this.options.headers);\n\n    var hostname = uri.hostname,\n        pathname = uri.pathname,\n        port = uri.port,\n        protocol = uri.protocol; // See https://github.com/nodejs/node/blob/38146e717fed2fabe3aacb6540d839475e0ce1c6/lib/internal/url.js#L1268-L1290\n    // We ignore the query string on purpose\n\n    var path = \"\" + pathname;\n    return __assign({\n      agent: this.client,\n      headers: headers,\n      hostname: hostname,\n      method: 'POST',\n      path: path,\n      port: port,\n      protocol: protocol\n    }, this.options.caCerts && {\n      ca: fs.readFileSync(this.options.caCerts)\n    });\n  };\n  /** JSDoc */\n\n\n  BaseTransport.prototype._sendWithModule = function (httpModule, event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (new Date(Date.now()) < this._disabledUntil) {\n          return [2\n          /*return*/\n          , Promise.reject(new SentryError(\"Transport locked till \" + this._disabledUntil + \" due to too many requests.\"))];\n        }\n\n        if (!this._buffer.isReady()) {\n          return [2\n          /*return*/\n          , Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'))];\n        }\n\n        return [2\n        /*return*/\n        , this._buffer.add(new Promise(function (resolve, reject) {\n          var sentryReq = eventToSentryRequest(event, _this._api);\n\n          var options = _this._getRequestOptions(new url.URL(sentryReq.url));\n\n          var req = httpModule.request(options, function (res) {\n            var statusCode = res.statusCode || 500;\n            var status = Status.fromHttpCode(statusCode);\n            res.setEncoding('utf8');\n\n            if (status === Status.Success) {\n              resolve({\n                status: status\n              });\n            } else {\n              if (status === Status.RateLimit) {\n                var now = Date.now();\n                /**\n                 * \"Key-value pairs of header names and values. Header names are lower-cased.\"\n                 * https://nodejs.org/api/http.html#http_message_headers\n                 */\n\n                var retryAfterHeader = res.headers ? res.headers['retry-after'] : '';\n                retryAfterHeader = Array.isArray(retryAfterHeader) ? retryAfterHeader[0] : retryAfterHeader;\n                _this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n                logger.warn(\"Too many requests, backing off till: \" + _this._disabledUntil);\n              }\n\n              var rejectionMessage = \"HTTP Error (\" + statusCode + \")\";\n\n              if (res.headers && res.headers['x-sentry-error']) {\n                rejectionMessage += \": \" + res.headers['x-sentry-error'];\n              }\n\n              reject(new SentryError(rejectionMessage));\n            } // Force the socket to drain\n\n\n            res.on('data', function () {// Drain\n            });\n            res.on('end', function () {// Drain\n            });\n          });\n          req.on('error', reject);\n          req.end(sentryReq.body);\n        }))];\n      });\n    });\n  };\n\n  return BaseTransport;\n}();\n\nexport { BaseTransport };","map":{"version":3,"sources":["../../src/transports/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { API, eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status, Transport, TransportOptions } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, PromiseBuffer, SentryError } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as url from 'url';\n\nimport { SDK_NAME, SDK_VERSION } from '../version';\n\n/**\n * Internal used interface for typescript.\n * @hidden\n */\nexport interface HTTPModule {\n  /**\n   * Request wrapper\n   * @param options These are {@see TransportOptions}\n   * @param callback Callback when request is finished\n   */\n  request(\n    options: http.RequestOptions | https.RequestOptions | string | url.URL,\n    callback?: (res: http.IncomingMessage) => void,\n  ): http.ClientRequest;\n\n  // This is the type for nodejs versions that handle the URL argument\n  // (v10.9.0+), but we do not use it just yet because we support older node\n  // versions:\n\n  // request(\n  //   url: string | url.URL,\n  //   options: http.RequestOptions | https.RequestOptions,\n  //   callback?: (res: http.IncomingMessage) => void,\n  // ): http.ClientRequest;\n}\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /** The Agent used for corresponding transport */\n  public module?: HTTPModule;\n\n  /** The Agent used for corresponding transport */\n  public client?: http.Agent | https.Agent;\n\n  /** API object */\n  protected _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /** Create instance and set this.dsn */\n  public constructor(public options: TransportOptions) {\n    this._api = new API(options.dsn);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /** Returns a build request option object used by request */\n  protected _getRequestOptions(uri: url.URL): http.RequestOptions | https.RequestOptions {\n    const headers = {\n      ...this._api.getRequestHeaders(SDK_NAME, SDK_VERSION),\n      ...this.options.headers,\n    };\n    const { hostname, pathname, port, protocol } = uri;\n    // See https://github.com/nodejs/node/blob/38146e717fed2fabe3aacb6540d839475e0ce1c6/lib/internal/url.js#L1268-L1290\n    // We ignore the query string on purpose\n    const path = `${pathname}`;\n\n    return {\n      agent: this.client,\n      headers,\n      hostname,\n      method: 'POST',\n      path,\n      port,\n      protocol,\n      ...(this.options.caCerts && {\n        ca: fs.readFileSync(this.options.caCerts),\n      }),\n    };\n  }\n\n  /** JSDoc */\n  protected async _sendWithModule(httpModule: HTTPModule, event: Event): Promise<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject(new SentryError(`Transport locked till ${this._disabledUntil} due to too many requests.`));\n    }\n\n    if (!this._buffer.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    return this._buffer.add(\n      new Promise<Response>((resolve, reject) => {\n        const sentryReq = eventToSentryRequest(event, this._api);\n        const options = this._getRequestOptions(new url.URL(sentryReq.url));\n\n        const req = httpModule.request(options, (res: http.IncomingMessage) => {\n          const statusCode = res.statusCode || 500;\n          const status = Status.fromHttpCode(statusCode);\n\n          res.setEncoding('utf8');\n\n          if (status === Status.Success) {\n            resolve({ status });\n          } else {\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              /**\n               * \"Key-value pairs of header names and values. Header names are lower-cased.\"\n               * https://nodejs.org/api/http.html#http_message_headers\n               */\n              let retryAfterHeader = res.headers ? res.headers['retry-after'] : '';\n              retryAfterHeader = (Array.isArray(retryAfterHeader) ? retryAfterHeader[0] : retryAfterHeader) as string;\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            let rejectionMessage = `HTTP Error (${statusCode})`;\n            if (res.headers && res.headers['x-sentry-error']) {\n              rejectionMessage += `: ${res.headers['x-sentry-error']}`;\n            }\n\n            reject(new SentryError(rejectionMessage));\n          }\n\n          // Force the socket to drain\n          res.on('data', () => {\n            // Drain\n          });\n          res.on('end', () => {\n            // Drain\n          });\n        });\n        req.on('error', reject);\n        req.end(sentryReq.body);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}