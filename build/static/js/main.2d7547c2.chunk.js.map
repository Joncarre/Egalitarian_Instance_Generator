{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generatorAddress","App","useState","data","setData","user","setUser","requestAccount","a","window","ethereum","request","method","provider","ethers","providers","Web3Provider","signer","getSigner","contract","Contract","Generator","abi","solveLastInstance","transaction","wait","regResearcher","createAInstance","gasLimit","connect","getInstance","result","startDate","Date","parseInt","_hex","slice","endDate","arrayData","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","console","log","className","onClick","onChange","e","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d7547c2.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Generator from './artifacts/contracts/Generator.sol/Generator.json'\n\n// Update with the contract address logged out to the CLI when it was deployed \nconst generatorAddress = \"0xE695d851089AC420a4bb5619349032Cfe21Da72b\"\n\nfunction App() {\n  // store greeting in local state\n  const [data, setData] = useState([\" \", \" \", \" \", \" \"])\n  const [user, setUser] = useState(0)\n\n    // request access to the user's MetaMask account\n    async function requestAccount() {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    }\n\n    async function async_solveLastInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.solveLastInstance(user)\n        await transaction.wait()\n      }\n    }\n\n    async function async_regResearcher() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.regResearcher(user)\n        await transaction.wait()\n      }\n    }\n\n    // -----------------------------------------\n    async function async_createAInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, signer);\n        const transaction = await contract.createAInstance({\n          gasLimit: 12000000\n        })\n        await transaction.wait()\n      }\n    }\n\n    async function async_getInstance() {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(generatorAddress, Generator.abi, provider);\n        try {\n          const signer = provider.getSigner()\n          const result = await contract.connect(signer).getInstance()\n          let startDate = new Date(parseInt(result[2]._hex.slice(2), 16)*1000);\n          let endDate = new Date(parseInt(result[4]._hex.slice(2), 16)*1000);         \n          let arrayData = [\n            result[1], \n            startDate.getFullYear() + \"/\" + startDate.getMonth() + \"/\" + startDate.getDate()  + \" \" + startDate.getHours() + \":\" + startDate.getMinutes() + \":\" + startDate.getSeconds(),\n            result[3], \n            endDate.getFullYear() + \"/\" + endDate.getMonth() + \"/\" + endDate.getDate()  + \" \" + endDate.getHours() + \":\" + endDate.getMinutes() + \":\" + endDate.getSeconds()\n          ]\n          setData(arrayData)\n          console.log(arrayData)\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n      }    \n    }\n\n  return (\n    <div className=\"App\">\n      <h3>Researcher information</h3>\n      <button onClick={async_regResearcher}>Set orcid</button>\n      <input onChange={e => setUser(e.target.value)} placeholder=\"orcid\" />\n      <h3>Instance information</h3>\n      <button onClick={async_createAInstance}>Create A instance</button>\n      <button>Create B instance</button>\n      <p></p>\n      <button onClick={async_getInstance}>Get instance</button>\n      <div>\n        <p><h5>Instance: </h5>{data[0]}</p>\n        <p><h5>Start date: </h5>{data[1]}</p>\n        <p><h5>Solution: </h5>{data[2]}</p>\n        <p><h5>Solved date: </h5>{data[3]}</p>\n      </div>\n      <button onClick={async_solveLastInstance}>Set solution</button>\n      <input onChange={e => setUser(e.target.value)} placeholder=\"solution\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}